CCS PCM C Compiler, Version 5.112, 5967               10-Ara-24 05:12

               Filename:   C:\Users\murat\OneDrive\Desktop\PIC16F887 with DHT22 sensor\PIC16F887 interfacing with DHT22 sensor\main.lst

               ROM used:   1118 words (14%)
                           Largest free fragment is 2048
               RAM used:   51 (14%) at main() level
                           63 (17%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2E2
0003:  NOP
.................... // HAVA ÝSTASYONU HG-2P:PIC16F887 MURAT IRKAN 2024/11
.................... //   DHT22 VE BOSCH BME280 VE  LCD EKRAN 16x2 
.................... #define LCD_RS_PIN PIN_D0
.................... #define LCD_RW_PIN PIN_D1
.................... #define LCD_ENABLE_PIN PIN_D2
.................... #define LCD_DATA4 PIN_D3
.................... #define LCD_DATA5 PIN_D4
.................... #define LCD_DATA6 PIN_D5
.................... #define LCD_DATA7 PIN_D6
.................... //LCD BAGLANTISI SONU------------------
.................... 
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA D4,34
0005:  DATA ED,32
0006:  DATA A0,37
0007:  DATA 75,3A
0008:  DATA 21,00
0009:  DATA 43,34
000A:  DATA E5,31
000B:  DATA EB,39
000C:  DATA F5,36
000D:  DATA A0,22
000E:  DATA 72,39
000F:  DATA 6F,39
0010:  DATA 21,00
0011:  DATA CE,37
0012:  DATA 20,39
0013:  DATA E5,39
0014:  DATA F0,37
0015:  DATA EE,39
0016:  DATA 65,00
0017:  DATA 66,39
0018:  DATA EF,36
0019:  DATA 20,3A
001A:  DATA E8,32
001B:  DATA A0,39
001C:  DATA 65,37
001D:  DATA F3,37
001E:  DATA 72,00
*
0251:  MOVF   0B,W
0252:  MOVWF  4C
0253:  BCF    0B.7
0254:  BSF    03.5
0255:  BSF    03.6
0256:  BSF    0C.7
0257:  BSF    0C.0
0258:  NOP
0259:  NOP
025A:  BCF    03.5
025B:  BCF    03.6
025C:  BTFSC  4C.7
025D:  BSF    0B.7
025E:  BSF    03.6
025F:  MOVF   0C,W
0260:  ANDLW  7F
0261:  BTFSC  03.2
0262:  GOTO   2A5
0263:  BCF    03.6
0264:  MOVWF  4C
0265:  BSF    03.6
0266:  MOVF   0D,W
0267:  BCF    03.6
0268:  MOVWF  4D
0269:  BSF    03.6
026A:  MOVF   0F,W
026B:  BCF    03.6
026C:  MOVWF  4E
026D:  MOVF   4C,W
026E:  MOVWF  4F
026F:  CALL   144
0270:  MOVF   4D,W
0271:  BSF    03.6
0272:  MOVWF  0D
0273:  BCF    03.6
0274:  MOVF   4E,W
0275:  BSF    03.6
0276:  MOVWF  0F
0277:  BCF    03.6
0278:  MOVF   0B,W
0279:  MOVWF  4F
027A:  BCF    0B.7
027B:  BSF    03.5
027C:  BSF    03.6
027D:  BSF    0C.7
027E:  BSF    0C.0
027F:  NOP
0280:  NOP
0281:  BCF    03.5
0282:  BCF    03.6
0283:  BTFSC  4F.7
0284:  BSF    0B.7
0285:  BSF    03.6
0286:  RLF    0C,W
0287:  RLF    0E,W
0288:  ANDLW  7F
0289:  BTFSC  03.2
028A:  GOTO   2A5
028B:  BCF    03.6
028C:  MOVWF  4C
028D:  BSF    03.6
028E:  MOVF   0D,W
028F:  BCF    03.6
0290:  MOVWF  4D
0291:  BSF    03.6
0292:  MOVF   0F,W
0293:  BCF    03.6
0294:  MOVWF  4E
0295:  MOVF   4C,W
0296:  MOVWF  4F
0297:  CALL   144
0298:  MOVF   4D,W
0299:  BSF    03.6
029A:  MOVWF  0D
029B:  BCF    03.6
029C:  MOVF   4E,W
029D:  BSF    03.6
029E:  MOVWF  0F
029F:  INCF   0D,F
02A0:  BTFSC  03.2
02A1:  INCF   0F,F
02A2:  BCF    03.6
02A3:  GOTO   251
02A4:  BSF    03.6
02A5:  BCF    03.6
02A6:  RETURN
02A7:  CLRF   78
02A8:  CLRF   79
02A9:  CLRF   77
02AA:  CLRF   7A
02AB:  MOVF   51,W
02AC:  BTFSS  03.2
02AD:  GOTO   2B1
02AE:  MOVF   50,W
02AF:  BTFSC  03.2
02B0:  GOTO   2CB
02B1:  MOVLW  10
02B2:  MOVWF  52
02B3:  BCF    03.0
02B4:  RLF    4E,F
02B5:  RLF    4F,F
02B6:  RLF    77,F
02B7:  RLF    7A,F
02B8:  MOVF   51,W
02B9:  SUBWF  7A,W
02BA:  BTFSS  03.2
02BB:  GOTO   2BE
02BC:  MOVF   50,W
02BD:  SUBWF  77,W
02BE:  BTFSS  03.0
02BF:  GOTO   2C7
02C0:  MOVF   50,W
02C1:  SUBWF  77,F
02C2:  BTFSS  03.0
02C3:  DECF   7A,F
02C4:  MOVF   51,W
02C5:  SUBWF  7A,F
02C6:  BSF    03.0
02C7:  RLF    78,F
02C8:  RLF    79,F
02C9:  DECFSZ 52,F
02CA:  GOTO   2B3
02CB:  RETURN
02CC:  MOVF   00,F
02CD:  BTFSC  03.2
02CE:  GOTO   2E1
02CF:  CLRF   4D
02D0:  MOVF   04,W
02D1:  MOVWF  4C
02D2:  BCF    4D.0
02D3:  BTFSC  03.7
02D4:  BSF    4D.0
02D5:  MOVF   00,W
02D6:  MOVWF  4F
02D7:  CALL   144
02D8:  MOVF   4C,W
02D9:  MOVWF  04
02DA:  BCF    03.7
02DB:  BTFSC  4D.0
02DC:  BSF    03.7
02DD:  INCF   04,F
02DE:  BTFSC  03.2
02DF:  INCF   05,F
02E0:  GOTO   2CC
02E1:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses NOMCLR NOBROWNOUT NOLVP INTRC_IO
.................... #use delay(clock = 8MHz)
*
001F:  MOVLW  51
0020:  MOVWF  04
0021:  BCF    03.7
0022:  MOVF   00,W
0023:  BTFSC  03.2
0024:  GOTO   032
0025:  MOVLW  02
0026:  MOVWF  78
0027:  CLRF   77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 78,F
002B:  GOTO   027
002C:  MOVLW  97
002D:  MOVWF  77
002E:  DECFSZ 77,F
002F:  GOTO   02E
0030:  DECFSZ 00,F
0031:  GOTO   025
0032:  RETURN
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0098:  BSF    08.3
....................    output_float(LCD_DATA5);
0099:  BSF    08.4
....................    output_float(LCD_DATA6);
009A:  BSF    08.5
....................    output_float(LCD_DATA7);
009B:  BSF    08.6
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
009C:  BCF    03.5
009D:  BSF    08.1
009E:  BSF    03.5
009F:  BCF    08.1
....................    delay_cycles(1);
00A0:  NOP
....................    lcd_output_enable(1);
00A1:  BCF    03.5
00A2:  BSF    08.2
00A3:  BSF    03.5
00A4:  BCF    08.2
....................    delay_cycles(1);
00A5:  NOP
....................    high = lcd_read_nibble();
00A6:  BCF    03.5
00A7:  CALL   05F
00A8:  MOVF   78,W
00A9:  MOVWF  57
....................       
....................    lcd_output_enable(0);
00AA:  BCF    08.2
00AB:  BSF    03.5
00AC:  BCF    08.2
....................    delay_cycles(1);
00AD:  NOP
....................    lcd_output_enable(1);
00AE:  BCF    03.5
00AF:  BSF    08.2
00B0:  BSF    03.5
00B1:  BCF    08.2
....................    delay_us(1);
00B2:  GOTO   0B3
....................    low = lcd_read_nibble();
00B3:  BCF    03.5
00B4:  CALL   05F
00B5:  MOVF   78,W
00B6:  MOVWF  56
....................       
....................    lcd_output_enable(0);
00B7:  BCF    08.2
00B8:  BSF    03.5
00B9:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00BA:  BCF    08.3
....................    output_drive(LCD_DATA5);
00BB:  BCF    08.4
....................    output_drive(LCD_DATA6);
00BC:  BCF    08.5
....................    output_drive(LCD_DATA7);
00BD:  BCF    08.6
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00BE:  BCF    03.5
00BF:  SWAPF  57,W
00C0:  MOVWF  77
00C1:  MOVLW  F0
00C2:  ANDWF  77,F
00C3:  MOVF   77,W
00C4:  IORWF  56,W
00C5:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
005F:  CLRF   58
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0060:  BSF    03.5
0061:  BSF    08.3
0062:  MOVLW  00
0063:  BCF    03.5
0064:  BTFSC  08.3
0065:  MOVLW  01
0066:  IORWF  58,F
....................    n |= input(LCD_DATA5) << 1;
0067:  BSF    03.5
0068:  BSF    08.4
0069:  MOVLW  00
006A:  BCF    03.5
006B:  BTFSC  08.4
006C:  MOVLW  01
006D:  MOVWF  77
006E:  BCF    03.0
006F:  RLF    77,F
0070:  MOVF   77,W
0071:  IORWF  58,F
....................    n |= input(LCD_DATA6) << 2;
0072:  BSF    03.5
0073:  BSF    08.5
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  08.5
0077:  MOVLW  01
0078:  MOVWF  77
0079:  RLF    77,F
007A:  RLF    77,F
007B:  MOVLW  FC
007C:  ANDWF  77,F
007D:  MOVF   77,W
007E:  IORWF  58,F
....................    n |= input(LCD_DATA7) << 3;
007F:  BSF    03.5
0080:  BSF    08.6
0081:  MOVLW  00
0082:  BCF    03.5
0083:  BTFSC  08.6
0084:  MOVLW  01
0085:  MOVWF  77
0086:  RLF    77,F
0087:  RLF    77,F
0088:  RLF    77,F
0089:  MOVLW  F8
008A:  ANDWF  77,F
008B:  MOVF   77,W
008C:  IORWF  58,F
....................    
....................    return(n);
008D:  MOVF   58,W
008E:  MOVWF  78
....................   #else
008F:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0033:  BTFSC  57.0
0034:  GOTO   037
0035:  BCF    08.3
0036:  GOTO   038
0037:  BSF    08.3
0038:  BSF    03.5
0039:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1));
003A:  BCF    03.5
003B:  BTFSC  57.1
003C:  GOTO   03F
003D:  BCF    08.4
003E:  GOTO   040
003F:  BSF    08.4
0040:  BSF    03.5
0041:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0042:  BCF    03.5
0043:  BTFSC  57.2
0044:  GOTO   047
0045:  BCF    08.5
0046:  GOTO   048
0047:  BSF    08.5
0048:  BSF    03.5
0049:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3));
004A:  BCF    03.5
004B:  BTFSC  57.3
004C:  GOTO   04F
004D:  BCF    08.6
004E:  GOTO   050
004F:  BSF    08.6
0050:  BSF    03.5
0051:  BCF    08.6
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0052:  NOP
....................    lcd_output_enable(1);
0053:  BCF    03.5
0054:  BSF    08.2
0055:  BSF    03.5
0056:  BCF    08.2
....................    delay_us(2);
0057:  GOTO   058
0058:  GOTO   059
....................    lcd_output_enable(0);
0059:  BCF    03.5
005A:  BCF    08.2
005B:  BSF    03.5
005C:  BCF    08.2
005D:  BCF    03.5
005E:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0090:  BSF    03.5
0091:  BCF    08.2
....................    lcd_rs_tris();
0092:  BCF    08.0
....................    lcd_rw_tris();
0093:  BCF    08.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
0094:  BCF    03.5
0095:  BCF    08.0
0096:  BSF    03.5
0097:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00C6:  MOVF   78,W
00C7:  MOVWF  56
00C8:  BTFSS  56.7
00C9:  GOTO   0CC
00CA:  BSF    03.5
00CB:  GOTO   098
....................    lcd_output_rs(address);
00CC:  MOVF   54,F
00CD:  BTFSS  03.2
00CE:  GOTO   0D1
00CF:  BCF    08.0
00D0:  GOTO   0D2
00D1:  BSF    08.0
00D2:  BSF    03.5
00D3:  BCF    08.0
....................    delay_cycles(1);
00D4:  NOP
....................    lcd_output_rw(0);
00D5:  BCF    03.5
00D6:  BCF    08.1
00D7:  BSF    03.5
00D8:  BCF    08.1
....................    delay_cycles(1);
00D9:  NOP
....................    lcd_output_enable(0);
00DA:  BCF    03.5
00DB:  BCF    08.2
00DC:  BSF    03.5
00DD:  BCF    08.2
....................    lcd_send_nibble(n >> 4);
00DE:  BCF    03.5
00DF:  SWAPF  55,W
00E0:  MOVWF  56
00E1:  MOVLW  0F
00E2:  ANDWF  56,F
00E3:  MOVF   56,W
00E4:  MOVWF  57
00E5:  CALL   033
....................    lcd_send_nibble(n & 0xf);
00E6:  MOVF   55,W
00E7:  ANDLW  0F
00E8:  MOVWF  56
00E9:  MOVWF  57
00EA:  CALL   033
00EB:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00EC:  MOVLW  28
00ED:  MOVWF  4D
00EE:  MOVLW  0C
00EF:  MOVWF  4E
00F0:  MOVLW  01
00F1:  MOVWF  4F
00F2:  MOVLW  06
00F3:  MOVWF  50
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00F4:  BCF    08.2
00F5:  BSF    03.5
00F6:  BCF    08.2
....................    lcd_output_rs(0);
00F7:  BCF    03.5
00F8:  BCF    08.0
00F9:  BSF    03.5
00FA:  BCF    08.0
....................    lcd_output_rw(0);
00FB:  BCF    03.5
00FC:  BCF    08.1
00FD:  BSF    03.5
00FE:  BCF    08.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00FF:  BCF    08.3
....................    output_drive(LCD_DATA5);
0100:  BCF    08.4
....................    output_drive(LCD_DATA6);
0101:  BCF    08.5
....................    output_drive(LCD_DATA7);
0102:  BCF    08.6
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0103:  BCF    08.2
....................    lcd_rs_tris();
0104:  BCF    08.0
....................    lcd_rw_tris();
0105:  BCF    08.1
....................  #endif
....................     
....................    delay_ms(15);
0106:  MOVLW  0F
0107:  BCF    03.5
0108:  MOVWF  51
0109:  CALL   01F
....................    for(i=1;i<=3;++i)
010A:  MOVLW  01
010B:  MOVWF  4C
010C:  MOVF   4C,W
010D:  SUBLW  03
010E:  BTFSS  03.0
010F:  GOTO   118
....................    {
....................        lcd_send_nibble(3);
0110:  MOVLW  03
0111:  MOVWF  57
0112:  CALL   033
....................        delay_ms(5);
0113:  MOVLW  05
0114:  MOVWF  51
0115:  CALL   01F
0116:  INCF   4C,F
0117:  GOTO   10C
....................    }
....................    
....................    lcd_send_nibble(2);
0118:  MOVLW  02
0119:  MOVWF  57
011A:  CALL   033
....................    delay_ms(5);
011B:  MOVLW  05
011C:  MOVWF  51
011D:  CALL   01F
....................    for(i=0;i<=3;++i)
011E:  CLRF   4C
011F:  MOVF   4C,W
0120:  SUBLW  03
0121:  BTFSS  03.0
0122:  GOTO   12F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0123:  MOVLW  4D
0124:  ADDWF  4C,W
0125:  MOVWF  04
0126:  BCF    03.7
0127:  MOVF   00,W
0128:  MOVWF  51
0129:  CLRF   54
012A:  MOVF   51,W
012B:  MOVWF  55
012C:  CALL   090
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
012D:  INCF   4C,F
012E:  GOTO   11F
012F:  BCF    0A.3
0130:  BCF    0A.4
0131:  GOTO   33F (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0132:  DECFSZ 51,W
0133:  GOTO   135
0134:  GOTO   138
....................       address=LCD_LINE_TWO;
0135:  MOVLW  40
0136:  MOVWF  52
0137:  GOTO   139
....................    else
....................       address=0;
0138:  CLRF   52
....................      
....................    address+=x-1;
0139:  MOVLW  01
013A:  SUBWF  50,W
013B:  ADDWF  52,F
....................    lcd_send_byte(0,0x80|address);
013C:  MOVF   52,W
013D:  IORLW  80
013E:  MOVWF  53
013F:  CLRF   54
0140:  MOVF   53,W
0141:  MOVWF  55
0142:  CALL   090
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0143:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0144:  MOVF   4F,W
0145:  XORLW  07
0146:  BTFSC  03.2
0147:  GOTO   152
0148:  XORLW  0B
0149:  BTFSC  03.2
014A:  GOTO   157
014B:  XORLW  06
014C:  BTFSC  03.2
014D:  GOTO   15F
014E:  XORLW  02
014F:  BTFSC  03.2
0150:  GOTO   165
0151:  GOTO   16A
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0152:  MOVLW  01
0153:  MOVWF  50
0154:  MOVWF  51
0155:  CALL   132
0156:  GOTO   16F
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0157:  CLRF   54
0158:  MOVLW  01
0159:  MOVWF  55
015A:  CALL   090
....................                      delay_ms(2);
015B:  MOVLW  02
015C:  MOVWF  51
015D:  CALL   01F
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
015E:  GOTO   16F
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
015F:  MOVLW  01
0160:  MOVWF  50
0161:  MOVLW  02
0162:  MOVWF  51
0163:  CALL   132
0164:  GOTO   16F
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0165:  CLRF   54
0166:  MOVLW  10
0167:  MOVWF  55
0168:  CALL   090
0169:  GOTO   16F
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
016A:  MOVLW  01
016B:  MOVWF  54
016C:  MOVF   4F,W
016D:  MOVWF  55
016E:  CALL   090
....................      #endif
....................    }
016F:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #use fast_io(B)
.................... #use fast_io(D)
.................... #define DHT22_PIN PIN_B0                              // DHT22 Data pin is connected to RB0
.................... 
.................... char message1[] = "Temp = 00.0 C  ";
*
02FE:  MOVLW  54
02FF:  BCF    03.6
0300:  MOVWF  20
0301:  MOVLW  65
0302:  MOVWF  21
0303:  MOVLW  6D
0304:  MOVWF  22
0305:  MOVLW  70
0306:  MOVWF  23
0307:  MOVLW  20
0308:  MOVWF  24
0309:  MOVLW  3D
030A:  MOVWF  25
030B:  MOVLW  20
030C:  MOVWF  26
030D:  MOVLW  30
030E:  MOVWF  27
030F:  MOVWF  28
0310:  MOVLW  2E
0311:  MOVWF  29
0312:  MOVLW  30
0313:  MOVWF  2A
0314:  MOVLW  20
0315:  MOVWF  2B
0316:  MOVLW  43
0317:  MOVWF  2C
0318:  MOVLW  20
0319:  MOVWF  2D
031A:  MOVWF  2E
031B:  CLRF   2F
.................... char message2[] = "RH   = 00.0 %  ";
031C:  MOVLW  52
031D:  MOVWF  30
031E:  MOVLW  48
031F:  MOVWF  31
0320:  MOVLW  20
0321:  MOVWF  32
0322:  MOVWF  33
0323:  MOVWF  34
0324:  MOVLW  3D
0325:  MOVWF  35
0326:  MOVLW  20
0327:  MOVWF  36
0328:  MOVLW  30
0329:  MOVWF  37
032A:  MOVWF  38
032B:  MOVLW  2E
032C:  MOVWF  39
032D:  MOVLW  30
032E:  MOVWF  3A
032F:  MOVLW  20
0330:  MOVWF  3B
0331:  MOVLW  25
0332:  MOVWF  3C
0333:  MOVLW  20
0334:  MOVWF  3D
0335:  MOVWF  3E
0336:  CLRF   3F
.................... short Time_out = 0;
.................... unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum ;
.................... unsigned int16 Temp, RH;
.................... 
.................... void start_signal(){
....................   output_drive(DHT22_PIN);                            // Configure connection pin as output
*
0170:  BSF    03.5
0171:  BCF    06.0
....................   output_low(DHT22_PIN);                              // Connection pin output low
0172:  BCF    03.5
0173:  BCF    06.0
....................   delay_ms(25);
0174:  MOVLW  19
0175:  MOVWF  51
0176:  CALL   01F
....................   output_high(DHT22_PIN);                             // Connection pin output high
0177:  BSF    06.0
....................   delay_us(25);
0178:  MOVLW  10
0179:  MOVWF  77
017A:  DECFSZ 77,F
017B:  GOTO   17A
017C:  NOP
....................   output_float(DHT22_PIN);                            // Configure connection pin as input
017D:  BSF    03.5
017E:  BSF    06.0
017F:  BCF    03.5
0180:  BCF    0A.3
0181:  BCF    0A.4
0182:  GOTO   34B (RETURN)
.................... }
.................... short check_response(){
....................   set_timer1(0);                                      // Set Timer1 value to 0
0183:  CLRF   0E
0184:  CLRF   0F
0185:  CLRF   0E
0186:  NOP
....................   setup_timer_1(T1_INTERNAL | T1_DIV_BY_2);           // Start Timer1 with internal clock source + 2 prescaler
0187:  MOVLW  15
0188:  MOVWF  10
....................   while(!input(DHT22_PIN) && get_timer1() < 100);     // Wait until DHT22_PIN becomes high (cheking of 80µs low time response)
0189:  BTFSC  06.0
018A:  GOTO   19E
018B:  MOVF   0F,W
018C:  MOVWF  7A
018D:  MOVF   0E,W
018E:  MOVWF  77
018F:  MOVF   0F,W
0190:  SUBWF  7A,W
0191:  BTFSS  03.2
0192:  GOTO   18B
0193:  MOVF   77,W
0194:  MOVWF  4C
0195:  MOVF   7A,W
0196:  MOVWF  4D
0197:  MOVF   4D,F
0198:  BTFSS  03.2
0199:  GOTO   19E
019A:  MOVF   4C,W
019B:  SUBLW  63
019C:  BTFSC  03.0
019D:  GOTO   189
....................   if(get_timer1() > 99)                               // If response time > 99µS  ==> Response error
019E:  MOVF   0F,W
019F:  MOVWF  7A
01A0:  MOVF   0E,W
01A1:  MOVWF  77
01A2:  MOVF   0F,W
01A3:  SUBWF  7A,W
01A4:  BTFSS  03.2
01A5:  GOTO   19E
01A6:  MOVF   77,W
01A7:  MOVWF  4C
01A8:  MOVF   7A,W
01A9:  MOVWF  4D
01AA:  MOVF   4D,F
01AB:  BTFSS  03.2
01AC:  GOTO   1B1
01AD:  MOVF   4C,W
01AE:  SUBLW  63
01AF:  BTFSC  03.0
01B0:  GOTO   1B5
....................     return 0;                                         // Return 0 (Device has a problem with response)
01B1:  MOVLW  00
01B2:  MOVWF  78
01B3:  GOTO   1E7
01B4:  GOTO   1E7
....................   else{
....................     set_timer1(0);                                    // Set Timer1 value to 0
01B5:  CLRF   0E
01B6:  CLRF   0F
01B7:  CLRF   0E
01B8:  NOP
....................     while(input(DHT22_PIN) && get_timer1() < 100);    // Wait until DHT22_PIN becomes low (cheking of 80µs high time response)
01B9:  BTFSS  06.0
01BA:  GOTO   1CE
01BB:  MOVF   0F,W
01BC:  MOVWF  7A
01BD:  MOVF   0E,W
01BE:  MOVWF  77
01BF:  MOVF   0F,W
01C0:  SUBWF  7A,W
01C1:  BTFSS  03.2
01C2:  GOTO   1BB
01C3:  MOVF   77,W
01C4:  MOVWF  4C
01C5:  MOVF   7A,W
01C6:  MOVWF  4D
01C7:  MOVF   4D,F
01C8:  BTFSS  03.2
01C9:  GOTO   1CE
01CA:  MOVF   4C,W
01CB:  SUBLW  63
01CC:  BTFSC  03.0
01CD:  GOTO   1B9
....................     if(get_timer1() > 99)                             // If response time > 99µS  ==> Response error
01CE:  MOVF   0F,W
01CF:  MOVWF  7A
01D0:  MOVF   0E,W
01D1:  MOVWF  77
01D2:  MOVF   0F,W
01D3:  SUBWF  7A,W
01D4:  BTFSS  03.2
01D5:  GOTO   1CE
01D6:  MOVF   77,W
01D7:  MOVWF  4C
01D8:  MOVF   7A,W
01D9:  MOVWF  4D
01DA:  MOVF   4D,F
01DB:  BTFSS  03.2
01DC:  GOTO   1E1
01DD:  MOVF   4C,W
01DE:  SUBLW  63
01DF:  BTFSC  03.0
01E0:  GOTO   1E5
....................       return 0;                                       // Return 0 (Device has a problem with response)
01E1:  MOVLW  00
01E2:  MOVWF  78
01E3:  GOTO   1E7
01E4:  GOTO   1E7
....................     else
....................       return 1;                                       // Return 1 (response OK)
01E5:  MOVLW  01
01E6:  MOVWF  78
....................   }
01E7:  BCF    0A.3
01E8:  BCF    0A.4
01E9:  GOTO   34C (RETURN)
.................... }
.................... unsigned int8 Read_Data(){
01EA:  CLRF   4D
....................   unsigned int8 i, _data = 0;
....................   if(Time_out)
01EB:  BTFSS  40.0
01EC:  GOTO   1ED
....................     break;
....................   for(i = 0; i < 8; i++){
01ED:  CLRF   4C
01EE:  MOVF   4C,W
01EF:  SUBLW  07
01F0:  BTFSS  03.0
01F1:  GOTO   24E
....................     set_timer1(0);                                    // Set Timer1 value to 0
01F2:  CLRF   0E
01F3:  CLRF   0F
01F4:  CLRF   0E
01F5:  NOP
....................     while(!input(DHT22_PIN))                          // Wait until DHT22_PIN becomes high
01F6:  BTFSC  06.0
01F7:  GOTO   20E
....................       if(get_timer1() > 100){                         // If low time > 100  ==>  Time out error (Normally it takes 50µs)
01F8:  MOVF   0F,W
01F9:  MOVWF  7A
01FA:  MOVF   0E,W
01FB:  MOVWF  77
01FC:  MOVF   0F,W
01FD:  SUBWF  7A,W
01FE:  BTFSS  03.2
01FF:  GOTO   1F8
0200:  MOVF   77,W
0201:  MOVWF  4E
0202:  MOVF   7A,W
0203:  MOVWF  4F
0204:  MOVF   4F,F
0205:  BTFSS  03.2
0206:  GOTO   20B
0207:  MOVF   4E,W
0208:  SUBLW  64
0209:  BTFSC  03.0
020A:  GOTO   20D
....................         Time_out = 1;
020B:  BSF    40.0
....................         break;
020C:  GOTO   20E
020D:  GOTO   1F6
....................       }
....................     set_timer1(0);                                    // Set Timer1 value to 0
020E:  CLRF   0E
020F:  CLRF   0F
0210:  CLRF   0E
0211:  NOP
....................     while(input(DHT22_PIN))                           // Wait until DHT22_PIN becomes low
0212:  BTFSS  06.0
0213:  GOTO   22A
....................       if(get_timer1() > 100){                         // If high time > 100  ==>  Time out error (Normally it takes 26-28µs for 0 and 70µs for 1)
0214:  MOVF   0F,W
0215:  MOVWF  7A
0216:  MOVF   0E,W
0217:  MOVWF  77
0218:  MOVF   0F,W
0219:  SUBWF  7A,W
021A:  BTFSS  03.2
021B:  GOTO   214
021C:  MOVF   77,W
021D:  MOVWF  4E
021E:  MOVF   7A,W
021F:  MOVWF  4F
0220:  MOVF   4F,F
0221:  BTFSS  03.2
0222:  GOTO   227
0223:  MOVF   4E,W
0224:  SUBLW  64
0225:  BTFSC  03.0
0226:  GOTO   229
....................         Time_out = 1;
0227:  BSF    40.0
....................         break;
0228:  GOTO   22A
0229:  GOTO   212
....................       }
....................      if(get_timer1() > 50)                            // If high time > 50  ==>  Sensor sent 1 
022A:  MOVF   0F,W
022B:  MOVWF  7A
022C:  MOVF   0E,W
022D:  MOVWF  77
022E:  MOVF   0F,W
022F:  SUBWF  7A,W
0230:  BTFSS  03.2
0231:  GOTO   22A
0232:  MOVF   77,W
0233:  MOVWF  4E
0234:  MOVF   7A,W
0235:  MOVWF  4F
0236:  MOVF   4F,F
0237:  BTFSS  03.2
0238:  GOTO   23D
0239:  MOVF   4E,W
023A:  SUBLW  32
023B:  BTFSC  03.0
023C:  GOTO   24C
....................        bit_set(_data, (7 - i));                       // Set bit (7 - i)
023D:  MOVF   4C,W
023E:  SUBLW  07
023F:  MOVWF  4E
0240:  MOVLW  01
0241:  MOVWF  77
0242:  MOVF   4E,W
0243:  MOVWF  78
0244:  BTFSC  03.2
0245:  GOTO   24A
0246:  BCF    03.0
0247:  RLF    77,F
0248:  DECFSZ 78,F
0249:  GOTO   246
024A:  MOVF   77,W
024B:  IORWF  4D,F
024C:  INCF   4C,F
024D:  GOTO   1EE
....................   }
....................   return _data;
024E:  MOVF   4D,W
024F:  MOVWF  78
0250:  RETURN
.................... }
.................... void main(){
*
02E2:  MOVF   03,W
02E3:  ANDLW  1F
02E4:  MOVWF  03
02E5:  MOVLW  71
02E6:  BSF    03.5
02E7:  MOVWF  0F
02E8:  CLRF   10
02E9:  MOVF   0F,W
02EA:  BCF    03.5
02EB:  BCF    40.0
02EC:  CLRF   4B
02ED:  CLRF   4A
02EE:  BSF    03.5
02EF:  BSF    03.6
02F0:  MOVF   09,W
02F1:  ANDLW  C0
02F2:  MOVWF  09
02F3:  BCF    03.6
02F4:  BCF    1F.4
02F5:  BCF    1F.5
02F6:  MOVLW  00
02F7:  BSF    03.6
02F8:  MOVWF  08
02F9:  BCF    03.5
02FA:  CLRF   07
02FB:  CLRF   08
02FC:  CLRF   09
02FD:  BCF    03.7
....................   setup_oscillator(OSC_8MHZ);                         // Set the internal oscillator to 8MHz
*
0337:  MOVLW  71
0338:  BSF    03.5
0339:  MOVWF  0F
033A:  CLRF   10
033B:  MOVF   0F,W
....................   setup_timer_1(T1_DISABLED);                         // Disable Timer1
033C:  BCF    03.5
033D:  CLRF   10
....................   lcd_init();                                         // Initialize LCD module
033E:  GOTO   0EC
....................   lcd_putc('\f');                                     // Clear LCD
033F:  MOVLW  0C
0340:  MOVWF  4F
0341:  CALL   144
....................   while(TRUE){
....................     delay_ms(1000);                                   // Wait 1s
0342:  MOVLW  04
0343:  MOVWF  4C
0344:  MOVLW  FA
0345:  MOVWF  51
0346:  CALL   01F
0347:  DECFSZ 4C,F
0348:  GOTO   344
....................     Time_out = 0;
0349:  BCF    40.0
....................     Start_signal();                                   // Send start signal to the sensor
034A:  GOTO   170
....................     if(check_response()){                             // Check if there is a response from sensor (If OK start reading humidity and temperature data)
034B:  GOTO   183
034C:  MOVF   78,F
034D:  BTFSC  03.2
034E:  GOTO   441
....................       RH_byte1 = Read_Data();                         // read RH byte1
034F:  CALL   1EA
0350:  MOVF   78,W
0351:  MOVWF  43
....................       RH_byte2 = Read_Data();                         // read RH byte2
0352:  CALL   1EA
0353:  MOVF   78,W
0354:  MOVWF  44
....................       T_byte1  = Read_Data();                         // read T byte1
0355:  CALL   1EA
0356:  MOVF   78,W
0357:  MOVWF  41
....................       T_byte2  = Read_Data();                         // read T byte2
0358:  CALL   1EA
0359:  MOVF   78,W
035A:  MOVWF  42
....................       Checksum = Read_Data();                         // read checksum
035B:  CALL   1EA
035C:  MOVF   78,W
035D:  MOVWF  45
....................       setup_timer_1(T1_DISABLED);                     // Disable Timer1
035E:  CLRF   10
....................       if(Time_out) {                                  // If there is a time out in reading
035F:  BTFSS  40.0
0360:  GOTO   371
....................         lcd_putc('\f');                               // LCD clear
0361:  MOVLW  0C
0362:  MOVWF  4F
0363:  CALL   144
....................         lcd_gotoxy(5, 1);                             // Go to column 5 row 1
0364:  MOVLW  05
0365:  MOVWF  50
0366:  MOVLW  01
0367:  MOVWF  51
0368:  CALL   132
....................         lcd_putc("Time out!");                        // Display "Time out!"
0369:  MOVLW  04
036A:  BSF    03.6
036B:  MOVWF  0D
036C:  MOVLW  00
036D:  MOVWF  0F
036E:  BCF    03.6
036F:  CALL   251
....................       }
0370:  GOTO   440
....................       else {                                          // If there is no time out
....................         if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF)){
0371:  MOVF   44,W
0372:  ADDWF  43,W
0373:  ADDWF  41,W
0374:  ADDWF  42,W
0375:  SUBWF  45,W
0376:  BTFSS  03.2
0377:  GOTO   432
....................           RH = RH_byte1;
0378:  CLRF   49
0379:  MOVF   43,W
037A:  MOVWF  48
....................           RH = (RH << 8) | RH_byte2;
037B:  MOVF   48,W
037C:  MOVWF  4D
037D:  CLRF   4C
037E:  MOVF   4C,W
037F:  IORWF  44,W
0380:  MOVWF  48
0381:  MOVF   4D,W
0382:  MOVWF  49
....................           Temp = T_byte1;
0383:  CLRF   47
0384:  MOVF   41,W
0385:  MOVWF  46
....................           Temp = (Temp << 8) | T_byte2;
0386:  MOVF   46,W
0387:  MOVWF  4D
0388:  CLRF   4C
0389:  MOVF   4C,W
038A:  IORWF  42,W
038B:  MOVWF  46
038C:  MOVF   4D,W
038D:  MOVWF  47
....................           if (Temp > 0X8000){
038E:  MOVF   47,W
038F:  SUBLW  7F
0390:  BTFSC  03.0
0391:  GOTO   39D
0392:  XORLW  FF
0393:  BTFSS  03.2
0394:  GOTO   399
0395:  MOVF   46,W
0396:  SUBLW  00
0397:  BTFSC  03.0
0398:  GOTO   39D
....................             message1[6] = '-';
0399:  MOVLW  2D
039A:  MOVWF  26
....................             Temp = Temp & 0X7FFF;
039B:  BCF    47.7
....................           }
039C:  GOTO   39F
....................           else
....................             message1[6] = ' ';
039D:  MOVLW  20
039E:  MOVWF  26
....................           message1[7]  = (Temp / 100) % 10  + 48;
039F:  MOVF   47,W
03A0:  MOVWF  4F
03A1:  MOVF   46,W
03A2:  MOVWF  4E
03A3:  CLRF   51
03A4:  MOVLW  64
03A5:  MOVWF  50
03A6:  CALL   2A7
03A7:  MOVF   79,W
03A8:  MOVWF  4D
03A9:  MOVF   78,W
03AA:  MOVWF  4C
03AB:  MOVF   79,W
03AC:  MOVWF  4F
03AD:  MOVF   78,W
03AE:  MOVWF  4E
03AF:  CLRF   51
03B0:  MOVLW  0A
03B1:  MOVWF  50
03B2:  CALL   2A7
03B3:  MOVLW  30
03B4:  ADDWF  77,W
03B5:  MOVWF  27
....................           message1[8]  = (Temp / 10) % 10  + 48;
03B6:  MOVF   47,W
03B7:  MOVWF  4F
03B8:  MOVF   46,W
03B9:  MOVWF  4E
03BA:  CLRF   51
03BB:  MOVLW  0A
03BC:  MOVWF  50
03BD:  CALL   2A7
03BE:  MOVF   79,W
03BF:  MOVWF  4D
03C0:  MOVF   78,W
03C1:  MOVWF  4C
03C2:  MOVF   79,W
03C3:  MOVWF  4F
03C4:  MOVF   78,W
03C5:  MOVWF  4E
03C6:  CLRF   51
03C7:  MOVLW  0A
03C8:  MOVWF  50
03C9:  CALL   2A7
03CA:  MOVLW  30
03CB:  ADDWF  77,W
03CC:  MOVWF  28
....................           message1[10] = Temp % 10  + 48;
03CD:  MOVF   47,W
03CE:  MOVWF  4F
03CF:  MOVF   46,W
03D0:  MOVWF  4E
03D1:  CLRF   51
03D2:  MOVLW  0A
03D3:  MOVWF  50
03D4:  CALL   2A7
03D5:  MOVLW  30
03D6:  ADDWF  77,W
03D7:  MOVWF  2A
....................           if(RH == 1000)                              // If the relative humidity = 100.0 %
03D8:  MOVF   48,W
03D9:  SUBLW  E8
03DA:  BTFSS  03.2
03DB:  GOTO   3E3
03DC:  MOVF   49,W
03DD:  SUBLW  03
03DE:  BTFSS  03.2
03DF:  GOTO   3E3
....................             message2[6]  = 1 + 48;
03E0:  MOVLW  31
03E1:  MOVWF  36
03E2:  GOTO   3E5
....................           else
....................             message2[6]  = ' ';
03E3:  MOVLW  20
03E4:  MOVWF  36
....................           message2[7]  = (RH / 100) % 10 + 48;
03E5:  MOVF   49,W
03E6:  MOVWF  4F
03E7:  MOVF   48,W
03E8:  MOVWF  4E
03E9:  CLRF   51
03EA:  MOVLW  64
03EB:  MOVWF  50
03EC:  CALL   2A7
03ED:  MOVF   79,W
03EE:  MOVWF  4D
03EF:  MOVF   78,W
03F0:  MOVWF  4C
03F1:  MOVF   79,W
03F2:  MOVWF  4F
03F3:  MOVF   78,W
03F4:  MOVWF  4E
03F5:  CLRF   51
03F6:  MOVLW  0A
03F7:  MOVWF  50
03F8:  CALL   2A7
03F9:  MOVLW  30
03FA:  ADDWF  77,W
03FB:  MOVWF  37
....................           message2[8]  = (RH / 10) % 10 + 48;
03FC:  MOVF   49,W
03FD:  MOVWF  4F
03FE:  MOVF   48,W
03FF:  MOVWF  4E
0400:  CLRF   51
0401:  MOVLW  0A
0402:  MOVWF  50
0403:  CALL   2A7
0404:  MOVF   79,W
0405:  MOVWF  4D
0406:  MOVF   78,W
0407:  MOVWF  4C
0408:  MOVF   79,W
0409:  MOVWF  4F
040A:  MOVF   78,W
040B:  MOVWF  4E
040C:  CLRF   51
040D:  MOVLW  0A
040E:  MOVWF  50
040F:  CALL   2A7
0410:  MOVLW  30
0411:  ADDWF  77,W
0412:  MOVWF  38
....................           message2[10] = RH % 10 + 48;
0413:  MOVF   49,W
0414:  MOVWF  4F
0415:  MOVF   48,W
0416:  MOVWF  4E
0417:  CLRF   51
0418:  MOVLW  0A
0419:  MOVWF  50
041A:  CALL   2A7
041B:  MOVLW  30
041C:  ADDWF  77,W
041D:  MOVWF  3A
....................           message1[11] = 223;                         // Degree symbol   
041E:  MOVLW  DF
041F:  MOVWF  2B
....................           lcd_gotoxy(1, 1);                           // Go to column 1 row 1
0420:  MOVLW  01
0421:  MOVWF  50
0422:  MOVWF  51
0423:  CALL   132
....................           printf(lcd_putc, message1);                 // Display message1
0424:  MOVLW  20
0425:  MOVWF  04
0426:  BCF    03.7
0427:  CALL   2CC
....................           lcd_gotoxy(1, 2);                           // Go to column 1 row 2
0428:  MOVLW  01
0429:  MOVWF  50
042A:  MOVLW  02
042B:  MOVWF  51
042C:  CALL   132
....................           printf(lcd_putc, message2);                 // Display message2
042D:  MOVLW  30
042E:  MOVWF  04
042F:  BCF    03.7
0430:  CALL   2CC
....................         }
0431:  GOTO   440
....................         else {
....................           lcd_putc('\f');                             // LCD clear
0432:  MOVLW  0C
0433:  MOVWF  4F
0434:  CALL   144
....................           lcd_gotoxy(1, 1);                           // Go to column 1 row 1
0435:  MOVLW  01
0436:  MOVWF  50
0437:  MOVWF  51
0438:  CALL   132
....................           lcd_putc("Checksum Error!");
0439:  MOVLW  09
043A:  BSF    03.6
043B:  MOVWF  0D
043C:  MOVLW  00
043D:  MOVWF  0F
043E:  BCF    03.6
043F:  CALL   251
....................         }
....................       }
....................     }
0440:  GOTO   45C
....................     else {                                            // If there is no response from DHT22 sensor
....................       lcd_putc('\f');                                 // LCD clear
0441:  MOVLW  0C
0442:  MOVWF  4F
0443:  CALL   144
....................       lcd_gotoxy(3, 1);                               // Go to column 3 row 1
0444:  MOVLW  03
0445:  MOVWF  50
0446:  MOVLW  01
0447:  MOVWF  51
0448:  CALL   132
....................       lcd_putc("No response");
0449:  MOVLW  11
044A:  BSF    03.6
044B:  MOVWF  0D
044C:  MOVLW  00
044D:  MOVWF  0F
044E:  BCF    03.6
044F:  CALL   251
....................       lcd_gotoxy(1, 2);                               // Go to column 1 row 2
0450:  MOVLW  01
0451:  MOVWF  50
0452:  MOVLW  02
0453:  MOVWF  51
0454:  CALL   132
....................       lcd_putc("from the sensor");
0455:  MOVLW  17
0456:  BSF    03.6
0457:  MOVWF  0D
0458:  MOVLW  00
0459:  MOVWF  0F
045A:  BCF    03.6
045B:  CALL   251
....................     }
045C:  GOTO   342
....................   }
.................... }
045D:  SLEEP

Configuration Fuses:
   Word  1: 2CC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
