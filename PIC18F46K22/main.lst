CCS PCH C Compiler, Version 5.112, 5967               16-Mar-25 12:33

               Filename:   C:\Users\murat\OneDrive\Desktop\PIC18F46K22\main.lst

               ROM used:   14334 bytes (22%)
                           Largest free fragment is 51202
               RAM used:   418 (11%) at main() level
                           490 (13%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
00000:  GOTO   356C
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.0
00056:  GOTO   0060
0005A:  BTFSC  F9E.0
0005C:  GOTO   0738
00060:  MOVFF  0E,00
00064:  MOVFF  0F,01
00068:  MOVFF  10,02
0006C:  MOVFF  11,03
00070:  MOVFF  0C,FE9
00074:  MOVFF  07,FEA
00078:  BSF    07.7
0007A:  MOVFF  08,FE1
0007E:  MOVFF  09,FE2
00082:  MOVFF  0A,FD9
00086:  MOVFF  0B,FDA
0008A:  MOVFF  12,FF3
0008E:  MOVFF  13,FF4
00092:  MOVFF  14,FFA
00096:  MOVFF  15,FF5
0009A:  MOVFF  16,FF6
0009E:  MOVFF  17,FF7
000A2:  MOVF   04,W
000A4:  MOVFF  06,FE0
000A8:  MOVFF  05,FD8
000AC:  RETFIE 0
.................... //     PIC18F46K22 MCU ST7789 2.4 INÇ TFT EKRAN 
.................... //    HAVA ÝSTASYONU HG-2 CÝHAZI MURAT IRKAN 2024
.................... #define TFT_RST   PIN_D0     // RESET PÝN 
.................... #define TFT_DC    PIN_D1     // DATA VE KOMUT PÝN
.................... //#define TFT_CS    PIN_D2   // CHÝP SEÇÝMÝ PÝNÝ -> CS pin
.................... #include <18F46K22.h>
.................... //////////// Standard Header file for the PIC18F46K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
*
00748:  BCF    F9E.0
0074A:  GOTO   0060
.................... #device PIC18F46K22
*
000AE:  ADDLW  BC
000B0:  MOVWF  FF6
000B2:  MOVLW  00
000B4:  ADDWFC FF7,F
000B6:  TBLRD*+
000B8:  MOVF   FF5,W
000BA:  RETURN 0
000BC:  DATA 00,00
000BE:  DATA 00,00
000C0:  DATA 00,3E
000C2:  DATA 5B,4F
000C4:  DATA 5B,3E
000C6:  DATA 3E,6B
000C8:  DATA 4F,6B
000CA:  DATA 3E,1C
000CC:  DATA 3E,7C
000CE:  DATA 3E,1C
000D0:  DATA 18,3C
000D2:  DATA 7E,3C
000D4:  DATA 18,1C
000D6:  DATA 57,7D
000D8:  DATA 57,1C
000DA:  DATA 1C,5E
000DC:  DATA 7F,5E
000DE:  DATA 1C,00
000E0:  DATA 18,3C
000E2:  DATA 18,00
000E4:  DATA FF,E7
000E6:  DATA C3,E7
000E8:  DATA FF,00
000EA:  DATA 18,24
000EC:  DATA 18,00
000EE:  DATA FF,E7
000F0:  DATA DB,E7
000F2:  DATA FF,30
000F4:  DATA 48,3A
000F6:  DATA 06,0E
000F8:  DATA 26,29
000FA:  DATA 79,29
000FC:  DATA 26,40
000FE:  DATA 7F,05
00100:  DATA 05,07
00102:  DATA 40,7F
00104:  DATA 05,25
00106:  DATA 3F,5A
00108:  DATA 3C,E7
0010A:  DATA 3C,5A
0010C:  DATA 7F,3E
0010E:  DATA 1C,1C
00110:  DATA 08,08
00112:  DATA 1C,1C
00114:  DATA 3E,7F
00116:  DATA 14,22
00118:  DATA 7F,22
0011A:  DATA 14,5F
0011C:  DATA 5F,00
0011E:  DATA 5F,5F
00120:  DATA 06,09
00122:  DATA 7F,01
00124:  DATA 7F,00
00126:  DATA 66,89
00128:  DATA 95,6A
0012A:  DATA 60,60
0012C:  DATA 60,60
0012E:  DATA 60,94
00130:  DATA A2,FF
00132:  DATA A2,94
00134:  DATA 08,04
00136:  DATA 7E,04
00138:  DATA 08,10
0013A:  DATA 20,7E
0013C:  DATA 20,10
0013E:  DATA 08,08
00140:  DATA 2A,1C
00142:  DATA 08,08
00144:  DATA 1C,2A
00146:  DATA 08,08
00148:  DATA 1E,10
0014A:  DATA 10,10
0014C:  DATA 10,0C
0014E:  DATA 1E,0C
00150:  DATA 1E,0C
00152:  DATA 30,38
00154:  DATA 3E,38
00156:  DATA 30,06
00158:  DATA 0E,3E
0015A:  DATA 0E,06
0015C:  DATA 00,00
0015E:  DATA 00,00
00160:  DATA 00,00
00162:  DATA 00,5F
00164:  DATA 00,00
00166:  DATA 00,07
00168:  DATA 00,07
0016A:  DATA 00,14
0016C:  DATA 7F,14
0016E:  DATA 7F,14
00170:  DATA 24,2A
00172:  DATA 7F,2A
00174:  DATA 12,23
00176:  DATA 13,08
00178:  DATA 64,62
0017A:  DATA 36,49
0017C:  DATA 56,20
0017E:  DATA 50,00
00180:  DATA 08,07
00182:  DATA 03,00
00184:  DATA 00,1C
00186:  DATA 22,41
00188:  DATA 00,00
0018A:  DATA 41,22
0018C:  DATA 1C,00
0018E:  DATA 2A,1C
00190:  DATA 7F,1C
00192:  DATA 2A,08
00194:  DATA 08,3E
00196:  DATA 08,08
00198:  DATA 00,80
0019A:  DATA 70,30
0019C:  DATA 00,08
0019E:  DATA 08,08
001A0:  DATA 08,08
001A2:  DATA 00,00
001A4:  DATA 60,60
001A6:  DATA 00,20
001A8:  DATA 10,08
001AA:  DATA 04,02
001AC:  DATA 3E,51
001AE:  DATA 49,45
001B0:  DATA 3E,00
001B2:  DATA 42,7F
001B4:  DATA 40,00
001B6:  DATA 72,49
001B8:  DATA 49,49
001BA:  DATA 46,21
001BC:  DATA 41,49
001BE:  DATA 4D,33
001C0:  DATA 18,14
001C2:  DATA 12,7F
001C4:  DATA 10,27
001C6:  DATA 45,45
001C8:  DATA 45,39
001CA:  DATA 3C,4A
001CC:  DATA 49,49
001CE:  DATA 31,41
001D0:  DATA 21,11
001D2:  DATA 09,07
001D4:  DATA 36,49
001D6:  DATA 49,49
001D8:  DATA 36,46
001DA:  DATA 49,49
001DC:  DATA 29,1E
001DE:  DATA 00,00
001E0:  DATA 14,00
001E2:  DATA 00,00
001E4:  DATA 40,34
001E6:  DATA 00,00
001E8:  DATA 00,08
001EA:  DATA 14,22
001EC:  DATA 41,14
001EE:  DATA 14,14
001F0:  DATA 14,14
001F2:  DATA 00,41
001F4:  DATA 22,14
001F6:  DATA 08,02
001F8:  DATA 01,59
001FA:  DATA 09,06
001FC:  DATA 3E,41
001FE:  DATA 5D,59
00200:  DATA 4E,7C
00202:  DATA 12,11
00204:  DATA 12,7C
00206:  DATA 7F,49
00208:  DATA 49,49
0020A:  DATA 36,3E
0020C:  DATA 41,41
0020E:  DATA 41,22
00210:  DATA 7F,41
00212:  DATA 41,41
00214:  DATA 3E,7F
00216:  DATA 49,49
00218:  DATA 49,41
0021A:  DATA 7F,09
0021C:  DATA 09,09
0021E:  DATA 01,3E
00220:  DATA 41,41
00222:  DATA 51,73
00224:  DATA 7F,08
00226:  DATA 08,08
00228:  DATA 7F,00
0022A:  DATA 41,7F
0022C:  DATA 41,00
0022E:  DATA 20,40
00230:  DATA 41,3F
00232:  DATA 01,7F
00234:  DATA 08,14
00236:  DATA 22,41
00238:  DATA 7F,40
0023A:  DATA 40,40
0023C:  DATA 40,7F
0023E:  DATA 02,1C
00240:  DATA 02,7F
00242:  DATA 7F,04
00244:  DATA 08,10
00246:  DATA 7F,3E
00248:  DATA 41,41
0024A:  DATA 41,3E
0024C:  DATA 7F,09
0024E:  DATA 09,09
00250:  DATA 06,3E
00252:  DATA 41,51
00254:  DATA 21,5E
00256:  DATA 7F,09
00258:  DATA 19,29
0025A:  DATA 46,26
0025C:  DATA 49,49
0025E:  DATA 49,32
00260:  DATA 03,01
00262:  DATA 7F,01
00264:  DATA 03,3F
00266:  DATA 40,40
00268:  DATA 40,3F
0026A:  DATA 1F,20
0026C:  DATA 40,20
0026E:  DATA 1F,3F
00270:  DATA 40,38
00272:  DATA 40,3F
00274:  DATA 63,14
00276:  DATA 08,14
00278:  DATA 63,03
0027A:  DATA 04,78
0027C:  DATA 04,03
0027E:  DATA 61,59
00280:  DATA 49,4D
00282:  DATA 43,00
00284:  DATA 7F,41
00286:  DATA 41,41
00288:  DATA 02,04
0028A:  DATA 08,10
0028C:  DATA 20,00
0028E:  DATA 41,41
00290:  DATA 41,7F
00292:  DATA 04,02
00294:  DATA 01,02
00296:  DATA 04,40
00298:  DATA 40,40
0029A:  DATA 40,40
0029C:  DATA 00,03
0029E:  DATA 07,08
002A0:  DATA 00,20
002A2:  DATA 54,54
002A4:  DATA 78,40
002A6:  DATA 7F,28
002A8:  DATA 44,44
002AA:  DATA 38,38
002AC:  DATA 44,44
002AE:  DATA 44,28
002B0:  DATA 38,44
002B2:  DATA 44,28
002B4:  DATA 7F,38
002B6:  DATA 54,54
002B8:  DATA 54,18
002BA:  DATA 00,08
002BC:  DATA 7E,09
002BE:  DATA 02,18
002C0:  DATA A4,A4
002C2:  DATA 9C,78
002C4:  DATA 7F,08
002C6:  DATA 04,04
002C8:  DATA 78,00
002CA:  DATA 44,7D
002CC:  DATA 40,00
002CE:  DATA 20,40
002D0:  DATA 40,3D
002D2:  DATA 00,7F
002D4:  DATA 10,28
002D6:  DATA 44,00
002D8:  DATA 00,41
002DA:  DATA 7F,40
002DC:  DATA 00,7C
002DE:  DATA 04,78
002E0:  DATA 04,78
002E2:  DATA 7C,08
002E4:  DATA 04,04
002E6:  DATA 78,38
002E8:  DATA 44,44
002EA:  DATA 44,38
002EC:  DATA FC,18
002EE:  DATA 24,24
002F0:  DATA 18,18
002F2:  DATA 24,24
002F4:  DATA 18,FC
002F6:  DATA 7C,08
002F8:  DATA 04,04
002FA:  DATA 08,48
002FC:  DATA 54,54
002FE:  DATA 54,24
00300:  DATA 04,04
00302:  DATA 3F,44
00304:  DATA 24,3C
00306:  DATA 40,40
00308:  DATA 20,7C
0030A:  DATA 1C,20
0030C:  DATA 40,20
0030E:  DATA 1C,3C
00310:  DATA 40,30
00312:  DATA 40,3C
00314:  DATA 44,28
00316:  DATA 10,28
00318:  DATA 44,4C
0031A:  DATA 90,90
0031C:  DATA 90,7C
0031E:  DATA 44,64
00320:  DATA 54,4C
00322:  DATA 44,00
00324:  DATA 08,36
00326:  DATA 41,00
00328:  DATA 00,00
0032A:  DATA 77,00
0032C:  DATA 00,00
0032E:  DATA 41,36
00330:  DATA 08,00
00332:  DATA 02,01
00334:  DATA 02,04
00336:  DATA 02,3C
00338:  DATA 26,23
0033A:  DATA 26,3C
0033C:  DATA 1E,A1
0033E:  DATA A1,61
00340:  DATA 12,3A
00342:  DATA 40,40
00344:  DATA 20,7A
00346:  DATA 38,54
00348:  DATA 54,55
0034A:  DATA 59,21
0034C:  DATA 55,55
0034E:  DATA 79,41
00350:  DATA 22,54
00352:  DATA 54,78
00354:  DATA 42,21
00356:  DATA 55,54
00358:  DATA 78,40
0035A:  DATA 20,54
0035C:  DATA 55,79
0035E:  DATA 40,0C
00360:  DATA 1E,52
00362:  DATA 72,12
00364:  DATA 39,55
00366:  DATA 55,55
00368:  DATA 59,39
0036A:  DATA 54,54
0036C:  DATA 54,59
0036E:  DATA 39,55
00370:  DATA 54,54
00372:  DATA 58,00
00374:  DATA 00,45
00376:  DATA 7C,41
00378:  DATA 00,02
0037A:  DATA 45,7D
0037C:  DATA 42,00
0037E:  DATA 01,45
00380:  DATA 7C,40
00382:  DATA 7D,12
00384:  DATA 11,12
00386:  DATA 7D,F0
00388:  DATA 28,25
0038A:  DATA 28,F0
0038C:  DATA 7C,54
0038E:  DATA 55,45
00390:  DATA 00,20
00392:  DATA 54,54
00394:  DATA 7C,54
00396:  DATA 7C,0A
00398:  DATA 09,7F
0039A:  DATA 49,32
0039C:  DATA 49,49
0039E:  DATA 49,32
003A0:  DATA 3A,44
003A2:  DATA 44,44
003A4:  DATA 3A,32
003A6:  DATA 4A,48
003A8:  DATA 48,30
003AA:  DATA 3A,41
003AC:  DATA 41,21
003AE:  DATA 7A,3A
003B0:  DATA 42,40
003B2:  DATA 20,78
003B4:  DATA 00,9D
003B6:  DATA A0,A0
003B8:  DATA 7D,3D
003BA:  DATA 42,42
003BC:  DATA 42,3D
003BE:  DATA 3D,40
003C0:  DATA 40,40
003C2:  DATA 3D,3C
003C4:  DATA 24,FF
003C6:  DATA 24,24
003C8:  DATA 48,7E
003CA:  DATA 49,43
003CC:  DATA 66,2B
003CE:  DATA 2F,FC
003D0:  DATA 2F,2B
003D2:  DATA FF,09
003D4:  DATA 29,F6
003D6:  DATA 20,C0
003D8:  DATA 88,7E
003DA:  DATA 09,03
003DC:  DATA 20,54
003DE:  DATA 54,79
003E0:  DATA 41,00
003E2:  DATA 00,44
003E4:  DATA 7D,41
003E6:  DATA 30,48
003E8:  DATA 48,4A
003EA:  DATA 32,38
003EC:  DATA 40,40
003EE:  DATA 22,7A
003F0:  DATA 00,7A
003F2:  DATA 0A,0A
003F4:  DATA 72,7D
003F6:  DATA 0D,19
003F8:  DATA 31,7D
003FA:  DATA 26,29
003FC:  DATA 29,2F
003FE:  DATA 28,26
00400:  DATA 29,29
00402:  DATA 29,26
00404:  DATA 30,48
00406:  DATA 4D,40
00408:  DATA 20,38
0040A:  DATA 08,08
0040C:  DATA 08,08
0040E:  DATA 08,08
00410:  DATA 08,08
00412:  DATA 38,2F
00414:  DATA 10,C8
00416:  DATA AC,BA
00418:  DATA 2F,10
0041A:  DATA 28,34
0041C:  DATA FA,00
0041E:  DATA 00,7B
00420:  DATA 00,00
00422:  DATA 08,14
00424:  DATA 2A,14
00426:  DATA 22,22
00428:  DATA 14,2A
0042A:  DATA 14,08
0042C:  DATA 55,00
0042E:  DATA 55,00
00430:  DATA 55,AA
00432:  DATA 55,AA
00434:  DATA 55,AA
00436:  DATA FF,55
00438:  DATA FF,55
0043A:  DATA FF,00
0043C:  DATA 00,00
0043E:  DATA FF,00
00440:  DATA 10,10
00442:  DATA 10,FF
00444:  DATA 00,14
00446:  DATA 14,14
00448:  DATA FF,00
0044A:  DATA 10,10
0044C:  DATA FF,00
0044E:  DATA FF,10
00450:  DATA 10,F0
00452:  DATA 10,F0
00454:  DATA 14,14
00456:  DATA 14,FC
00458:  DATA 00,14
0045A:  DATA 14,F7
0045C:  DATA 00,FF
0045E:  DATA 00,00
00460:  DATA FF,00
00462:  DATA FF,14
00464:  DATA 14,F4
00466:  DATA 04,FC
00468:  DATA 14,14
0046A:  DATA 17,10
0046C:  DATA 1F,10
0046E:  DATA 10,1F
00470:  DATA 10,1F
00472:  DATA 14,14
00474:  DATA 14,1F
00476:  DATA 00,10
00478:  DATA 10,10
0047A:  DATA F0,00
0047C:  DATA 00,00
0047E:  DATA 00,1F
00480:  DATA 10,10
00482:  DATA 10,10
00484:  DATA 1F,10
00486:  DATA 10,10
00488:  DATA 10,F0
0048A:  DATA 10,00
0048C:  DATA 00,00
0048E:  DATA FF,10
00490:  DATA 10,10
00492:  DATA 10,10
00494:  DATA 10,10
00496:  DATA 10,10
00498:  DATA FF,10
0049A:  DATA 00,00
0049C:  DATA 00,FF
0049E:  DATA 14,00
004A0:  DATA 00,FF
004A2:  DATA 00,FF
004A4:  DATA 00,00
004A6:  DATA 1F,10
004A8:  DATA 17,00
004AA:  DATA 00,FC
004AC:  DATA 04,F4
004AE:  DATA 14,14
004B0:  DATA 17,10
004B2:  DATA 17,14
004B4:  DATA 14,F4
004B6:  DATA 04,F4
004B8:  DATA 00,00
004BA:  DATA FF,00
004BC:  DATA F7,14
004BE:  DATA 14,14
004C0:  DATA 14,14
004C2:  DATA 14,14
004C4:  DATA F7,00
004C6:  DATA F7,14
004C8:  DATA 14,14
004CA:  DATA 17,14
004CC:  DATA 10,10
004CE:  DATA 1F,10
004D0:  DATA 1F,14
004D2:  DATA 14,14
004D4:  DATA F4,14
004D6:  DATA 10,10
004D8:  DATA F0,10
004DA:  DATA F0,00
004DC:  DATA 00,1F
004DE:  DATA 10,1F
004E0:  DATA 00,00
004E2:  DATA 00,1F
004E4:  DATA 14,00
004E6:  DATA 00,00
004E8:  DATA FC,14
004EA:  DATA 00,00
004EC:  DATA F0,10
004EE:  DATA F0,10
004F0:  DATA 10,FF
004F2:  DATA 10,FF
004F4:  DATA 14,14
004F6:  DATA 14,FF
004F8:  DATA 14,10
004FA:  DATA 10,10
004FC:  DATA 1F,00
004FE:  DATA 00,00
00500:  DATA 00,F0
00502:  DATA 10,FF
00504:  DATA FF,FF
00506:  DATA FF,FF
00508:  DATA F0,F0
0050A:  DATA F0,F0
0050C:  DATA F0,FF
0050E:  DATA FF,FF
00510:  DATA 00,00
00512:  DATA 00,00
00514:  DATA 00,FF
00516:  DATA FF,0F
00518:  DATA 0F,0F
0051A:  DATA 0F,0F
0051C:  DATA 38,44
0051E:  DATA 44,38
00520:  DATA 44,FC
00522:  DATA 4A,4A
00524:  DATA 4A,34
00526:  DATA 7E,02
00528:  DATA 02,06
0052A:  DATA 06,02
0052C:  DATA 7E,02
0052E:  DATA 7E,02
00530:  DATA 63,55
00532:  DATA 49,41
00534:  DATA 63,38
00536:  DATA 44,44
00538:  DATA 3C,04
0053A:  DATA 40,7E
0053C:  DATA 20,1E
0053E:  DATA 20,06
00540:  DATA 02,7E
00542:  DATA 02,02
00544:  DATA 99,A5
00546:  DATA E7,A5
00548:  DATA 99,1C
0054A:  DATA 2A,49
0054C:  DATA 2A,1C
0054E:  DATA 4C,72
00550:  DATA 01,72
00552:  DATA 4C,30
00554:  DATA 4A,4D
00556:  DATA 4D,30
00558:  DATA 30,48
0055A:  DATA 78,48
0055C:  DATA 30,BC
0055E:  DATA 62,5A
00560:  DATA 46,3D
00562:  DATA 3E,49
00564:  DATA 49,49
00566:  DATA 00,7E
00568:  DATA 01,01
0056A:  DATA 01,7E
0056C:  DATA 2A,2A
0056E:  DATA 2A,2A
00570:  DATA 2A,44
00572:  DATA 44,5F
00574:  DATA 44,44
00576:  DATA 40,51
00578:  DATA 4A,44
0057A:  DATA 40,40
0057C:  DATA 44,4A
0057E:  DATA 51,40
00580:  DATA 00,00
00582:  DATA FF,01
00584:  DATA 03,E0
00586:  DATA 80,FF
00588:  DATA 00,00
0058A:  DATA 08,08
0058C:  DATA 6B,6B
0058E:  DATA 08,36
00590:  DATA 12,36
00592:  DATA 24,36
00594:  DATA 06,0F
00596:  DATA 09,0F
00598:  DATA 06,00
0059A:  DATA 00,18
0059C:  DATA 18,00
0059E:  DATA 00,00
005A0:  DATA 10,10
005A2:  DATA 00,30
005A4:  DATA 40,FF
005A6:  DATA 01,01
005A8:  DATA 00,1F
005AA:  DATA 01,01
005AC:  DATA 1E,00
005AE:  DATA 19,1D
005B0:  DATA 17,12
005B2:  DATA 00,3C
005B4:  DATA 3C,3C
005B6:  DATA 3C,00
005B8:  DATA 00,00
005BA:  DATA 00,00
005BC:  ADDLW  CA
005BE:  MOVWF  FF6
005C0:  MOVLW  05
005C2:  ADDWFC FF7,F
005C4:  TBLRD*+
005C6:  MOVF   FF5,W
005C8:  RETURN 0
005CA:  DATA 4C,6F
005CC:  DATA 72,65
005CE:  DATA 6D,20
005D0:  DATA 69,70
005D2:  DATA 73,75
005D4:  DATA 6D,20
005D6:  DATA 64,6F
005D8:  DATA 6C,6F
005DA:  DATA 72,20
005DC:  DATA 73,69
005DE:  DATA 74,20
005E0:  DATA 61,6D
005E2:  DATA 65,74
005E4:  DATA 2C,20
005E6:  DATA 63,6F
005E8:  DATA 6E,73
005EA:  DATA 65,63
005EC:  DATA 74,65
005EE:  DATA 74,75
005F0:  DATA 72,20
005F2:  DATA 61,64
005F4:  DATA 69,70
005F6:  DATA 69,73
005F8:  DATA 63,69
005FA:  DATA 6E,67
005FC:  DATA 20,65
005FE:  DATA 6C,69
00600:  DATA 74,2E
00602:  DATA 20,43
00604:  DATA 75,72
00606:  DATA 61,62
00608:  DATA 69,74
0060A:  DATA 75,72
0060C:  DATA 20,61
0060E:  DATA 64,69
00610:  DATA 70,69
00612:  DATA 73,63
00614:  DATA 69,6E
00616:  DATA 67,20
00618:  DATA 61,6E
0061A:  DATA 74,65
0061C:  DATA 20,73
0061E:  DATA 65,64
00620:  DATA 20,6E
00622:  DATA 69,62
00624:  DATA 68,20
00626:  DATA 74,69
00628:  DATA 6E,63
0062A:  DATA 69,64
0062C:  DATA 75,6E
0062E:  DATA 74,20
00630:  DATA 66,65
00632:  DATA 75,67
00634:  DATA 69,61
00636:  DATA 74,2E
00638:  DATA 20,4D
0063A:  DATA 61,65
0063C:  DATA 63,65
0063E:  DATA 6E,61
00640:  DATA 73,20
00642:  DATA 65,6E
00644:  DATA 69,6D
00646:  DATA 20,6D
00648:  DATA 61,73
0064A:  DATA 73,61
0064C:  DATA 2C,20
0064E:  DATA 66,72
00650:  DATA 69,6E
00652:  DATA 67,69
00654:  DATA 6C,6C
00656:  DATA 61,20
00658:  DATA 73,65
0065A:  DATA 64,20
0065C:  DATA 6D,61
0065E:  DATA 6C,65
00660:  DATA 73,75
00662:  DATA 61,64
00664:  DATA 61,20
00666:  DATA 65,74
00668:  DATA 2C,20
0066A:  DATA 6D,61
0066C:  DATA 6C,65
0066E:  DATA 73,75
00670:  DATA 61,64
00672:  DATA 61,20
00674:  DATA 73,69
00676:  DATA 74,20
00678:  DATA 61,6D
0067A:  DATA 65,74
0067C:  DATA 20,74
0067E:  DATA 75,72
00680:  DATA 70,69
00682:  DATA 73,2E
00684:  DATA 20,53
00686:  DATA 65,64
00688:  DATA 20,70
0068A:  DATA 6F,72
0068C:  DATA 74,74
0068E:  DATA 69,74
00690:  DATA 6F,72
00692:  DATA 20,6E
00694:  DATA 65,71
00696:  DATA 75,65
00698:  DATA 20,75
0069A:  DATA 74,20
0069C:  DATA 61,6E
0069E:  DATA 74,65
006A0:  DATA 20,70
006A2:  DATA 72,65
006A4:  DATA 74,69
006A6:  DATA 75,6D
006A8:  DATA 20,76
006AA:  DATA 69,74
006AC:  DATA 61,65
006AE:  DATA 20,6D
006B0:  DATA 61,6C
006B2:  DATA 65,73
006B4:  DATA 75,61
006B6:  DATA 64,61
006B8:  DATA 20,6E
006BA:  DATA 75,6E
006BC:  DATA 63,20
006BE:  DATA 62,69
006C0:  DATA 62,65
006C2:  DATA 6E,64
006C4:  DATA 75,6D
006C6:  DATA 2E,20
006C8:  DATA 4E,75
006CA:  DATA 6C,6C
006CC:  DATA 61,6D
006CE:  DATA 20,61
006D0:  DATA 6C,69
006D2:  DATA 71,75
006D4:  DATA 65,74
006D6:  DATA 20,75
006D8:  DATA 6C,74
006DA:  DATA 72,69
006DC:  DATA 63,65
006DE:  DATA 73,20
006E0:  DATA 6D,61
006E2:  DATA 73,73
006E4:  DATA 61,20
006E6:  DATA 65,75
006E8:  DATA 20,68
006EA:  DATA 65,6E
006EC:  DATA 64,72
006EE:  DATA 65,72
006F0:  DATA 69,74
006F2:  DATA 2E,20
006F4:  DATA 55,74
006F6:  DATA 20,73
006F8:  DATA 65,64
006FA:  DATA 20,6E
006FC:  DATA 69,73
006FE:  DATA 69,20
00700:  DATA 6C,6F
00702:  DATA 72,65
00704:  DATA 6D,2E
00706:  DATA 20,49
00708:  DATA 6E,20
0070A:  DATA 76,65
0070C:  DATA 73,74
0070E:  DATA 69,62
00710:  DATA 75,6C
00712:  DATA 75,6D
00714:  DATA 20,70
00716:  DATA 75,72
00718:  DATA 75,73
0071A:  DATA 20,61
0071C:  DATA 20,74
0071E:  DATA 6F,72
00720:  DATA 74,6F
00722:  DATA 72,20
00724:  DATA 69,6D
00726:  DATA 70,65
00728:  DATA 72,64
0072A:  DATA 69,65
0072C:  DATA 74,20
0072E:  DATA 70,6F
00730:  DATA 73,75
00732:  DATA 65,72
00734:  DATA 65,2E
00736:  DATA 20,00
00738:  MOVLW  01
0073A:  ADDWF  19,F
0073C:  BTFSC  FD8.0
0073E:  INCF   1A,F
00740:  BTFSC  FD8.2
00742:  INCF   1B,F
00744:  BTFSC  FD8.2
00746:  INCF   1C,F
*
0074E:  DATA 48,65
00750:  DATA 6C,6C
00752:  DATA 6F,20
00754:  DATA 57,6F
00756:  DATA 72,6C
00758:  DATA 64,21
0075A:  DATA 0D,0A
0075C:  DATA 00,00
0075E:  DATA 48,65
00760:  DATA 6C,6C
00762:  DATA 6F,20
00764:  DATA 57,6F
00766:  DATA 72,6C
00768:  DATA 64,21
0076A:  DATA 0D,0A
0076C:  DATA 00,00
0076E:  DATA 48,65
00770:  DATA 6C,6C
00772:  DATA 6F,20
00774:  DATA 57,6F
00776:  DATA 72,6C
00778:  DATA 64,21
0077A:  DATA 0D,0A
0077C:  DATA 00,00
0077E:  DATA 4D,55
00780:  DATA 52,41
00782:  DATA 54,20
00784:  DATA 49,52
00786:  DATA 4B,41
00788:  DATA 4E,0D
0078A:  DATA 0A,00
0078C:  DATA 20,57
0078E:  DATA 61,6E
00790:  DATA 74,20
00792:  DATA 70,69
00794:  DATA 3F,0D
00796:  DATA 0A,00
00798:  DATA 20,0D
0079A:  DATA 0A,00
0079C:  DATA 20,50
0079E:  DATA 72,69
007A0:  DATA 6E,74
007A2:  DATA 20,48
007A4:  DATA 45,58
007A6:  DATA 21,0D
007A8:  DATA 0A,00
007AA:  DATA 20,0D
007AC:  DATA 0A,00
007AE:  DATA 53,6B
007B0:  DATA 65,74
007B2:  DATA 63,68
007B4:  DATA 20,68
007B6:  DATA 61,73
007B8:  DATA 20,62
007BA:  DATA 65,65
007BC:  DATA 6E,0D
007BE:  DATA 0A,00
007C0:  DATA 72,75
007C2:  DATA 6E,6E
007C4:  DATA 69,6E
007C6:  DATA 67,20
007C8:  DATA 66,6F
007CA:  DATA 72,3A
007CC:  DATA 20,0D
007CE:  DATA 0A,00
007D0:  DATA 20,73
007D2:  DATA 65,63
007D4:  DATA 6F,6E
007D6:  DATA 64,73
007D8:  DATA 2E,00
*
00804:  MOVFF  1A6,01
00808:  MOVFF  1A5,00
0080C:  TSTFSZ 00
0080E:  INCF   01,F
00810:  TBLRD*+
00812:  MOVFF  FF5,FEE
00816:  DECFSZ 00,F
00818:  BRA    0810
0081A:  DECFSZ 01,F
0081C:  BRA    0810
0081E:  CLRF   FF8
00820:  RETURN 0
*
009F8:  ADDWF  FE8,W
009FA:  CLRF   FF7
009FC:  RLCF   FF7,F
009FE:  ADDLW  13
00A00:  MOVWF  FF6
00A02:  MOVLW  0A
00A04:  ADDWFC FF7,F
00A06:  TBLRD*-
00A08:  MOVF   FF5,W
00A0A:  MOVWF  FFA
00A0C:  TBLRD*
00A0E:  MOVF   FF5,W
00A10:  MOVWF  FF9
00A12:  DATA A2,09
00A14:  DATA B2,09
00A16:  DATA C2,09
00A18:  DATA CC,09
*
00A9E:  MOVLB  1
00AA0:  MOVF   xCB,W
00AA2:  MULWF  xCD
00AA4:  MOVFF  FF3,01
00AA8:  MOVFF  FF4,00
00AAC:  MULWF  xCE
00AAE:  MOVF   FF3,W
00AB0:  ADDWF  00,F
00AB2:  MOVF   xCC,W
00AB4:  MULWF  xCD
00AB6:  MOVF   FF3,W
00AB8:  ADDWFC 00,W
00ABA:  MOVWF  02
00ABC:  MOVLB  0
00ABE:  RETURN 0
*
00F2E:  MOVF   FEF,F
00F30:  BZ    0F50
00F32:  MOVFF  FEA,1A5
00F36:  MOVFF  FE9,1A4
00F3A:  MOVFF  FEF,1B2
00F3E:  RCALL  0C94
00F40:  MOVFF  1A5,FEA
00F44:  MOVFF  1A4,FE9
00F48:  INCF   FE9,F
00F4A:  BTFSC  FD8.2
00F4C:  INCF   FEA,F
00F4E:  BRA    0F2E
00F50:  GOTO   0F80 (RETURN)
*
00FAA:  TBLRD*+
00FAC:  MOVF   FF5,F
00FAE:  BZ    0FC8
00FB0:  MOVFF  FF6,1A2
00FB4:  MOVFF  FF7,1A3
00FB8:  MOVFF  FF5,1B2
00FBC:  RCALL  0C94
00FBE:  MOVFF  1A2,FF6
00FC2:  MOVFF  1A3,FF7
00FC6:  BRA    0FAA
00FC8:  RETURN 0
00FCA:  MOVLB  1
00FCC:  MOVF   xAF,W
00FCE:  BTFSC  FD8.2
00FD0:  BRA    10B4
00FD2:  MOVWF  00
00FD4:  MOVF   xB3,W
00FD6:  BTFSC  FD8.2
00FD8:  BRA    10B4
00FDA:  ADDWF  00,F
00FDC:  BNC   0FE6
00FDE:  MOVLW  81
00FE0:  ADDWF  00,F
00FE2:  BC    10B4
00FE4:  BRA    0FEE
00FE6:  MOVLW  7F
00FE8:  SUBWF  00,F
00FEA:  BNC   10B4
00FEC:  BZ    10B4
00FEE:  MOVFF  1B0,1B7
00FF2:  MOVF   xB4,W
00FF4:  XORWF  xB7,F
00FF6:  BSF    xB0.7
00FF8:  BSF    xB4.7
00FFA:  MOVF   xB2,W
00FFC:  MULWF  xB6
00FFE:  MOVFF  FF4,1B9
01002:  MOVF   xB1,W
01004:  MULWF  xB5
01006:  MOVFF  FF4,03
0100A:  MOVFF  FF3,1B8
0100E:  MULWF  xB6
01010:  MOVF   FF3,W
01012:  ADDWF  xB9,F
01014:  MOVF   FF4,W
01016:  ADDWFC xB8,F
01018:  MOVLW  00
0101A:  ADDWFC 03,F
0101C:  MOVF   xB2,W
0101E:  MULWF  xB5
01020:  MOVF   FF3,W
01022:  ADDWF  xB9,F
01024:  MOVF   FF4,W
01026:  ADDWFC xB8,F
01028:  MOVLW  00
0102A:  CLRF   02
0102C:  ADDWFC 03,F
0102E:  ADDWFC 02,F
01030:  MOVF   xB0,W
01032:  MULWF  xB6
01034:  MOVF   FF3,W
01036:  ADDWF  xB8,F
01038:  MOVF   FF4,W
0103A:  ADDWFC 03,F
0103C:  MOVLW  00
0103E:  ADDWFC 02,F
01040:  MOVF   xB0,W
01042:  MULWF  xB5
01044:  MOVF   FF3,W
01046:  ADDWF  03,F
01048:  MOVF   FF4,W
0104A:  ADDWFC 02,F
0104C:  MOVLW  00
0104E:  CLRF   01
01050:  ADDWFC 01,F
01052:  MOVF   xB2,W
01054:  MULWF  xB4
01056:  MOVF   FF3,W
01058:  ADDWF  xB8,F
0105A:  MOVF   FF4,W
0105C:  ADDWFC 03,F
0105E:  MOVLW  00
01060:  ADDWFC 02,F
01062:  ADDWFC 01,F
01064:  MOVF   xB1,W
01066:  MULWF  xB4
01068:  MOVF   FF3,W
0106A:  ADDWF  03,F
0106C:  MOVF   FF4,W
0106E:  ADDWFC 02,F
01070:  MOVLW  00
01072:  ADDWFC 01,F
01074:  MOVF   xB0,W
01076:  MULWF  xB4
01078:  MOVF   FF3,W
0107A:  ADDWF  02,F
0107C:  MOVF   FF4,W
0107E:  ADDWFC 01,F
01080:  INCF   00,F
01082:  BTFSC  01.7
01084:  BRA    1090
01086:  RLCF   xB8,F
01088:  RLCF   03,F
0108A:  RLCF   02,F
0108C:  RLCF   01,F
0108E:  DECF   00,F
01090:  MOVLW  00
01092:  BTFSS  xB8.7
01094:  BRA    10AA
01096:  INCF   03,F
01098:  ADDWFC 02,F
0109A:  ADDWFC 01,F
0109C:  MOVF   01,W
0109E:  BNZ   10AA
010A0:  MOVF   02,W
010A2:  BNZ   10AA
010A4:  MOVF   03,W
010A6:  BNZ   10AA
010A8:  INCF   00,F
010AA:  BTFSC  xB7.7
010AC:  BSF    01.7
010AE:  BTFSS  xB7.7
010B0:  BCF    01.7
010B2:  BRA    10BC
010B4:  CLRF   00
010B6:  CLRF   01
010B8:  CLRF   02
010BA:  CLRF   03
010BC:  MOVLB  0
010BE:  GOTO   11C6 (RETURN)
010C2:  MOVLB  1
010C4:  MOVF   xAF,W
010C6:  SUBLW  B6
010C8:  MOVWF  xAF
010CA:  CLRF   03
010CC:  MOVFF  1B0,1B3
010D0:  BSF    xB0.7
010D2:  BCF    FD8.0
010D4:  RRCF   xB0,F
010D6:  RRCF   xB1,F
010D8:  RRCF   xB2,F
010DA:  RRCF   03,F
010DC:  RRCF   02,F
010DE:  RRCF   01,F
010E0:  RRCF   00,F
010E2:  DECFSZ xAF,F
010E4:  BRA    10D2
010E6:  BTFSS  xB3.7
010E8:  BRA    1100
010EA:  COMF   00,F
010EC:  COMF   01,F
010EE:  COMF   02,F
010F0:  COMF   03,F
010F2:  INCF   00,F
010F4:  BTFSC  FD8.2
010F6:  INCF   01,F
010F8:  BTFSC  FD8.2
010FA:  INCF   02,F
010FC:  BTFSC  FD8.2
010FE:  INCF   03,F
01100:  MOVLB  0
01102:  GOTO   11F0 (RETURN)
01106:  BTFSC  FD8.1
01108:  BRA    1112
0110A:  MOVLW  01
0110C:  MOVWF  FEA
0110E:  MOVLW  BA
01110:  MOVWF  FE9
01112:  CLRF   00
01114:  CLRF   01
01116:  CLRF   02
01118:  CLRF   03
0111A:  MOVLB  1
0111C:  CLRF   xBA
0111E:  CLRF   xBB
01120:  CLRF   xBC
01122:  CLRF   xBD
01124:  MOVF   xB9,W
01126:  IORWF  xB8,W
01128:  IORWF  xB7,W
0112A:  IORWF  xB6,W
0112C:  BZ    1186
0112E:  MOVLW  20
01130:  MOVWF  xBE
01132:  BCF    FD8.0
01134:  RLCF   xB2,F
01136:  RLCF   xB3,F
01138:  RLCF   xB4,F
0113A:  RLCF   xB5,F
0113C:  RLCF   xBA,F
0113E:  RLCF   xBB,F
01140:  RLCF   xBC,F
01142:  RLCF   xBD,F
01144:  MOVF   xB9,W
01146:  SUBWF  xBD,W
01148:  BNZ   115A
0114A:  MOVF   xB8,W
0114C:  SUBWF  xBC,W
0114E:  BNZ   115A
01150:  MOVF   xB7,W
01152:  SUBWF  xBB,W
01154:  BNZ   115A
01156:  MOVF   xB6,W
01158:  SUBWF  xBA,W
0115A:  BNC   117A
0115C:  MOVF   xB6,W
0115E:  SUBWF  xBA,F
01160:  MOVF   xB7,W
01162:  BTFSS  FD8.0
01164:  INCFSZ xB7,W
01166:  SUBWF  xBB,F
01168:  MOVF   xB8,W
0116A:  BTFSS  FD8.0
0116C:  INCFSZ xB8,W
0116E:  SUBWF  xBC,F
01170:  MOVF   xB9,W
01172:  BTFSS  FD8.0
01174:  INCFSZ xB9,W
01176:  SUBWF  xBD,F
01178:  BSF    FD8.0
0117A:  RLCF   00,F
0117C:  RLCF   01,F
0117E:  RLCF   02,F
01180:  RLCF   03,F
01182:  DECFSZ xBE,F
01184:  BRA    1132
01186:  MOVFF  1BA,FEF
0118A:  MOVFF  1BB,FEC
0118E:  MOVFF  1BC,FEC
01192:  MOVFF  1BD,FEC
01196:  MOVLB  0
01198:  RETURN 0
0119A:  MOVF   FE9,W
0119C:  MOVLB  1
0119E:  MOVWF  xA7
011A0:  MOVF   xA6,W
011A2:  MOVWF  xA9
011A4:  BZ    11DC
011A6:  MOVFF  1A5,1B2
011AA:  MOVFF  1A4,1B1
011AE:  MOVFF  1A3,1B0
011B2:  MOVFF  1A2,1AF
011B6:  CLRF   xB6
011B8:  CLRF   xB5
011BA:  MOVLW  20
011BC:  MOVWF  xB4
011BE:  MOVLW  82
011C0:  MOVWF  xB3
011C2:  MOVLB  0
011C4:  BRA    0FCA
011C6:  MOVFF  03,1A5
011CA:  MOVFF  02,1A4
011CE:  MOVFF  01,1A3
011D2:  MOVFF  00,1A2
011D6:  MOVLB  1
011D8:  DECFSZ xA9,F
011DA:  BRA    11A6
011DC:  MOVFF  1A5,1B2
011E0:  MOVFF  1A4,1B1
011E4:  MOVFF  1A3,1B0
011E8:  MOVFF  1A2,1AF
011EC:  MOVLB  0
011EE:  BRA    10C2
011F0:  MOVFF  03,1A5
011F4:  MOVFF  02,1A4
011F8:  MOVFF  01,1A3
011FC:  MOVFF  00,1A2
01200:  MOVLB  1
01202:  BTFSS  xA5.7
01204:  BRA    1220
01206:  DECF   xA7,F
01208:  BSF    xA7.5
0120A:  COMF   xA2,F
0120C:  COMF   xA3,F
0120E:  COMF   xA4,F
01210:  COMF   xA5,F
01212:  INCF   xA2,F
01214:  BTFSC  FD8.2
01216:  INCF   xA3,F
01218:  BTFSC  FD8.2
0121A:  INCF   xA4,F
0121C:  BTFSC  FD8.2
0121E:  INCF   xA5,F
01220:  MOVLW  3B
01222:  MOVWF  xAE
01224:  MOVLW  9A
01226:  MOVWF  xAD
01228:  MOVLW  CA
0122A:  MOVWF  xAC
0122C:  CLRF   xAB
0122E:  MOVLW  0A
01230:  MOVWF  xA9
01232:  MOVF   xA6,W
01234:  BTFSC  FD8.2
01236:  INCF   xA7,F
01238:  BSF    FD8.1
0123A:  MOVLW  01
0123C:  MOVWF  FEA
0123E:  MOVLW  A2
01240:  MOVWF  FE9
01242:  MOVFF  1A5,1B5
01246:  MOVFF  1A4,1B4
0124A:  MOVFF  1A3,1B3
0124E:  MOVFF  1A2,1B2
01252:  MOVFF  1AE,1B9
01256:  MOVFF  1AD,1B8
0125A:  MOVFF  1AC,1B7
0125E:  MOVFF  1AB,1B6
01262:  MOVLB  0
01264:  RCALL  1106
01266:  MOVF   01,W
01268:  MOVF   00,F
0126A:  BNZ   1292
0126C:  MOVLB  1
0126E:  INCF   xA6,W
01270:  SUBWF  xA9,W
01272:  BTFSS  FD8.2
01274:  BRA    127A
01276:  MOVLB  0
01278:  BRA    1292
0127A:  MOVF   xA7,W
0127C:  BZ    1298
0127E:  ANDLW  0F
01280:  SUBWF  xA9,W
01282:  BZ    1286
01284:  BC    1306
01286:  BTFSC  xA7.7
01288:  BRA    1306
0128A:  BTFSC  xA7.6
0128C:  BRA    1298
0128E:  MOVLW  20
01290:  BRA    12FA
01292:  MOVLW  20
01294:  MOVLB  1
01296:  ANDWF  xA7,F
01298:  BTFSS  xA7.5
0129A:  BRA    12B8
0129C:  BCF    xA7.5
0129E:  MOVF   xA6,W
012A0:  BTFSS  FD8.2
012A2:  DECF   xA7,F
012A4:  MOVF   00,W
012A6:  MOVWF  xA7
012A8:  MOVLW  2D
012AA:  MOVWF  xB2
012AC:  MOVLB  0
012AE:  RCALL  0C94
012B0:  MOVLB  1
012B2:  MOVF   xA7,W
012B4:  MOVWF  00
012B6:  CLRF   xA7
012B8:  MOVF   xA6,W
012BA:  SUBWF  xA9,W
012BC:  BNZ   12D6
012BE:  MOVF   00,W
012C0:  MOVWF  xA7
012C2:  MOVLW  2E
012C4:  MOVWF  xB2
012C6:  MOVLB  0
012C8:  RCALL  0C94
012CA:  MOVLB  1
012CC:  MOVF   xA7,W
012CE:  MOVWF  00
012D0:  MOVLW  20
012D2:  ANDWF  xA7,F
012D4:  MOVLW  00
012D6:  MOVLW  30
012D8:  BTFSS  xA7.5
012DA:  BRA    12FA
012DC:  BCF    xA7.5
012DE:  MOVF   xA6,W
012E0:  BTFSS  FD8.2
012E2:  DECF   xA7,F
012E4:  MOVF   00,W
012E6:  MOVWF  xA7
012E8:  MOVLW  2D
012EA:  MOVWF  xB2
012EC:  MOVLB  0
012EE:  RCALL  0C94
012F0:  MOVLB  1
012F2:  MOVF   xA7,W
012F4:  MOVWF  00
012F6:  CLRF   xA7
012F8:  MOVLW  30
012FA:  ADDWF  00,F
012FC:  MOVFF  00,1B2
01300:  MOVLB  0
01302:  RCALL  0C94
01304:  MOVLB  1
01306:  BCF    FD8.1
01308:  MOVFF  1AE,1B5
0130C:  MOVFF  1AD,1B4
01310:  MOVFF  1AC,1B3
01314:  MOVFF  1AB,1B2
01318:  CLRF   xB9
0131A:  CLRF   xB8
0131C:  CLRF   xB7
0131E:  MOVLW  0A
01320:  MOVWF  xB6
01322:  MOVLB  0
01324:  RCALL  1106
01326:  MOVFF  03,1AE
0132A:  MOVFF  02,1AD
0132E:  MOVFF  01,1AC
01332:  MOVFF  00,1AB
01336:  MOVLB  1
01338:  DECFSZ xA9,F
0133A:  BRA    1238
0133C:  MOVLB  0
0133E:  RETURN 0
01340:  MOVLB  1
01342:  BTFSC  xA3.7
01344:  BRA    1368
01346:  MOVLW  0F
01348:  MOVWF  00
0134A:  SWAPF  xA2,W
0134C:  ANDWF  00,F
0134E:  MOVLW  0A
01350:  SUBWF  00,W
01352:  BC    135A
01354:  MOVLW  30
01356:  ADDWF  00,F
01358:  BRA    135E
0135A:  MOVF   xA3,W
0135C:  ADDWF  00,F
0135E:  MOVFF  00,1B2
01362:  MOVLB  0
01364:  RCALL  0C94
01366:  MOVLB  1
01368:  MOVLW  0F
0136A:  ANDWF  xA2,F
0136C:  MOVLW  0A
0136E:  SUBWF  xA2,W
01370:  BC    1376
01372:  MOVLW  30
01374:  BRA    137A
01376:  BCF    xA3.7
01378:  MOVF   xA3,W
0137A:  ADDWF  xA2,F
0137C:  MOVFF  1A2,1B2
01380:  MOVLB  0
01382:  RCALL  0C94
01384:  RETURN 0
*
013DA:  MOVF   FE9,W
013DC:  MOVLB  1
013DE:  MOVWF  xAA
013E0:  MOVLW  3B
013E2:  MOVWF  xB1
013E4:  MOVLW  9A
013E6:  MOVWF  xB0
013E8:  MOVLW  CA
013EA:  MOVWF  xAF
013EC:  CLRF   xAE
013EE:  MOVLW  0A
013F0:  MOVWF  xAC
013F2:  BSF    FD8.1
013F4:  MOVLW  01
013F6:  MOVWF  FEA
013F8:  MOVLW  A6
013FA:  MOVWF  FE9
013FC:  MOVFF  1A9,1B5
01400:  MOVFF  1A8,1B4
01404:  MOVFF  1A7,1B3
01408:  MOVFF  1A6,1B2
0140C:  MOVFF  1B1,1B9
01410:  MOVFF  1B0,1B8
01414:  MOVFF  1AF,1B7
01418:  MOVFF  1AE,1B6
0141C:  MOVLB  0
0141E:  RCALL  1106
01420:  MOVF   01,W
01422:  MOVF   00,F
01424:  BNZ   144C
01426:  MOVLB  1
01428:  MOVF   xAC,W
0142A:  XORLW  01
0142C:  BTFSS  FD8.2
0142E:  BRA    1434
01430:  MOVLB  0
01432:  BRA    144C
01434:  MOVF   xAA,W
01436:  BZ    1450
01438:  ANDLW  0F
0143A:  SUBWF  xAC,W
0143C:  BZ    1440
0143E:  BC    145E
01440:  BTFSC  xAA.7
01442:  BRA    145E
01444:  BTFSC  xAA.6
01446:  BRA    1450
01448:  MOVLW  20
0144A:  BRA    1452
0144C:  MOVLB  1
0144E:  CLRF   xAA
01450:  MOVLW  30
01452:  ADDWF  00,F
01454:  MOVFF  00,1B2
01458:  MOVLB  0
0145A:  RCALL  0C94
0145C:  MOVLB  1
0145E:  BCF    FD8.1
01460:  MOVFF  1B1,1B5
01464:  MOVFF  1B0,1B4
01468:  MOVFF  1AF,1B3
0146C:  MOVFF  1AE,1B2
01470:  CLRF   xB9
01472:  CLRF   xB8
01474:  CLRF   xB7
01476:  MOVLW  0A
01478:  MOVWF  xB6
0147A:  MOVLB  0
0147C:  RCALL  1106
0147E:  MOVFF  03,1B1
01482:  MOVFF  02,1B0
01486:  MOVFF  01,1AF
0148A:  MOVFF  00,1AE
0148E:  MOVLB  1
01490:  DECFSZ xAC,F
01492:  BRA    13F2
01494:  MOVLB  0
01496:  GOTO   16A0 (RETURN)
*
0173E:  MOVLB  1
01740:  MOVF   xDD,W
01742:  XORWF  xDF,W
01744:  ANDLW  80
01746:  MOVWF  xE1
01748:  BTFSS  xDD.7
0174A:  BRA    1756
0174C:  COMF   xDC,F
0174E:  COMF   xDD,F
01750:  INCF   xDC,F
01752:  BTFSC  FD8.2
01754:  INCF   xDD,F
01756:  BTFSS  xDF.7
01758:  BRA    1764
0175A:  COMF   xDE,F
0175C:  COMF   xDF,F
0175E:  INCF   xDE,F
01760:  BTFSC  FD8.2
01762:  INCF   xDF,F
01764:  CLRF   01
01766:  CLRF   02
01768:  CLRF   00
0176A:  CLRF   03
0176C:  MOVF   xDF,W
0176E:  BNZ   1774
01770:  MOVF   xDE,W
01772:  BZ    17A4
01774:  MOVLW  10
01776:  MOVWF  xE0
01778:  BCF    FD8.0
0177A:  RLCF   xDC,F
0177C:  RLCF   xDD,F
0177E:  RLCF   00,F
01780:  RLCF   03,F
01782:  MOVF   xDF,W
01784:  SUBWF  03,W
01786:  BNZ   178C
01788:  MOVF   xDE,W
0178A:  SUBWF  00,W
0178C:  BNC   179C
0178E:  MOVF   xDE,W
01790:  SUBWF  00,F
01792:  BTFSS  FD8.0
01794:  DECF   03,F
01796:  MOVF   xDF,W
01798:  SUBWF  03,F
0179A:  BSF    FD8.0
0179C:  RLCF   01,F
0179E:  RLCF   02,F
017A0:  DECFSZ xE0,F
017A2:  BRA    1778
017A4:  BTFSS  xE1.7
017A6:  BRA    17B2
017A8:  COMF   01,F
017AA:  COMF   02,F
017AC:  INCF   01,F
017AE:  BTFSC  FD8.2
017B0:  INCF   02,F
017B2:  MOVLB  0
017B4:  RETURN 0
*
01E0A:  MOVLB  1
01E0C:  MOVF   xDB,W
01E0E:  XORWF  xDD,W
01E10:  ANDLW  80
01E12:  MOVWF  xDF
01E14:  BTFSS  xDB.7
01E16:  BRA    1E22
01E18:  COMF   xDA,F
01E1A:  COMF   xDB,F
01E1C:  INCF   xDA,F
01E1E:  BTFSC  FD8.2
01E20:  INCF   xDB,F
01E22:  BTFSS  xDD.7
01E24:  BRA    1E30
01E26:  COMF   xDC,F
01E28:  COMF   xDD,F
01E2A:  INCF   xDC,F
01E2C:  BTFSC  FD8.2
01E2E:  INCF   xDD,F
01E30:  MOVF   xDA,W
01E32:  MULWF  xDC
01E34:  MOVFF  FF3,01
01E38:  MOVFF  FF4,00
01E3C:  MULWF  xDD
01E3E:  MOVF   FF3,W
01E40:  ADDWF  00,F
01E42:  MOVF   xDB,W
01E44:  MULWF  xDC
01E46:  MOVF   FF3,W
01E48:  ADDWFC 00,W
01E4A:  MOVWF  02
01E4C:  BTFSS  xDF.7
01E4E:  BRA    1E5A
01E50:  COMF   01,F
01E52:  COMF   02,F
01E54:  INCF   01,F
01E56:  BTFSC  FD8.2
01E58:  INCF   02,F
01E5A:  MOVLB  0
01E5C:  RETURN 0
*
02CAA:  BTFSC  FD8.1
02CAC:  BRA    2CB6
02CAE:  MOVLW  01
02CB0:  MOVWF  FEA
02CB2:  MOVLW  E4
02CB4:  MOVWF  FE9
02CB6:  MOVLB  1
02CB8:  MOVF   xDF,W
02CBA:  XORWF  xE3,W
02CBC:  ANDLW  80
02CBE:  MOVWF  xE9
02CC0:  BTFSS  xDF.7
02CC2:  BRA    2CDA
02CC4:  COMF   xDC,F
02CC6:  COMF   xDD,F
02CC8:  COMF   xDE,F
02CCA:  COMF   xDF,F
02CCC:  INCF   xDC,F
02CCE:  BTFSC  FD8.2
02CD0:  INCF   xDD,F
02CD2:  BTFSC  FD8.2
02CD4:  INCF   xDE,F
02CD6:  BTFSC  FD8.2
02CD8:  INCF   xDF,F
02CDA:  BTFSS  xE3.7
02CDC:  BRA    2CF4
02CDE:  COMF   xE0,F
02CE0:  COMF   xE1,F
02CE2:  COMF   xE2,F
02CE4:  COMF   xE3,F
02CE6:  INCF   xE0,F
02CE8:  BTFSC  FD8.2
02CEA:  INCF   xE1,F
02CEC:  BTFSC  FD8.2
02CEE:  INCF   xE2,F
02CF0:  BTFSC  FD8.2
02CF2:  INCF   xE3,F
02CF4:  CLRF   00
02CF6:  CLRF   01
02CF8:  CLRF   02
02CFA:  CLRF   03
02CFC:  CLRF   xE4
02CFE:  CLRF   xE5
02D00:  CLRF   xE6
02D02:  CLRF   xE7
02D04:  MOVF   xE3,W
02D06:  IORWF  xE2,W
02D08:  IORWF  xE1,W
02D0A:  IORWF  xE0,W
02D0C:  BZ    2D66
02D0E:  MOVLW  20
02D10:  MOVWF  xE8
02D12:  BCF    FD8.0
02D14:  RLCF   xDC,F
02D16:  RLCF   xDD,F
02D18:  RLCF   xDE,F
02D1A:  RLCF   xDF,F
02D1C:  RLCF   xE4,F
02D1E:  RLCF   xE5,F
02D20:  RLCF   xE6,F
02D22:  RLCF   xE7,F
02D24:  MOVF   xE3,W
02D26:  SUBWF  xE7,W
02D28:  BNZ   2D3A
02D2A:  MOVF   xE2,W
02D2C:  SUBWF  xE6,W
02D2E:  BNZ   2D3A
02D30:  MOVF   xE1,W
02D32:  SUBWF  xE5,W
02D34:  BNZ   2D3A
02D36:  MOVF   xE0,W
02D38:  SUBWF  xE4,W
02D3A:  BNC   2D5A
02D3C:  MOVF   xE0,W
02D3E:  SUBWF  xE4,F
02D40:  MOVF   xE1,W
02D42:  BTFSS  FD8.0
02D44:  INCFSZ xE1,W
02D46:  SUBWF  xE5,F
02D48:  MOVF   xE2,W
02D4A:  BTFSS  FD8.0
02D4C:  INCFSZ xE2,W
02D4E:  SUBWF  xE6,F
02D50:  MOVF   xE3,W
02D52:  BTFSS  FD8.0
02D54:  INCFSZ xE3,W
02D56:  SUBWF  xE7,F
02D58:  BSF    FD8.0
02D5A:  RLCF   00,F
02D5C:  RLCF   01,F
02D5E:  RLCF   02,F
02D60:  RLCF   03,F
02D62:  DECFSZ xE8,F
02D64:  BRA    2D12
02D66:  BTFSS  xE9.7
02D68:  BRA    2D80
02D6A:  COMF   00,F
02D6C:  COMF   01,F
02D6E:  COMF   02,F
02D70:  COMF   03,F
02D72:  INCF   00,F
02D74:  BTFSC  FD8.2
02D76:  INCF   01,F
02D78:  BTFSC  FD8.2
02D7A:  INCF   02,F
02D7C:  BTFSC  FD8.2
02D7E:  INCF   03,F
02D80:  MOVFF  1E4,FEF
02D84:  MOVFF  1E5,FEC
02D88:  MOVFF  1E6,FEC
02D8C:  MOVFF  1E7,FEC
02D90:  MOVLB  0
02D92:  RETURN 0
.................... 
.................... #list
.................... 
.................... #fuses  NOMCLR,NOLVP,NOBROWNOUT,PUT,NOXINST
.................... #use delay(internal = 64MHz) // PIC18F46K22 MCU DAHÝLÝ KRÝSTAL AKTÝF.!
*
007DA:  MOVLW  01
007DC:  MOVWF  FEA
007DE:  MOVLW  A5
007E0:  MOVWF  FE9
007E2:  MOVF   FEF,W
007E4:  BZ    0802
007E6:  MOVLW  14
007E8:  MOVWF  01
007EA:  CLRF   00
007EC:  DECFSZ 00,F
007EE:  BRA    07EC
007F0:  DECFSZ 01,F
007F2:  BRA    07EA
007F4:  MOVLW  BF
007F6:  MOVWF  00
007F8:  DECFSZ 00,F
007FA:  BRA    07F8
007FC:  BRA    07FE
007FE:  DECFSZ FEF,F
00800:  BRA    07E6
00802:  RETURN 0
.................... #use SPI(SPI1, MODE = 2, BITS = 8, STREAM = ST7789)// SPI BAGLANTI PARAMETRELERÝ
*
00822:  MOVF   FC9,W
00824:  MOVFF  1E6,FC9
00828:  RRCF   FC7,W
0082A:  BNC   0828
0082C:  MOVFF  FC9,00
00830:  RETURN 0
.................... #use TIMER(TIMER = 1, TICK = 1024us, ISR)// ZAMANLAMA AYARI
*
01386:  MOVFF  19,01
0138A:  MOVF   FCE,W
0138C:  MOVFF  FCF,03
01390:  BCF    F9D.0
01392:  MOVWF  02
01394:  MOVF   19,W
01396:  SUBWF  01,W
01398:  BZ    13A2
0139A:  MOVF   FCE,W
0139C:  MOVFF  FCF,03
013A0:  BRA    13A4
013A2:  MOVF   02,W
013A4:  MOVFF  03,00
013A8:  MOVFF  19,01
013AC:  MOVFF  1A,02
013B0:  MOVFF  1B,03
013B4:  MOVF   1C,W
013B6:  RRCF   FE8,F
013B8:  RRCF   03,F
013BA:  RRCF   02,F
013BC:  RRCF   01,F
013BE:  RRCF   00,F
013C0:  RRCF   FE8,F
013C2:  RRCF   03,F
013C4:  RRCF   02,F
013C6:  RRCF   01,F
013C8:  RRCF   00,F
013CA:  RRCF   FE8,F
013CC:  RRCF   03,F
013CE:  RRCF   02,F
013D0:  RRCF   01,F
013D2:  RRCF   00,F
013D4:  BSF    F9D.0
013D6:  GOTO   1664 (RETURN)
.................... #include <ST7789.c>       
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                              ST7789.c                             ////
.................... ////                                                                   ////
.................... ////               ST7789 display driver for CCS C compiler            ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////               This is a free software with NO WARRANTY.           ////
.................... ////                     https://simple-circuit.com/                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... /**************************************************************************
....................   This is a library for several Adafruit displays based on ST77* drivers.
.................... 
....................   Works with the Adafruit 1.8" TFT Breakout w/SD card
....................     ----> http://www.adafruit.com/products/358
....................   The 1.8" TFT shield
....................     ----> https://www.adafruit.com/product/802
....................   The 1.44" TFT breakout
....................     ----> https://www.adafruit.com/product/2088
....................   as well as Adafruit raw 1.8" TFT display
....................     ----> http://www.adafruit.com/products/618
.................... 
....................   Check out the links above for our tutorials and wiring diagrams.
....................   These displays use SPI to communicate, 4 or 5 pins are required to
....................   interface (RST is optional).
.................... 
....................   Adafruit invests time and resources providing this open source code,
....................   please support Adafruit and open-source hardware by purchasing
....................   products from Adafruit!
.................... 
....................   Written by Limor Fried/Ladyada for Adafruit Industries.
....................   MIT license, all text above must be included in any redistribution
....................  **************************************************************************/
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #ifndef bool
.................... #define bool int1
.................... #endif
.................... 
.................... #define ST_CMD_DELAY      0x80    // special signifier for command lists
.................... 
.................... #define ST77XX_NOP        0x00
.................... #define ST77XX_SWRESET    0x01
.................... #define ST77XX_RDDID      0x04
.................... #define ST77XX_RDDST      0x09
.................... 
.................... #define ST77XX_SLPIN      0x10
.................... #define ST77XX_SLPOUT     0x11
.................... #define ST77XX_PTLON      0x12
.................... #define ST77XX_NORON      0x13
.................... 
.................... #define ST77XX_INVOFF     0x20
.................... #define ST77XX_INVON      0x21
.................... #define ST77XX_DISPOFF    0x28
.................... #define ST77XX_DISPON     0x29
.................... #define ST77XX_CASET      0x2A
.................... #define ST77XX_RASET      0x2B
.................... #define ST77XX_RAMWR      0x2C
.................... #define ST77XX_RAMRD      0x2E
.................... 
.................... #define ST77XX_PTLAR      0x30
.................... #define ST77XX_COLMOD     0x3A
.................... #define ST77XX_MADCTL     0x36
.................... 
.................... #define ST77XX_MADCTL_MY  0x80
.................... #define ST77XX_MADCTL_MX  0x40
.................... #define ST77XX_MADCTL_MV  0x20
.................... #define ST77XX_MADCTL_ML  0x10
.................... #define ST77XX_MADCTL_RGB 0x00
.................... 
.................... #define ST77XX_RDID1      0xDA
.................... #define ST77XX_RDID2      0xDB
.................... #define ST77XX_RDID3      0xDC
.................... #define ST77XX_RDID4      0xDD
.................... 
.................... // Some ready-made 16-bit ('565') color settings:
.................... #define   ST7789_BLACK   0x0000
.................... #define   ST7789_BLUE    0x001F
.................... #define   ST7789_RED     0xF800
.................... #define   ST7789_GREEN   0x07E0
.................... #define   ST7789_CYAN    0x07FF
.................... #define   ST7789_MAGENTA 0xF81F
.................... #define   ST7789_YELLOW  0xFFE0
.................... #define   ST7789_WHITE   0xFFFF
.................... 
.................... #ifndef ST7789_SPI_XFER
.................... #define ST7789_SPI_XFER(x) SPI_XFER(ST7789, x)
.................... #endif
.................... 
.................... uint8_t
....................   _width,     ///< Display width as modified by current rotation
....................   _height,    ///< Display height as modified by current rotation
....................   _xstart,    ///< Internal framebuffer X offset
....................   _ystart,    ///< Internal framebuffer Y offset
....................   _colstart,  ///< Some displays need this changed to offset
....................   _rowstart,  ///< Some displays need this changed to offset
....................   rotation;   ///< Display rotation (0 thru 3)
.................... 
.................... 
.................... // SCREEN INITIALIZATION ***************************************************
.................... 
.................... // Rather than a bazillion writecommand() and writedata() calls, screen
.................... // initialization commands and arguments are organized in these tables
.................... // stored in PROGMEM.  The table may look bulky, but that's mostly the
.................... // formatting -- storage-wise this is hundreds of bytes more compact
.................... // than the equivalent code.  Companion function follows.
.................... 
.................... #define ST7789_240x240_XSTART 0
.................... #define ST7789_240x240_YSTART 80
.................... 
.................... rom uint8_t
....................   cmd_240x240[] =  {                // Init commands for 7789 screens
....................     9,                              //  9 commands in list:
....................     ST77XX_SWRESET,   ST_CMD_DELAY, //  1: Software reset, no args, w/delay
....................       150,                          //    150 ms delay
....................     ST77XX_SLPOUT ,   ST_CMD_DELAY, //  2: Out of sleep mode, no args, w/delay
....................       255,                          //     255 = 500 ms delay
....................     ST77XX_COLMOD , 1+ST_CMD_DELAY, //  3: Set color mode, 1 arg + delay:
....................       0x55,                         //     16-bit color
....................       10,                           //     10 ms delay
....................     ST77XX_MADCTL , 1,              //  4: Mem access ctrl (directions), 1 arg:
....................       0x08,                         //     Row/col addr, bottom-top refresh
....................     ST77XX_CASET  , 4,              //  5: Column addr set, 4 args, no delay:
....................       0x00,
....................       ST7789_240x240_XSTART,        //     XSTART = 0
....................       (240+ST7789_240x240_XSTART)>>8,
....................       (240+ST7789_240x240_XSTART)&0xFF,  //     XEND = 240
....................     ST77XX_RASET  , 4,              //  6: Row addr set, 4 args, no delay:
....................       0x00,
....................       ST7789_240x240_YSTART,             //     YSTART = 0
....................       (240+ST7789_240x240_YSTART)>>8,
....................       (240+ST7789_240x240_YSTART)&0xFF,  //     YEND = 240
....................     ST77XX_INVON  ,   ST_CMD_DELAY,  //  7: hack
....................       10,
....................     ST77XX_NORON  ,   ST_CMD_DELAY, //  8: Normal display on, no args, w/delay
....................       10,                           //     10 ms delay
....................     ST77XX_DISPON ,   ST_CMD_DELAY, //  9: Main screen turn on, no args, delay
....................     255 };                          //     255 = max (500 ms) delay
.................... 
.................... //*************************** User Functions ***************************//
.................... void tft_init(void);
.................... 
.................... void drawPixel(uint8_t x, uint8_t y, uint16_t color);
.................... void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint16_t color);
.................... void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint16_t color);
.................... void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color);
.................... void boya(uint16_t color);
.................... void setRotation(uint8_t m);
.................... void invertDisplay(bool i);
.................... void pushColor(uint16_t color);
.................... 
.................... //************************* Non User Functions *************************//
.................... void startWrite(void);
.................... void endWrite(void);
.................... void displayInit(rom uint8_t *addr);
.................... void writeCommand(uint8_t cmd);
.................... void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h);
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Call before issuing command(s) or data to display. Performs
....................             chip-select (if required). Required
....................             for all display types; not an SPI-specific function.
.................... */
.................... /**************************************************************************/
.................... void startWrite(void) {
....................   #ifdef TFT_CS
*
00004:  RETURN 0
....................     output_low(TFT_CS);
....................   #endif
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Call after issuing command(s) or data to display. Performs
....................             chip-deselect (if required). Required
....................             for all display types; not an SPI-specific function.
.................... */
.................... /**************************************************************************/
.................... void endWrite(void) {
....................   #ifdef TFT_CS
00006:  RETURN 0
....................     output_high(TFT_CS);
....................   #endif
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Write a single command byte to the display. Chip-select and
....................             transaction must have been previously set -- this ONLY sets
....................             the device to COMMAND mode, issues the byte and then restores
....................             DATA mode. There is no corresponding explicit writeData()
....................             function -- just use ST7789_SPI_XFER().
....................     @param  cmd  8-bit command to write.
.................... */
.................... /**************************************************************************/
.................... void writeCommand(uint8_t cmd) {
....................   output_low(TFT_DC);
*
00832:  BCF    F95.1
00834:  BCF    F8C.1
....................   ST7789_SPI_XFER(cmd);
00836:  MOVFF  1E5,1E6
0083A:  RCALL  0822
....................   output_high(TFT_DC);
0083C:  BCF    F95.1
0083E:  BSF    F8C.1
00840:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Companion code to the initiliazation tables. Reads and issues
....................             a series of LCD commands stored in ROM byte array.
....................     @param  addr  Flash memory array with commands and data to send
.................... */
.................... /**************************************************************************/
.................... void displayInit(rom uint8_t *addr){
....................   uint8_t  numCommands, numArgs;
....................   uint16_t ms;
....................   startWrite();
00842:  CALL   0004
.................... 
....................   numCommands = *addr++;   // Number of commands to follow
00846:  MOVLB  1
00848:  MOVF   x9F,W
0084A:  MOVWF  03
0084C:  MOVF   x9E,W
0084E:  INCF   x9E,F
00850:  BTFSC  FD8.2
00852:  INCF   x9F,F
00854:  MOVWF  FF6
00856:  MOVFF  03,FF7
0085A:  CLRF   FF8
0085C:  MOVLW  01
0085E:  MOVWF  FEA
00860:  MOVLW  A4
00862:  MOVWF  FE9
00864:  CLRF   xA6
00866:  MOVLW  01
00868:  MOVWF  xA5
0086A:  MOVLB  0
0086C:  RCALL  0804
0086E:  MOVFF  1A4,1A0
....................   
....................   while(numCommands--) {                 // For each command...
00872:  MOVLB  1
00874:  MOVF   xA0,W
00876:  DECF   xA0,F
00878:  XORLW  00
0087A:  BTFSC  FD8.2
0087C:  BRA    0980
.................... 
....................     writeCommand(*addr++); // Read, issue command
0087E:  MOVF   x9F,W
00880:  MOVWF  03
00882:  MOVF   x9E,W
00884:  INCF   x9E,F
00886:  BTFSC  FD8.2
00888:  INCF   x9F,F
0088A:  MOVWF  FF6
0088C:  MOVFF  03,FF7
00890:  CLRF   FF8
00892:  MOVLW  01
00894:  MOVWF  FEA
00896:  MOVLW  A4
00898:  MOVWF  FE9
0089A:  CLRF   xA6
0089C:  MOVLW  01
0089E:  MOVWF  xA5
008A0:  MOVLB  0
008A2:  RCALL  0804
008A4:  MOVFF  1A4,1E5
008A8:  RCALL  0832
....................     numArgs  = *addr++;    // Number of args to follow
008AA:  MOVLB  1
008AC:  MOVF   x9F,W
008AE:  MOVWF  03
008B0:  MOVF   x9E,W
008B2:  INCF   x9E,F
008B4:  BTFSC  FD8.2
008B6:  INCF   x9F,F
008B8:  MOVWF  FF6
008BA:  MOVFF  03,FF7
008BE:  CLRF   FF8
008C0:  MOVLW  01
008C2:  MOVWF  FEA
008C4:  MOVLW  A4
008C6:  MOVWF  FE9
008C8:  CLRF   xA6
008CA:  MOVLW  01
008CC:  MOVWF  xA5
008CE:  MOVLB  0
008D0:  RCALL  0804
008D2:  MOVFF  1A4,1A1
....................     ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
008D6:  MOVLB  1
008D8:  MOVF   xA1,W
008DA:  ANDLW  80
008DC:  MOVWF  xA2
008DE:  CLRF   xA3
....................     numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
008E0:  BCF    xA1.7
....................     while(numArgs--) {                   // For each argument...
008E2:  MOVF   xA1,W
008E4:  DECF   xA1,F
008E6:  XORLW  00
008E8:  BZ    091A
....................       ST7789_SPI_XFER(*addr++);   // Read, issue argument
008EA:  MOVF   x9F,W
008EC:  MOVWF  03
008EE:  MOVF   x9E,W
008F0:  INCF   x9E,F
008F2:  BTFSC  FD8.2
008F4:  INCF   x9F,F
008F6:  MOVWF  FF6
008F8:  MOVFF  03,FF7
008FC:  CLRF   FF8
008FE:  MOVLW  01
00900:  MOVWF  FEA
00902:  MOVLW  A4
00904:  MOVWF  FE9
00906:  CLRF   xA6
00908:  MOVLW  01
0090A:  MOVWF  xA5
0090C:  MOVLB  0
0090E:  RCALL  0804
00910:  MOVFF  1A4,1E6
00914:  RCALL  0822
00916:  MOVLB  1
00918:  BRA    08E2
....................     }
.................... 
....................     if(ms) {
0091A:  MOVF   xA2,W
0091C:  IORWF  xA3,W
0091E:  BZ    097E
....................       ms = *addr++; // Read post-command delay time (ms)
00920:  MOVF   x9F,W
00922:  MOVWF  03
00924:  MOVF   x9E,W
00926:  INCF   x9E,F
00928:  BTFSC  FD8.2
0092A:  INCF   x9F,F
0092C:  MOVWF  FF6
0092E:  MOVFF  03,FF7
00932:  CLRF   FF8
00934:  MOVLW  01
00936:  MOVWF  FEA
00938:  MOVLW  A4
0093A:  MOVWF  FE9
0093C:  CLRF   xA6
0093E:  MOVLW  01
00940:  MOVWF  xA5
00942:  MOVLB  0
00944:  RCALL  0804
00946:  MOVLB  1
00948:  CLRF   xA3
0094A:  MOVFF  1A4,1A2
....................       if(ms == 255) ms = 500;     // If 255, delay for 500 ms
0094E:  INCFSZ xA2,W
00950:  BRA    095E
00952:  MOVF   xA3,F
00954:  BNZ   095E
00956:  MOVLW  01
00958:  MOVWF  xA3
0095A:  MOVLW  F4
0095C:  MOVWF  xA2
....................       delay_ms(ms);
0095E:  MOVFF  1A3,1A4
00962:  INCF   xA4,F
00964:  DECF   xA4,F
00966:  BTFSC  FD8.2
00968:  BRA    0974
0096A:  SETF   xA5
0096C:  MOVLB  0
0096E:  RCALL  07DA
00970:  MOVLB  1
00972:  BRA    0964
00974:  MOVFF  1A2,1A5
00978:  MOVLB  0
0097A:  RCALL  07DA
0097C:  MOVLB  1
....................     }
0097E:  BRA    0874
....................   }
....................   endWrite();
00980:  MOVLB  0
00982:  CALL   0006
00986:  GOTO   0A54 (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Initialization code for ST7789 display
.................... */
.................... /**************************************************************************/
.................... void tft_init(void) {
....................   #ifdef TFT_RST
....................     output_high(TFT_RST);
*
00A1A:  BCF    F95.0
00A1C:  BSF    F8C.0
....................     output_drive(TFT_RST);
00A1E:  BCF    F95.0
....................     delay_ms(100);
00A20:  MOVLW  64
00A22:  MOVLB  1
00A24:  MOVWF  xA5
00A26:  MOVLB  0
00A28:  RCALL  07DA
....................     output_low(TFT_RST);
00A2A:  BCF    F95.0
00A2C:  BCF    F8C.0
....................     delay_ms(100);
00A2E:  MOVLW  64
00A30:  MOVLB  1
00A32:  MOVWF  xA5
00A34:  MOVLB  0
00A36:  RCALL  07DA
....................     output_high(TFT_RST);
00A38:  BCF    F95.0
00A3A:  BSF    F8C.0
....................     delay_ms(200);
00A3C:  MOVLW  C8
00A3E:  MOVLB  1
00A40:  MOVWF  xA5
00A42:  MOVLB  0
00A44:  RCALL  07DA
....................   #endif
.................... 
....................   #ifdef TFT_CS
....................     output_high(TFT_CS);
....................     output_drive(TFT_CS);
....................   #endif
.................... 
....................   output_drive(TFT_DC);
00A46:  BCF    F95.1
.................... 
....................   displayInit(cmd_240x240);
00A48:  MOVLB  1
00A4A:  SETF   x9F
00A4C:  MOVLW  DC
00A4E:  MOVWF  x9E
00A50:  MOVLB  0
00A52:  BRA    0842
.................... 
....................   _colstart = ST7789_240x240_XSTART;
00A54:  CLRF   21
....................   _rowstart = ST7789_240x240_YSTART;
00A56:  MOVLW  50
00A58:  MOVWF  22
....................   _height   = 240;
00A5A:  MOVLW  F0
00A5C:  MOVWF  1E
....................   _width    = 240;
00A5E:  MOVWF  1D
....................   setRotation(2);
00A60:  MOVLW  02
00A62:  MOVLB  1
00A64:  MOVWF  x9E
00A66:  MOVLB  0
00A68:  BRA    098A
00A6A:  GOTO   35DA (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................   @brief  SPI displays set an address window rectangle for blitting pixels
....................   @param  x  Top left corner x coordinate
....................   @param  y  Top left corner x coordinate
....................   @param  w  Width of window
....................   @param  h  Height of window
.................... */
.................... /**************************************************************************/
.................... void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
....................   x += _xstart;
*
00AC0:  MOVF   1F,W
00AC2:  MOVLB  1
00AC4:  ADDWF  xE1,F
....................   y += _ystart;
00AC6:  MOVF   20,W
00AC8:  ADDWF  xE2,F
.................... 
....................   writeCommand(ST77XX_CASET); // Column addr set
00ACA:  MOVLW  2A
00ACC:  MOVWF  xE5
00ACE:  MOVLB  0
00AD0:  RCALL  0832
....................   ST7789_SPI_XFER(0);
00AD2:  MOVLB  1
00AD4:  CLRF   xE6
00AD6:  MOVLB  0
00AD8:  RCALL  0822
....................   ST7789_SPI_XFER(x);
00ADA:  MOVFF  1E1,1E6
00ADE:  RCALL  0822
....................   ST7789_SPI_XFER(0);
00AE0:  MOVLB  1
00AE2:  CLRF   xE6
00AE4:  MOVLB  0
00AE6:  RCALL  0822
....................   ST7789_SPI_XFER(x+w-1);
00AE8:  MOVLB  1
00AEA:  MOVF   xE3,W
00AEC:  ADDWF  xE1,W
00AEE:  ADDLW  FF
00AF0:  MOVWF  xE5
00AF2:  MOVWF  xE6
00AF4:  MOVLB  0
00AF6:  RCALL  0822
.................... 
....................   writeCommand(ST77XX_RASET); // Row addr set
00AF8:  MOVLW  2B
00AFA:  MOVLB  1
00AFC:  MOVWF  xE5
00AFE:  MOVLB  0
00B00:  RCALL  0832
....................   ST7789_SPI_XFER(0);
00B02:  MOVLB  1
00B04:  CLRF   xE6
00B06:  MOVLB  0
00B08:  RCALL  0822
....................   ST7789_SPI_XFER(y);
00B0A:  MOVFF  1E2,1E6
00B0E:  RCALL  0822
....................   ST7789_SPI_XFER(0);
00B10:  MOVLB  1
00B12:  CLRF   xE6
00B14:  MOVLB  0
00B16:  RCALL  0822
....................   ST7789_SPI_XFER(y+h-1);
00B18:  MOVLB  1
00B1A:  MOVF   xE4,W
00B1C:  ADDWF  xE2,W
00B1E:  ADDLW  FF
00B20:  MOVWF  xE5
00B22:  MOVWF  xE6
00B24:  MOVLB  0
00B26:  RCALL  0822
.................... 
....................   writeCommand(ST77XX_RAMWR); // write to RAM
00B28:  MOVLW  2C
00B2A:  MOVLB  1
00B2C:  MOVWF  xE5
00B2E:  MOVLB  0
00B30:  RCALL  0832
00B32:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Set origin of (0,0) and orientation of TFT display
....................     @param  m  The index for rotation, from 0-3 inclusive
.................... */
.................... /**************************************************************************/
.................... void setRotation(uint8_t m) {
*
0098A:  MOVLB  1
0098C:  CLRF   x9F
....................   uint8_t madctl = 0;
.................... 
....................   rotation = m & 3; // can't be higher than 3
0098E:  MOVF   x9E,W
00990:  ANDLW  03
00992:  MOVWF  23
.................... 
....................   switch (rotation) {
00994:  MOVF   23,W
00996:  ADDLW  FC
00998:  BC    09DA
0099A:  ADDLW  04
0099C:  MOVLB  0
0099E:  GOTO   09F8
....................    case 0:
....................      madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
009A2:  MOVLW  C0
009A4:  MOVLB  1
009A6:  MOVWF  x9F
....................      _xstart = _colstart;
009A8:  MOVFF  21,1F
....................      _ystart = _rowstart;
009AC:  MOVFF  22,20
....................      break;
009B0:  BRA    09DA
....................    case 1:
....................      madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
009B2:  MOVLW  A0
009B4:  MOVLB  1
009B6:  MOVWF  x9F
....................      _xstart = _rowstart;
009B8:  MOVFF  22,1F
....................      _ystart = _colstart;
009BC:  MOVFF  21,20
....................      break;
009C0:  BRA    09DA
....................   case 2:
....................      madctl  = ST77XX_MADCTL_RGB;
009C2:  MOVLB  1
009C4:  CLRF   x9F
....................      _xstart = 0;
009C6:  CLRF   1F
....................      _ystart = 0;
009C8:  CLRF   20
....................      break;
009CA:  BRA    09DA
....................    case 3:
....................      madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
009CC:  MOVLW  60
009CE:  MOVLB  1
009D0:  MOVWF  x9F
....................      _xstart = 0;
009D2:  CLRF   1F
....................      _ystart = 0;
009D4:  CLRF   20
....................      break;
009D6:  BRA    09DA
009D8:  MOVLB  1
....................   }
....................   startWrite();
009DA:  MOVLB  0
009DC:  CALL   0004
....................   writeCommand(ST77XX_MADCTL);
009E0:  MOVLW  36
009E2:  MOVLB  1
009E4:  MOVWF  xE5
009E6:  MOVLB  0
009E8:  RCALL  0832
....................   ST7789_SPI_XFER(madctl);
009EA:  MOVFF  19F,1E6
009EE:  RCALL  0822
....................   endWrite();
009F0:  CALL   0006
009F4:  GOTO   0A6A (RETURN)
.................... }
.................... 
.................... void drawPixel(uint8_t x, uint8_t y, uint16_t color) {
....................   if((x < _width) && (y < _height)) {
*
00B34:  MOVF   1D,W
00B36:  MOVLB  1
00B38:  SUBWF  xDC,W
00B3A:  BC    0B7A
00B3C:  MOVF   1E,W
00B3E:  SUBWF  xDD,W
00B40:  BC    0B7A
....................     startWrite();
00B42:  MOVLB  0
00B44:  CALL   0004
....................     setAddrWindow(x, y, 1, 1);
00B48:  MOVFF  1DC,1E1
00B4C:  MOVFF  1DD,1E2
00B50:  MOVLW  01
00B52:  MOVLB  1
00B54:  MOVWF  xE3
00B56:  MOVWF  xE4
00B58:  MOVLB  0
00B5A:  RCALL  0AC0
....................     ST7789_SPI_XFER(color >> 8);
00B5C:  MOVLB  1
00B5E:  CLRF   xE2
00B60:  MOVFF  1DF,1E6
00B64:  MOVLB  0
00B66:  RCALL  0822
....................     ST7789_SPI_XFER(color & 0xFF);
00B68:  MOVLB  1
00B6A:  CLRF   xE1
00B6C:  MOVFF  1DE,1E6
00B70:  MOVLB  0
00B72:  RCALL  0822
....................     endWrite();
00B74:  CALL   0006
00B78:  MOVLB  1
....................   }
00B7A:  MOVLB  0
00B7C:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Draw a perfectly horizontal line (this is often optimized in a subclass!)
....................     @param    x   Left-most x coordinate
....................     @param    y   Left-most y coordinate
....................     @param    w   Width in pixels
....................    @param    color 16-bit 5-6-5 Color to fill with
.................... */
.................... /**************************************************************************/
.................... void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint16_t color) {
....................   if( (x < _width) && (y < _height) && w) {   
*
016BA:  MOVF   1D,W
016BC:  MOVLB  1
016BE:  SUBWF  xDA,W
016C0:  BC    173A
016C2:  MOVF   1E,W
016C4:  SUBWF  xDB,W
016C6:  BC    173A
016C8:  MOVF   xDC,F
016CA:  BZ    173A
....................     uint8_t hi = color >> 8, lo = color;
016CC:  MOVFF  1DE,1DF
016D0:  MOVFF  1DD,1E0
.................... 
....................     if((x >= _width) || (y >= _height))
016D4:  MOVF   1D,W
016D6:  SUBWF  xDA,W
016D8:  BC    16E0
016DA:  MOVF   1E,W
016DC:  SUBWF  xDB,W
016DE:  BNC   16E2
....................       return;
016E0:  BRA    173A
....................     if((x + w - 1) >= _width)  
016E2:  MOVF   xDC,W
016E4:  ADDWF  xDA,W
016E6:  ADDLW  FF
016E8:  SUBWF  1D,W
016EA:  BZ    16EE
016EC:  BC    16F4
....................       w = _width  - x;
016EE:  MOVF   xDA,W
016F0:  SUBWF  1D,W
016F2:  MOVWF  xDC
....................     startWrite();
016F4:  MOVLB  0
016F6:  CALL   0004
....................     setAddrWindow(x, y, w, 1);
016FA:  MOVFF  1DA,1E1
016FE:  MOVFF  1DB,1E2
01702:  MOVFF  1DC,1E3
01706:  MOVLW  01
01708:  MOVLB  1
0170A:  MOVWF  xE4
0170C:  MOVLB  0
0170E:  CALL   0AC0
....................     while (w--) {
01712:  MOVLB  1
01714:  MOVF   xDC,W
01716:  DECF   xDC,F
01718:  XORLW  00
0171A:  BZ    1732
....................       ST7789_SPI_XFER(hi);
0171C:  MOVFF  1DF,1E6
01720:  MOVLB  0
01722:  CALL   0822
....................       ST7789_SPI_XFER(lo);
01726:  MOVFF  1E0,1E6
0172A:  CALL   0822
0172E:  BRA    1712
01730:  MOVLB  1
....................     }
....................     endWrite();
01732:  MOVLB  0
01734:  CALL   0006
01738:  MOVLB  1
....................   }
0173A:  MOVLB  0
0173C:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Draw a perfectly vertical line (this is often optimized in a subclass!)
....................     @param    x   Top-most x coordinate
....................     @param    y   Top-most y coordinate
....................     @param    h   Height in pixels
....................    @param    color 16-bit 5-6-5 Color to fill with
.................... */
.................... /**************************************************************************/
.................... void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint16_t color) {
....................   if( (x < _width) && (y < _height) && h) {  
*
00C24:  MOVF   1D,W
00C26:  MOVLB  1
00C28:  SUBWF  xD1,W
00C2A:  BC    0C90
00C2C:  MOVF   1E,W
00C2E:  SUBWF  xD2,W
00C30:  BC    0C90
00C32:  MOVF   xD3,F
00C34:  BZ    0C90
....................     uint8_t hi = color >> 8, lo = color;
00C36:  MOVFF  1D5,1D6
00C3A:  MOVFF  1D4,1D7
....................     if((y + h - 1) >= _height) 
00C3E:  MOVF   xD3,W
00C40:  ADDWF  xD2,W
00C42:  ADDLW  FF
00C44:  SUBWF  1E,W
00C46:  BZ    0C4A
00C48:  BC    0C50
....................       h = _height - y;
00C4A:  MOVF   xD2,W
00C4C:  SUBWF  1E,W
00C4E:  MOVWF  xD3
....................     startWrite();
00C50:  MOVLB  0
00C52:  CALL   0004
....................     setAddrWindow(x, y, 1, h);
00C56:  MOVFF  1D1,1E1
00C5A:  MOVFF  1D2,1E2
00C5E:  MOVLW  01
00C60:  MOVLB  1
00C62:  MOVWF  xE3
00C64:  MOVFF  1D3,1E4
00C68:  MOVLB  0
00C6A:  RCALL  0AC0
....................     while (h--) {
00C6C:  MOVLB  1
00C6E:  MOVF   xD3,W
00C70:  DECF   xD3,F
00C72:  XORLW  00
00C74:  BZ    0C88
....................       ST7789_SPI_XFER(hi);
00C76:  MOVFF  1D6,1E6
00C7A:  MOVLB  0
00C7C:  RCALL  0822
....................       ST7789_SPI_XFER(lo);
00C7E:  MOVFF  1D7,1E6
00C82:  RCALL  0822
00C84:  BRA    0C6C
00C86:  MOVLB  1
....................     }
....................     endWrite();
00C88:  MOVLB  0
00C8A:  CALL   0006
00C8E:  MOVLB  1
....................   }
00C90:  MOVLB  0
00C92:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Fill a rectangle completely with one color. Update in subclasses if desired!
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    w   Width in pixels
....................     @param    h   Height in pixels
....................    @param    color 16-bit 5-6-5 Color to fill with
.................... */
.................... /**************************************************************************/
.................... void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
....................   if(w && h) {                            // Nonzero width and height?  
*
00B7E:  MOVLB  1
00B80:  MOVF   xBC,F
00B82:  BZ    0C20
00B84:  MOVF   xBD,F
00B86:  BZ    0C20
....................     uint8_t hi = color >> 8, lo = color;
00B88:  MOVFF  1BF,1C0
00B8C:  MOVFF  1BE,1C1
....................     if((x >= _width) || (y >= _height))
00B90:  MOVF   1D,W
00B92:  SUBWF  xBA,W
00B94:  BC    0B9C
00B96:  MOVF   1E,W
00B98:  SUBWF  xBB,W
00B9A:  BNC   0B9E
....................       return;
00B9C:  BRA    0C20
....................     if((x + w - 1) >= _width)  
00B9E:  MOVF   xBC,W
00BA0:  ADDWF  xBA,W
00BA2:  ADDLW  FF
00BA4:  SUBWF  1D,W
00BA6:  BZ    0BAA
00BA8:  BC    0BB0
....................       w = _width  - x;
00BAA:  MOVF   xBA,W
00BAC:  SUBWF  1D,W
00BAE:  MOVWF  xBC
....................     if((y + h - 1) >= _height) 
00BB0:  MOVF   xBD,W
00BB2:  ADDWF  xBB,W
00BB4:  ADDLW  FF
00BB6:  SUBWF  1E,W
00BB8:  BZ    0BBC
00BBA:  BC    0BC2
....................       h = _height - y;
00BBC:  MOVF   xBB,W
00BBE:  SUBWF  1E,W
00BC0:  MOVWF  xBD
....................     startWrite();
00BC2:  MOVLB  0
00BC4:  CALL   0004
....................     setAddrWindow(x, y, w, h);
00BC8:  MOVFF  1BA,1E1
00BCC:  MOVFF  1BB,1E2
00BD0:  MOVFF  1BC,1E3
00BD4:  MOVFF  1BD,1E4
00BD8:  RCALL  0AC0
....................     uint16_t px = (uint16_t)w * h;
00BDA:  MOVLB  1
00BDC:  CLRF   xCC
00BDE:  MOVFF  1BC,1CB
00BE2:  CLRF   xCE
00BE4:  MOVFF  1BD,1CD
00BE8:  MOVLB  0
00BEA:  RCALL  0A9E
00BEC:  MOVFF  02,1C3
00BF0:  MOVFF  01,1C2
....................     while (px--) {
00BF4:  MOVLB  1
00BF6:  MOVFF  1C3,03
00BFA:  MOVF   xC2,W
00BFC:  BTFSC  FD8.2
00BFE:  DECF   xC3,F
00C00:  DECF   xC2,F
00C02:  IORWF  03,W
00C04:  BZ    0C18
....................       ST7789_SPI_XFER(hi);
00C06:  MOVFF  1C0,1E6
00C0A:  MOVLB  0
00C0C:  RCALL  0822
....................       ST7789_SPI_XFER(lo);
00C0E:  MOVFF  1C1,1E6
00C12:  RCALL  0822
00C14:  BRA    0BF4
00C16:  MOVLB  1
....................     }
....................     endWrite();
00C18:  MOVLB  0
00C1A:  CALL   0006
00C1E:  MOVLB  1
....................   }
00C20:  MOVLB  0
00C22:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Fill the screen completely with one color. Update in subclasses if desired!
....................     @param    color 16-bit 5-6-5 Color to fill with
.................... */
.................... /**************************************************************************/
.................... void fillScreen(uint16_t color) {
....................     fillRect(0, 0, _width, _height, color);
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Invert the colors of the display (if supported by hardware).
....................             Self-contained, no transaction setup required.
....................     @param  i  true = inverted display, false = normal display.
.................... */
.................... /**************************************************************************/
.................... void invertDisplay(bool i) {
....................     startWrite();
*
0354C:  CALL   0004
....................     writeCommand(i ? ST77XX_INVON : ST77XX_INVOFF);
03550:  MOVLB  1
03552:  MOVF   x9E,F
03554:  BZ    355A
03556:  MOVLW  21
03558:  BRA    355C
0355A:  MOVLW  20
0355C:  MOVWF  x9F
0355E:  MOVWF  xE5
03560:  MOVLB  0
03562:  CALL   0832
....................     endWrite();
03566:  CALL   0006
0356A:  RETURN 0
.................... }
.................... 
.................... /*!
....................     @brief  Essentially writePixel() with a transaction around it. I don't
....................             think this is in use by any of our code anymore (believe it was
....................             for some older BMP-reading examples), but is kept here in case
....................             any user code relies on it. Consider it DEPRECATED.
....................     @param  color  16-bit pixel color in '565' RGB format.
.................... */
.................... void pushColor(uint16_t color) {
....................     uint8_t hi = color >> 8, lo = color;
....................     startWrite();
....................     ST7789_SPI_XFER(hi);
....................     ST7789_SPI_XFER(lo);
....................     endWrite();
.................... }
.................... 
.................... // end of code.
.................... 
.................... #include <GFX_Library.c>  
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                            GFX_Library.c                          ////
.................... ////                                                                   ////
.................... ////                 Graphics library for CCS C compiler.              ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////               This is a free software with NO WARRANTY.           ////
.................... ////                     https://simple-circuit.com/                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... /*
.................... This is the core graphics library for all our displays, providing a common
.................... set of graphics primitives (points, lines, circles, etc.).  It needs to be
.................... paired with a hardware-specific library for each display device we carry
.................... (to handle the lower-level functions).
.................... 
.................... Adafruit invests time and resources providing this open source code, please
.................... support Adafruit & open-source hardware by purchasing products from Adafruit!
.................... 
.................... Copyright (c) 2013 Adafruit Industries.  All rights reserved.
.................... 
.................... Redistribution and use in source and binary forms, with or without
.................... modification, are permitted provided that the following conditions are met:
.................... 
.................... - Redistributions of source code must retain the above copyright notice,
....................   this list of conditions and the following disclaimer.
.................... - Redistributions in binary form must reproduce the above copyright notice,
....................   this list of conditions and the following disclaimer in the documentation
....................   and/or other materials provided with the distribution.
.................... 
.................... THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.................... AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.................... IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.................... ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
.................... LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.................... CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.................... SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.................... INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.................... CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.................... ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.................... POSSIBILITY OF SUCH DAMAGE.
....................  */
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #ifndef bool
.................... #define bool int1
.................... #endif
.................... 
.................... //*************************** User Functions ***************************//
.................... void display_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
.................... void display_drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color);
.................... void display_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
.................... void display_drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color);
.................... void display_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
.................... void display_fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color);
.................... void display_drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
.................... void display_fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
.................... void display_drawRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);
.................... void display_fillRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);
.................... 
.................... void kursor_ayarla(uint16_t x, uint16_t y);
.................... void display_setTextColor(uint16_t c);
.................... void display_setTextColor(uint16_t c, uint16_t bg);
.................... void display_setTextSize(uint8_t s);
.................... void display_setTextWrap(bool w);
.................... void display_print(uint8_t c);
.................... void display_customChar(rom uint8_t *c);
.................... void display_drawChar(uint16_t x, uint16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t size);
.................... 
.................... uint8_t  display_getRotation();
.................... uint16_t getCursorX(void);
.................... uint16_t getCursorY(void);
.................... uint16_t display_getWidth();
.................... uint16_t display_getHeight();
.................... uint16_t display_color565(uint8_t red, uint8_t green, uint8_t blue);
.................... 
.................... void display_drawBitmapV1   (uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color);
.................... void display_drawBitmapV1_bg(uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color, uint16_t bg);
.................... void display_drawBitmapV2   (uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color);
.................... void display_drawBitmapV2_bg(uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color, uint16_t bg);
.................... 
.................... //************************* Non User Functions *************************//
.................... void writeLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
.................... //////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef min
.................... #define min(a,b) (((a) < (b)) ? (a) : (b))
.................... #endif
.................... #ifndef _swap_int16_t
.................... #define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
.................... #endif
.................... 
.................... #define display_width   _width
.................... #define display_height  _height
.................... 
.................... #define display_drawPixel   drawPixel
.................... #define display_drawVLine   drawVLine
.................... #define display_drawHLine   drawHLine
.................... #define EKRAN_BOYA
.................... #define display_fillRect    fillRect
.................... #define display_setRotation setRotation
.................... #define display_invert      invertDisplay
.................... 
.................... 
.................... int16_t
....................   cursor_x = 0,          ///< x location to start print()ing text
....................   cursor_y = 0;          ///< y location to start print()ing text
.................... uint16_t
....................   textcolor = 0xFFFF,    ///< 16-bit background color for print()
....................   textbgcolor = 0xFFFF;  ///< 16-bit text color for print()
.................... uint8_t
....................   textsize = 1;          ///< Desired magnification of text to print()
.................... bool
....................   wrap = TRUE;           ///< If set, 'wrap' text at right edge of display
.................... 
.................... // Standard ASCII 5x7 font
.................... #ifndef FONT5X7_H
.................... static const uint8_t font[256][5] = {
....................    0x00, 0x00, 0x00, 0x00, 0x00,
....................    0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
....................    0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
....................    0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
....................    0x18, 0x3C, 0x7E, 0x3C, 0x18,
....................    0x1C, 0x57, 0x7D, 0x57, 0x1C,
....................    0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
....................    0x00, 0x18, 0x3C, 0x18, 0x00,
....................    0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
....................    0x00, 0x18, 0x24, 0x18, 0x00,
....................    0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
....................    0x30, 0x48, 0x3A, 0x06, 0x0E,
....................    0x26, 0x29, 0x79, 0x29, 0x26,
....................    0x40, 0x7F, 0x05, 0x05, 0x07,
....................    0x40, 0x7F, 0x05, 0x25, 0x3F,
....................    0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
....................    0x7F, 0x3E, 0x1C, 0x1C, 0x08,
....................    0x08, 0x1C, 0x1C, 0x3E, 0x7F,
....................    0x14, 0x22, 0x7F, 0x22, 0x14,
....................    0x5F, 0x5F, 0x00, 0x5F, 0x5F,
....................    0x06, 0x09, 0x7F, 0x01, 0x7F,
....................    0x00, 0x66, 0x89, 0x95, 0x6A,
....................    0x60, 0x60, 0x60, 0x60, 0x60,
....................    0x94, 0xA2, 0xFF, 0xA2, 0x94,
....................    0x08, 0x04, 0x7E, 0x04, 0x08,
....................    0x10, 0x20, 0x7E, 0x20, 0x10,
....................    0x08, 0x08, 0x2A, 0x1C, 0x08,
....................    0x08, 0x1C, 0x2A, 0x08, 0x08,
....................    0x1E, 0x10, 0x10, 0x10, 0x10,
....................    0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
....................    0x30, 0x38, 0x3E, 0x38, 0x30,
....................    0x06, 0x0E, 0x3E, 0x0E, 0x06,
....................    0x00, 0x00, 0x00, 0x00, 0x00,
....................    0x00, 0x00, 0x5F, 0x00, 0x00,
....................    0x00, 0x07, 0x00, 0x07, 0x00,
....................    0x14, 0x7F, 0x14, 0x7F, 0x14,
....................    0x24, 0x2A, 0x7F, 0x2A, 0x12,
....................    0x23, 0x13, 0x08, 0x64, 0x62,
....................    0x36, 0x49, 0x56, 0x20, 0x50,
....................    0x00, 0x08, 0x07, 0x03, 0x00,
....................    0x00, 0x1C, 0x22, 0x41, 0x00,
....................    0x00, 0x41, 0x22, 0x1C, 0x00,
....................    0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
....................    0x08, 0x08, 0x3E, 0x08, 0x08,
....................    0x00, 0x80, 0x70, 0x30, 0x00,
....................    0x08, 0x08, 0x08, 0x08, 0x08,
....................    0x00, 0x00, 0x60, 0x60, 0x00,
....................    0x20, 0x10, 0x08, 0x04, 0x02,
....................    0x3E, 0x51, 0x49, 0x45, 0x3E,
....................    0x00, 0x42, 0x7F, 0x40, 0x00,
....................    0x72, 0x49, 0x49, 0x49, 0x46,
....................    0x21, 0x41, 0x49, 0x4D, 0x33,
....................    0x18, 0x14, 0x12, 0x7F, 0x10,
....................    0x27, 0x45, 0x45, 0x45, 0x39,
....................    0x3C, 0x4A, 0x49, 0x49, 0x31,
....................    0x41, 0x21, 0x11, 0x09, 0x07,
....................    0x36, 0x49, 0x49, 0x49, 0x36,
....................    0x46, 0x49, 0x49, 0x29, 0x1E,
....................    0x00, 0x00, 0x14, 0x00, 0x00,
....................    0x00, 0x40, 0x34, 0x00, 0x00,
....................    0x00, 0x08, 0x14, 0x22, 0x41,
....................    0x14, 0x14, 0x14, 0x14, 0x14,
....................    0x00, 0x41, 0x22, 0x14, 0x08,
....................    0x02, 0x01, 0x59, 0x09, 0x06,
....................    0x3E, 0x41, 0x5D, 0x59, 0x4E,
....................    0x7C, 0x12, 0x11, 0x12, 0x7C,
....................    0x7F, 0x49, 0x49, 0x49, 0x36,
....................    0x3E, 0x41, 0x41, 0x41, 0x22,
....................    0x7F, 0x41, 0x41, 0x41, 0x3E,
....................    0x7F, 0x49, 0x49, 0x49, 0x41,
....................    0x7F, 0x09, 0x09, 0x09, 0x01,
....................    0x3E, 0x41, 0x41, 0x51, 0x73,
....................    0x7F, 0x08, 0x08, 0x08, 0x7F,
....................    0x00, 0x41, 0x7F, 0x41, 0x00,
....................    0x20, 0x40, 0x41, 0x3F, 0x01,
....................    0x7F, 0x08, 0x14, 0x22, 0x41,
....................    0x7F, 0x40, 0x40, 0x40, 0x40,
....................    0x7F, 0x02, 0x1C, 0x02, 0x7F,
....................    0x7F, 0x04, 0x08, 0x10, 0x7F,
....................    0x3E, 0x41, 0x41, 0x41, 0x3E,
....................    0x7F, 0x09, 0x09, 0x09, 0x06,
....................    0x3E, 0x41, 0x51, 0x21, 0x5E,
....................    0x7F, 0x09, 0x19, 0x29, 0x46,
....................    0x26, 0x49, 0x49, 0x49, 0x32,
....................    0x03, 0x01, 0x7F, 0x01, 0x03,
....................    0x3F, 0x40, 0x40, 0x40, 0x3F,
....................    0x1F, 0x20, 0x40, 0x20, 0x1F,
....................    0x3F, 0x40, 0x38, 0x40, 0x3F,
....................    0x63, 0x14, 0x08, 0x14, 0x63,
....................    0x03, 0x04, 0x78, 0x04, 0x03,
....................    0x61, 0x59, 0x49, 0x4D, 0x43,
....................    0x00, 0x7F, 0x41, 0x41, 0x41,
....................    0x02, 0x04, 0x08, 0x10, 0x20,
....................    0x00, 0x41, 0x41, 0x41, 0x7F,
....................    0x04, 0x02, 0x01, 0x02, 0x04,
....................    0x40, 0x40, 0x40, 0x40, 0x40,
....................    0x00, 0x03, 0x07, 0x08, 0x00,
....................    0x20, 0x54, 0x54, 0x78, 0x40,
....................    0x7F, 0x28, 0x44, 0x44, 0x38,
....................    0x38, 0x44, 0x44, 0x44, 0x28,
....................    0x38, 0x44, 0x44, 0x28, 0x7F,
....................    0x38, 0x54, 0x54, 0x54, 0x18,
....................    0x00, 0x08, 0x7E, 0x09, 0x02,
....................    0x18, 0xA4, 0xA4, 0x9C, 0x78,
....................    0x7F, 0x08, 0x04, 0x04, 0x78,
....................    0x00, 0x44, 0x7D, 0x40, 0x00,
....................    0x20, 0x40, 0x40, 0x3D, 0x00,
....................    0x7F, 0x10, 0x28, 0x44, 0x00,
....................    0x00, 0x41, 0x7F, 0x40, 0x00,
....................    0x7C, 0x04, 0x78, 0x04, 0x78,
....................    0x7C, 0x08, 0x04, 0x04, 0x78,
....................    0x38, 0x44, 0x44, 0x44, 0x38,
....................    0xFC, 0x18, 0x24, 0x24, 0x18,
....................    0x18, 0x24, 0x24, 0x18, 0xFC,
....................    0x7C, 0x08, 0x04, 0x04, 0x08,
....................    0x48, 0x54, 0x54, 0x54, 0x24,
....................    0x04, 0x04, 0x3F, 0x44, 0x24,
....................    0x3C, 0x40, 0x40, 0x20, 0x7C,
....................    0x1C, 0x20, 0x40, 0x20, 0x1C,
....................    0x3C, 0x40, 0x30, 0x40, 0x3C,
....................    0x44, 0x28, 0x10, 0x28, 0x44,
....................    0x4C, 0x90, 0x90, 0x90, 0x7C,
....................    0x44, 0x64, 0x54, 0x4C, 0x44,
....................    0x00, 0x08, 0x36, 0x41, 0x00,
....................    0x00, 0x00, 0x77, 0x00, 0x00,
....................    0x00, 0x41, 0x36, 0x08, 0x00,
....................    0x02, 0x01, 0x02, 0x04, 0x02,
....................    0x3C, 0x26, 0x23, 0x26, 0x3C,
....................    0x1E, 0xA1, 0xA1, 0x61, 0x12,
....................    0x3A, 0x40, 0x40, 0x20, 0x7A,
....................    0x38, 0x54, 0x54, 0x55, 0x59,
....................    0x21, 0x55, 0x55, 0x79, 0x41,
....................    0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
....................    0x21, 0x55, 0x54, 0x78, 0x40,
....................    0x20, 0x54, 0x55, 0x79, 0x40,
....................    0x0C, 0x1E, 0x52, 0x72, 0x12,
....................    0x39, 0x55, 0x55, 0x55, 0x59,
....................    0x39, 0x54, 0x54, 0x54, 0x59,
....................    0x39, 0x55, 0x54, 0x54, 0x58,
....................    0x00, 0x00, 0x45, 0x7C, 0x41,
....................    0x00, 0x02, 0x45, 0x7D, 0x42,
....................    0x00, 0x01, 0x45, 0x7C, 0x40,
....................    0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
....................    0xF0, 0x28, 0x25, 0x28, 0xF0,
....................    0x7C, 0x54, 0x55, 0x45, 0x00,
....................    0x20, 0x54, 0x54, 0x7C, 0x54,
....................    0x7C, 0x0A, 0x09, 0x7F, 0x49,
....................    0x32, 0x49, 0x49, 0x49, 0x32,
....................    0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
....................    0x32, 0x4A, 0x48, 0x48, 0x30,
....................    0x3A, 0x41, 0x41, 0x21, 0x7A,
....................    0x3A, 0x42, 0x40, 0x20, 0x78,
....................    0x00, 0x9D, 0xA0, 0xA0, 0x7D,
....................    0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
....................    0x3D, 0x40, 0x40, 0x40, 0x3D,
....................    0x3C, 0x24, 0xFF, 0x24, 0x24,
....................    0x48, 0x7E, 0x49, 0x43, 0x66,
....................    0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
....................    0xFF, 0x09, 0x29, 0xF6, 0x20,
....................    0xC0, 0x88, 0x7E, 0x09, 0x03,
....................    0x20, 0x54, 0x54, 0x79, 0x41,
....................    0x00, 0x00, 0x44, 0x7D, 0x41,
....................    0x30, 0x48, 0x48, 0x4A, 0x32,
....................    0x38, 0x40, 0x40, 0x22, 0x7A,
....................    0x00, 0x7A, 0x0A, 0x0A, 0x72,
....................    0x7D, 0x0D, 0x19, 0x31, 0x7D,
....................    0x26, 0x29, 0x29, 0x2F, 0x28,
....................    0x26, 0x29, 0x29, 0x29, 0x26,
....................    0x30, 0x48, 0x4D, 0x40, 0x20,
....................    0x38, 0x08, 0x08, 0x08, 0x08,
....................    0x08, 0x08, 0x08, 0x08, 0x38,
....................    0x2F, 0x10, 0xC8, 0xAC, 0xBA,
....................    0x2F, 0x10, 0x28, 0x34, 0xFA,
....................    0x00, 0x00, 0x7B, 0x00, 0x00,
....................    0x08, 0x14, 0x2A, 0x14, 0x22,
....................    0x22, 0x14, 0x2A, 0x14, 0x08,
....................    0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old code
....................    0xAA, 0x55, 0xAA, 0x55, 0xAA, // 50% block
....................    0xFF, 0x55, 0xFF, 0x55, 0xFF, // 75% block
....................    0x00, 0x00, 0x00, 0xFF, 0x00,
....................    0x10, 0x10, 0x10, 0xFF, 0x00,
....................    0x14, 0x14, 0x14, 0xFF, 0x00,
....................    0x10, 0x10, 0xFF, 0x00, 0xFF,
....................    0x10, 0x10, 0xF0, 0x10, 0xF0,
....................    0x14, 0x14, 0x14, 0xFC, 0x00,
....................    0x14, 0x14, 0xF7, 0x00, 0xFF,
....................    0x00, 0x00, 0xFF, 0x00, 0xFF,
....................    0x14, 0x14, 0xF4, 0x04, 0xFC,
....................    0x14, 0x14, 0x17, 0x10, 0x1F,
....................    0x10, 0x10, 0x1F, 0x10, 0x1F,
....................    0x14, 0x14, 0x14, 0x1F, 0x00,
....................    0x10, 0x10, 0x10, 0xF0, 0x00,
....................    0x00, 0x00, 0x00, 0x1F, 0x10,
....................    0x10, 0x10, 0x10, 0x1F, 0x10,
....................    0x10, 0x10, 0x10, 0xF0, 0x10,
....................    0x00, 0x00, 0x00, 0xFF, 0x10,
....................    0x10, 0x10, 0x10, 0x10, 0x10,
....................    0x10, 0x10, 0x10, 0xFF, 0x10,
....................    0x00, 0x00, 0x00, 0xFF, 0x14,
....................    0x00, 0x00, 0xFF, 0x00, 0xFF,
....................    0x00, 0x00, 0x1F, 0x10, 0x17,
....................    0x00, 0x00, 0xFC, 0x04, 0xF4,
....................    0x14, 0x14, 0x17, 0x10, 0x17,
....................    0x14, 0x14, 0xF4, 0x04, 0xF4,
....................    0x00, 0x00, 0xFF, 0x00, 0xF7,
....................    0x14, 0x14, 0x14, 0x14, 0x14,
....................    0x14, 0x14, 0xF7, 0x00, 0xF7,
....................    0x14, 0x14, 0x14, 0x17, 0x14,
....................    0x10, 0x10, 0x1F, 0x10, 0x1F,
....................    0x14, 0x14, 0x14, 0xF4, 0x14,
....................    0x10, 0x10, 0xF0, 0x10, 0xF0,
....................    0x00, 0x00, 0x1F, 0x10, 0x1F,
....................    0x00, 0x00, 0x00, 0x1F, 0x14,
....................    0x00, 0x00, 0x00, 0xFC, 0x14,
....................    0x00, 0x00, 0xF0, 0x10, 0xF0,
....................    0x10, 0x10, 0xFF, 0x10, 0xFF,
....................    0x14, 0x14, 0x14, 0xFF, 0x14,
....................    0x10, 0x10, 0x10, 0x1F, 0x00,
....................    0x00, 0x00, 0x00, 0xF0, 0x10,
....................    0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
....................    0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
....................    0xFF, 0xFF, 0xFF, 0x00, 0x00,
....................    0x00, 0x00, 0x00, 0xFF, 0xFF,
....................    0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
....................    0x38, 0x44, 0x44, 0x38, 0x44,
....................    0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
....................    0x7E, 0x02, 0x02, 0x06, 0x06,
....................    0x02, 0x7E, 0x02, 0x7E, 0x02,
....................    0x63, 0x55, 0x49, 0x41, 0x63,
....................    0x38, 0x44, 0x44, 0x3C, 0x04,
....................    0x40, 0x7E, 0x20, 0x1E, 0x20,
....................    0x06, 0x02, 0x7E, 0x02, 0x02,
....................    0x99, 0xA5, 0xE7, 0xA5, 0x99,
....................    0x1C, 0x2A, 0x49, 0x2A, 0x1C,
....................    0x4C, 0x72, 0x01, 0x72, 0x4C,
....................    0x30, 0x4A, 0x4D, 0x4D, 0x30,
....................    0x30, 0x48, 0x78, 0x48, 0x30,
....................    0xBC, 0x62, 0x5A, 0x46, 0x3D,
....................    0x3E, 0x49, 0x49, 0x49, 0x00,
....................    0x7E, 0x01, 0x01, 0x01, 0x7E,
....................    0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
....................    0x44, 0x44, 0x5F, 0x44, 0x44,
....................    0x40, 0x51, 0x4A, 0x44, 0x40,
....................    0x40, 0x44, 0x4A, 0x51, 0x40,
....................    0x00, 0x00, 0xFF, 0x01, 0x03,
....................    0xE0, 0x80, 0xFF, 0x00, 0x00,
....................    0x08, 0x08, 0x6B, 0x6B, 0x08,
....................    0x36, 0x12, 0x36, 0x24, 0x36,
....................    0x06, 0x0F, 0x09, 0x0F, 0x06,
....................    0x00, 0x00, 0x18, 0x18, 0x00,
....................    0x00, 0x00, 0x10, 0x10, 0x00,
....................    0x30, 0x40, 0xFF, 0x01, 0x01,
....................    0x00, 0x1F, 0x01, 0x01, 0x1E,
....................    0x00, 0x19, 0x1D, 0x17, 0x12,
....................    0x00, 0x3C, 0x3C, 0x3C, 0x3C,
....................    0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
.................... };
.................... #endif // FONT5X7_H
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Write a line.  Bresenham's algorithm - thx wikpedia
....................     @param    x0  Start point x coordinate
....................     @param    y0  Start point y coordinate
....................     @param    x1  End point x coordinate
....................     @param    y1  End point y coordinate
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void writeLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
*
017B6:  MOVLB  1
017B8:  BCF    xCB.0
017BA:  MOVF   xC3,W
017BC:  SUBWF  xC7,W
017BE:  MOVWF  00
017C0:  MOVF   xC4,W
017C2:  SUBWFB xC8,W
017C4:  MOVWF  03
017C6:  MOVFF  00,1DC
017CA:  MOVWF  xDD
017CC:  MOVWF  03
017CE:  MOVF   00,W
017D0:  BTFSS  xDD.7
017D2:  BRA    17E4
017D4:  MOVLW  00
017D6:  BSF    FD8.0
017D8:  SUBFWB xDC,W
017DA:  MOVWF  00
017DC:  MOVLW  00
017DE:  SUBFWB xDD,W
017E0:  MOVWF  03
017E2:  MOVF   00,W
017E4:  MOVWF  xDC
017E6:  MOVFF  03,1DD
017EA:  MOVF   xC1,W
017EC:  SUBWF  xC5,W
017EE:  MOVWF  00
017F0:  MOVF   xC2,W
017F2:  SUBWFB xC6,W
017F4:  MOVWF  03
017F6:  MOVFF  00,1DE
017FA:  MOVWF  xDF
017FC:  MOVWF  03
017FE:  MOVF   00,W
01800:  BTFSS  xDF.7
01802:  BRA    1814
01804:  MOVLW  00
01806:  BSF    FD8.0
01808:  SUBFWB xDE,W
0180A:  MOVWF  00
0180C:  MOVLW  00
0180E:  SUBFWB xDF,W
01810:  MOVWF  03
01812:  MOVF   00,W
01814:  MOVWF  01
01816:  MOVF   03,W
01818:  SUBWF  xDD,W
0181A:  BNC   1826
0181C:  BNZ   1824
0181E:  MOVF   xDC,W
01820:  SUBWF  01,W
01822:  BC    1826
01824:  BSF    xCB.0
....................     bool steep = abs((int16_t)(y1 - y0)) > abs((int16_t)(x1 - x0));
....................     if (steep) {
01826:  BTFSS  xCB.0
01828:  BRA    185A
....................         _swap_int16_t(x0, y0);
0182A:  MOVFF  1C2,1CD
0182E:  MOVFF  1C1,1CC
01832:  MOVFF  1C4,1C2
01836:  MOVFF  1C3,1C1
0183A:  MOVFF  1CD,1C4
0183E:  MOVFF  1CC,1C3
....................         _swap_int16_t(x1, y1);
01842:  MOVFF  1C6,1CF
01846:  MOVFF  1C5,1CE
0184A:  MOVFF  1C8,1C6
0184E:  MOVFF  1C7,1C5
01852:  MOVFF  1CF,1C8
01856:  MOVFF  1CE,1C7
....................     }
.................... 
....................     if (x0 > x1) {
0185A:  MOVF   xC6,W
0185C:  SUBWF  xC2,W
0185E:  BNC   1898
01860:  BNZ   1868
01862:  MOVF   xC1,W
01864:  SUBWF  xC5,W
01866:  BC    1898
....................         _swap_int16_t(x0, x1);
01868:  MOVFF  1C2,1D1
0186C:  MOVFF  1C1,1D0
01870:  MOVFF  1C6,1C2
01874:  MOVFF  1C5,1C1
01878:  MOVFF  1D1,1C6
0187C:  MOVFF  1D0,1C5
....................         _swap_int16_t(y0, y1);
01880:  MOVFF  1C4,1D3
01884:  MOVFF  1C3,1D2
01888:  MOVFF  1C8,1C4
0188C:  MOVFF  1C7,1C3
01890:  MOVFF  1D3,1C8
01894:  MOVFF  1D2,1C7
....................     }
.................... 
....................     int16_t dx, dy;
....................     dx = x1 - x0;
01898:  MOVF   xC1,W
0189A:  SUBWF  xC5,W
0189C:  MOVWF  00
0189E:  MOVF   xC2,W
018A0:  SUBWFB xC6,W
018A2:  MOVFF  00,1D4
018A6:  MOVWF  xD5
....................     dy = abs((int16_t)(y1 - y0));
018A8:  MOVF   xC3,W
018AA:  SUBWF  xC7,W
018AC:  MOVWF  00
018AE:  MOVF   xC4,W
018B0:  SUBWFB xC8,W
018B2:  MOVWF  03
018B4:  MOVFF  00,1DC
018B8:  MOVWF  xDD
018BA:  MOVWF  03
018BC:  MOVF   00,W
018BE:  BTFSS  xDD.7
018C0:  BRA    18D2
018C2:  MOVLW  00
018C4:  BSF    FD8.0
018C6:  SUBFWB xDC,W
018C8:  MOVWF  00
018CA:  MOVLW  00
018CC:  SUBFWB xDD,W
018CE:  MOVWF  03
018D0:  MOVF   00,W
018D2:  MOVWF  xD6
018D4:  MOVFF  03,1D7
.................... 
....................     int16_t err = dx / 2;
....................     int16_t ystep;
018D8:  MOVFF  1D5,1DD
018DC:  MOVFF  1D4,1DC
018E0:  CLRF   xDF
018E2:  MOVLW  02
018E4:  MOVWF  xDE
018E6:  MOVLB  0
018E8:  RCALL  173E
018EA:  MOVFF  02,1D9
018EE:  MOVFF  01,1D8
.................... 
....................     if (y0 < y1) {
018F2:  MOVLB  1
018F4:  MOVF   xC4,W
018F6:  SUBWF  xC8,W
018F8:  BNC   190A
018FA:  BNZ   1902
018FC:  MOVF   xC7,W
018FE:  SUBWF  xC3,W
01900:  BC    190A
....................         ystep = 1;
01902:  CLRF   xDB
01904:  MOVLW  01
01906:  MOVWF  xDA
....................     } else {
01908:  BRA    190E
....................         ystep = -1;
0190A:  SETF   xDB
0190C:  SETF   xDA
....................     }
.................... 
....................     for (; x0<=x1; x0++) {
0190E:  MOVF   xC2,W
01910:  SUBWF  xC6,W
01912:  BNC   197E
01914:  BNZ   191C
01916:  MOVF   xC1,W
01918:  SUBWF  xC5,W
0191A:  BNC   197E
....................         if (steep) {
0191C:  BTFSS  xCB.0
0191E:  BRA    193A
....................             display_drawPixel(y0, x0, color);
01920:  MOVFF  1C3,1DC
01924:  MOVFF  1C1,1DD
01928:  MOVFF  1CA,1DF
0192C:  MOVFF  1C9,1DE
01930:  MOVLB  0
01932:  CALL   0B34
....................         } else {
01936:  BRA    1950
01938:  MOVLB  1
....................             display_drawPixel(x0, y0, color);
0193A:  MOVFF  1C1,1DC
0193E:  MOVFF  1C3,1DD
01942:  MOVFF  1CA,1DF
01946:  MOVFF  1C9,1DE
0194A:  MOVLB  0
0194C:  CALL   0B34
....................         }
....................         err -= dy;
01950:  MOVLB  1
01952:  MOVF   xD6,W
01954:  SUBWF  xD8,F
01956:  MOVF   xD7,W
01958:  SUBWFB xD9,F
....................         if (err < 0) {
0195A:  BTFSS  xD9.7
0195C:  BRA    1976
....................             y0 += ystep;
0195E:  MOVF   xDA,W
01960:  ADDWF  xC3,W
01962:  MOVWF  01
01964:  MOVF   xDB,W
01966:  ADDWFC xC4,W
01968:  MOVFF  01,1C3
0196C:  MOVWF  xC4
....................             err += dx;
0196E:  MOVF   xD4,W
01970:  ADDWF  xD8,F
01972:  MOVF   xD5,W
01974:  ADDWFC xD9,F
....................         }
01976:  INCF   xC1,F
01978:  BTFSC  FD8.2
0197A:  INCF   xC2,F
0197C:  BRA    190E
....................     }
0197E:  MOVLB  0
01980:  GOTO   1A78 (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Draw a line
....................     @param    x0  Start point x coordinate
....................     @param    y0  Start point y coordinate
....................     @param    x1  End point x coordinate
....................     @param    y1  End point y coordinate
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
....................     // Update in subclasses if desired!
....................     if(x0 == x1){
01984:  MOVLB  1
01986:  MOVF   xB7,W
01988:  SUBWF  xB3,W
0198A:  BNZ   19EA
0198C:  MOVF   xB8,W
0198E:  SUBWF  xB4,W
01990:  BNZ   19EA
....................         if(y0 > y1) _swap_int16_t(y0, y1);
01992:  MOVF   xBA,W
01994:  SUBWF  xB6,W
01996:  BNC   19B8
01998:  BNZ   19A0
0199A:  MOVF   xB5,W
0199C:  SUBWF  xB9,W
0199E:  BC    19B8
019A0:  MOVFF  1B6,1BE
019A4:  MOVFF  1B5,1BD
019A8:  MOVFF  1BA,1B6
019AC:  MOVFF  1B9,1B5
019B0:  MOVFF  1BE,1BA
019B4:  MOVFF  1BD,1B9
....................         display_drawVLine(x0, y0, y1 - y0 + 1, color);
019B8:  MOVF   xB5,W
019BA:  SUBWF  xB9,W
019BC:  MOVWF  xC1
019BE:  MOVF   xB6,W
019C0:  SUBWFB xBA,W
019C2:  MOVWF  xC2
019C4:  MOVLW  01
019C6:  ADDWF  xC1,F
019C8:  MOVLW  00
019CA:  ADDWFC xC2,F
019CC:  MOVFF  1B3,1D1
019D0:  MOVFF  1B5,1D2
019D4:  MOVFF  1C1,1D3
019D8:  MOVFF  1BC,1D5
019DC:  MOVFF  1BB,1D4
019E0:  MOVLB  0
019E2:  CALL   0C24
....................     } else if(y0 == y1){
019E6:  BRA    1A78
019E8:  MOVLB  1
019EA:  MOVF   xB9,W
019EC:  SUBWF  xB5,W
019EE:  BNZ   1A4C
019F0:  MOVF   xBA,W
019F2:  SUBWF  xB6,W
019F4:  BNZ   1A4C
....................         if(x0 > x1) _swap_int16_t(x0, x1);
019F6:  MOVF   xB8,W
019F8:  SUBWF  xB4,W
019FA:  BNC   1A1C
019FC:  BNZ   1A04
019FE:  MOVF   xB3,W
01A00:  SUBWF  xB7,W
01A02:  BC    1A1C
01A04:  MOVFF  1B4,1C0
01A08:  MOVFF  1B3,1BF
01A0C:  MOVFF  1B8,1B4
01A10:  MOVFF  1B7,1B3
01A14:  MOVFF  1C0,1B8
01A18:  MOVFF  1BF,1B7
....................         display_drawHLine(x0, y0, x1 - x0 + 1, color);
01A1C:  MOVF   xB3,W
01A1E:  SUBWF  xB7,W
01A20:  MOVWF  xC1
01A22:  MOVF   xB4,W
01A24:  SUBWFB xB8,W
01A26:  MOVWF  xC2
01A28:  MOVLW  01
01A2A:  ADDWF  xC1,F
01A2C:  MOVLW  00
01A2E:  ADDWFC xC2,F
01A30:  MOVFF  1B3,1DA
01A34:  MOVFF  1B5,1DB
01A38:  MOVFF  1C1,1DC
01A3C:  MOVFF  1BC,1DE
01A40:  MOVFF  1BB,1DD
01A44:  MOVLB  0
01A46:  RCALL  16BA
....................     } else {
01A48:  BRA    1A78
01A4A:  MOVLB  1
....................         writeLine(x0, y0, x1, y1, color);
01A4C:  MOVFF  1B4,1C2
01A50:  MOVFF  1B3,1C1
01A54:  MOVFF  1B6,1C4
01A58:  MOVFF  1B5,1C3
01A5C:  MOVFF  1B8,1C6
01A60:  MOVFF  1B7,1C5
01A64:  MOVFF  1BA,1C8
01A68:  MOVFF  1B9,1C7
01A6C:  MOVFF  1BC,1CA
01A70:  MOVFF  1BB,1C9
01A74:  MOVLB  0
01A76:  BRA    17B6
....................     }
01A78:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Draw a circle outline
....................     @param    x0   Center-point x coordinate
....................     @param    y0   Center-point y coordinate
....................     @param    r   Radius of circle
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
*
02184:  MOVLW  01
02186:  BSF    FD8.0
02188:  MOVLB  1
0218A:  SUBFWB xA9,W
0218C:  MOVWF  00
0218E:  MOVLW  00
02190:  SUBFWB xAA,W
02192:  MOVWF  03
02194:  MOVFF  00,1AD
02198:  MOVWF  xAE
0219A:  CLRF   xB0
0219C:  MOVLW  01
0219E:  MOVWF  xAF
021A0:  SETF   xCC
021A2:  MOVLW  FE
021A4:  MOVWF  xCB
021A6:  MOVFF  1AA,1CE
021AA:  MOVFF  1A9,1CD
021AE:  MOVLB  0
021B0:  CALL   0A9E
021B4:  MOVFF  02,1B2
021B8:  MOVLB  1
021BA:  MOVFF  01,1B1
021BE:  CLRF   xB4
021C0:  CLRF   xB3
021C2:  MOVFF  1AA,1B6
021C6:  MOVFF  1A9,1B5
....................     int16_t f = 1 - r;
....................     int16_t ddF_x = 1;
....................     int16_t ddF_y = -2 * r;
....................     int16_t x = 0;
....................     int16_t y = r;
.................... 
....................     display_drawPixel(x0  , y0+r, color);
021CA:  MOVF   xA9,W
021CC:  ADDWF  xA7,W
021CE:  MOVWF  xB7
021D0:  MOVF   xAA,W
021D2:  ADDWFC xA8,W
021D4:  MOVWF  xB8
021D6:  MOVFF  1A5,1DC
021DA:  MOVFF  1B7,1DD
021DE:  MOVFF  1AC,1DF
021E2:  MOVFF  1AB,1DE
021E6:  MOVLB  0
021E8:  CALL   0B34
....................     display_drawPixel(x0  , y0-r, color);
021EC:  MOVLB  1
021EE:  MOVF   xA9,W
021F0:  SUBWF  xA7,W
021F2:  MOVWF  xB7
021F4:  MOVF   xAA,W
021F6:  SUBWFB xA8,W
021F8:  MOVWF  xB8
021FA:  MOVFF  1A5,1DC
021FE:  MOVFF  1B7,1DD
02202:  MOVFF  1AC,1DF
02206:  MOVFF  1AB,1DE
0220A:  MOVLB  0
0220C:  CALL   0B34
....................     display_drawPixel(x0+r, y0  , color);
02210:  MOVLB  1
02212:  MOVF   xA9,W
02214:  ADDWF  xA5,W
02216:  MOVWF  xB7
02218:  MOVF   xAA,W
0221A:  ADDWFC xA6,W
0221C:  MOVWF  xB8
0221E:  MOVFF  1B7,1DC
02222:  MOVFF  1A7,1DD
02226:  MOVFF  1AC,1DF
0222A:  MOVFF  1AB,1DE
0222E:  MOVLB  0
02230:  CALL   0B34
....................     display_drawPixel(x0-r, y0  , color);
02234:  MOVLB  1
02236:  MOVF   xA9,W
02238:  SUBWF  xA5,W
0223A:  MOVWF  xB7
0223C:  MOVF   xAA,W
0223E:  SUBWFB xA6,W
02240:  MOVWF  xB8
02242:  MOVFF  1B7,1DC
02246:  MOVFF  1A7,1DD
0224A:  MOVFF  1AC,1DF
0224E:  MOVFF  1AB,1DE
02252:  MOVLB  0
02254:  CALL   0B34
.................... 
....................     while (x<y) {
02258:  MOVLB  1
0225A:  BTFSS  xB4.7
0225C:  BRA    2264
0225E:  BTFSS  xB6.7
02260:  BRA    227A
02262:  BRA    2268
02264:  BTFSC  xB6.7
02266:  BRA    242E
02268:  MOVF   xB4,W
0226A:  SUBWF  xB6,W
0226C:  BTFSS  FD8.0
0226E:  BRA    242E
02270:  BNZ   227A
02272:  MOVF   xB5,W
02274:  SUBWF  xB3,W
02276:  BTFSC  FD8.0
02278:  BRA    242E
....................         if (f >= 0) {
0227A:  BTFSC  xAE.7
0227C:  BRA    2296
....................             y--;
0227E:  MOVF   xB5,W
02280:  BTFSC  FD8.2
02282:  DECF   xB6,F
02284:  DECF   xB5,F
....................             ddF_y += 2;
02286:  MOVLW  02
02288:  ADDWF  xB1,F
0228A:  MOVLW  00
0228C:  ADDWFC xB2,F
....................             f += ddF_y;
0228E:  MOVF   xB1,W
02290:  ADDWF  xAD,F
02292:  MOVF   xB2,W
02294:  ADDWFC xAE,F
....................         }
....................         x++;
02296:  INCF   xB3,F
02298:  BTFSC  FD8.2
0229A:  INCF   xB4,F
....................         ddF_x += 2;
0229C:  MOVLW  02
0229E:  ADDWF  xAF,F
022A0:  MOVLW  00
022A2:  ADDWFC xB0,F
....................         f += ddF_x;
022A4:  MOVF   xAF,W
022A6:  ADDWF  xAD,F
022A8:  MOVF   xB0,W
022AA:  ADDWFC xAE,F
.................... 
....................         display_drawPixel(x0 + x, y0 + y, color);
022AC:  MOVF   xB3,W
022AE:  ADDWF  xA5,W
022B0:  MOVWF  xB7
022B2:  MOVF   xB4,W
022B4:  ADDWFC xA6,W
022B6:  MOVWF  xB8
022B8:  MOVF   xB5,W
022BA:  ADDWF  xA7,W
022BC:  MOVWF  xB9
022BE:  MOVF   xB6,W
022C0:  ADDWFC xA8,W
022C2:  MOVWF  xBA
022C4:  MOVFF  1B7,1DC
022C8:  MOVFF  1B9,1DD
022CC:  MOVFF  1AC,1DF
022D0:  MOVFF  1AB,1DE
022D4:  MOVLB  0
022D6:  CALL   0B34
....................         display_drawPixel(x0 - x, y0 + y, color);
022DA:  MOVLB  1
022DC:  MOVF   xB3,W
022DE:  SUBWF  xA5,W
022E0:  MOVWF  xB7
022E2:  MOVF   xB4,W
022E4:  SUBWFB xA6,W
022E6:  MOVWF  xB8
022E8:  MOVF   xB5,W
022EA:  ADDWF  xA7,W
022EC:  MOVWF  xB9
022EE:  MOVF   xB6,W
022F0:  ADDWFC xA8,W
022F2:  MOVWF  xBA
022F4:  MOVFF  1B7,1DC
022F8:  MOVFF  1B9,1DD
022FC:  MOVFF  1AC,1DF
02300:  MOVFF  1AB,1DE
02304:  MOVLB  0
02306:  CALL   0B34
....................         display_drawPixel(x0 + x, y0 - y, color);
0230A:  MOVLB  1
0230C:  MOVF   xB3,W
0230E:  ADDWF  xA5,W
02310:  MOVWF  xB7
02312:  MOVF   xB4,W
02314:  ADDWFC xA6,W
02316:  MOVWF  xB8
02318:  MOVF   xB5,W
0231A:  SUBWF  xA7,W
0231C:  MOVWF  xB9
0231E:  MOVF   xB6,W
02320:  SUBWFB xA8,W
02322:  MOVWF  xBA
02324:  MOVFF  1B7,1DC
02328:  MOVFF  1B9,1DD
0232C:  MOVFF  1AC,1DF
02330:  MOVFF  1AB,1DE
02334:  MOVLB  0
02336:  CALL   0B34
....................         display_drawPixel(x0 - x, y0 - y, color);
0233A:  MOVLB  1
0233C:  MOVF   xB3,W
0233E:  SUBWF  xA5,W
02340:  MOVWF  xB7
02342:  MOVF   xB4,W
02344:  SUBWFB xA6,W
02346:  MOVWF  xB8
02348:  MOVF   xB5,W
0234A:  SUBWF  xA7,W
0234C:  MOVWF  xB9
0234E:  MOVF   xB6,W
02350:  SUBWFB xA8,W
02352:  MOVWF  xBA
02354:  MOVFF  1B7,1DC
02358:  MOVFF  1B9,1DD
0235C:  MOVFF  1AC,1DF
02360:  MOVFF  1AB,1DE
02364:  MOVLB  0
02366:  CALL   0B34
....................         display_drawPixel(x0 + y, y0 + x, color);
0236A:  MOVLB  1
0236C:  MOVF   xB5,W
0236E:  ADDWF  xA5,W
02370:  MOVWF  xB7
02372:  MOVF   xB6,W
02374:  ADDWFC xA6,W
02376:  MOVWF  xB8
02378:  MOVF   xB3,W
0237A:  ADDWF  xA7,W
0237C:  MOVWF  xB9
0237E:  MOVF   xB4,W
02380:  ADDWFC xA8,W
02382:  MOVWF  xBA
02384:  MOVFF  1B7,1DC
02388:  MOVFF  1B9,1DD
0238C:  MOVFF  1AC,1DF
02390:  MOVFF  1AB,1DE
02394:  MOVLB  0
02396:  CALL   0B34
....................         display_drawPixel(x0 - y, y0 + x, color);
0239A:  MOVLB  1
0239C:  MOVF   xB5,W
0239E:  SUBWF  xA5,W
023A0:  MOVWF  xB7
023A2:  MOVF   xB6,W
023A4:  SUBWFB xA6,W
023A6:  MOVWF  xB8
023A8:  MOVF   xB3,W
023AA:  ADDWF  xA7,W
023AC:  MOVWF  xB9
023AE:  MOVF   xB4,W
023B0:  ADDWFC xA8,W
023B2:  MOVWF  xBA
023B4:  MOVFF  1B7,1DC
023B8:  MOVFF  1B9,1DD
023BC:  MOVFF  1AC,1DF
023C0:  MOVFF  1AB,1DE
023C4:  MOVLB  0
023C6:  CALL   0B34
....................         display_drawPixel(x0 + y, y0 - x, color);
023CA:  MOVLB  1
023CC:  MOVF   xB5,W
023CE:  ADDWF  xA5,W
023D0:  MOVWF  xB7
023D2:  MOVF   xB6,W
023D4:  ADDWFC xA6,W
023D6:  MOVWF  xB8
023D8:  MOVF   xB3,W
023DA:  SUBWF  xA7,W
023DC:  MOVWF  xB9
023DE:  MOVF   xB4,W
023E0:  SUBWFB xA8,W
023E2:  MOVWF  xBA
023E4:  MOVFF  1B7,1DC
023E8:  MOVFF  1B9,1DD
023EC:  MOVFF  1AC,1DF
023F0:  MOVFF  1AB,1DE
023F4:  MOVLB  0
023F6:  CALL   0B34
....................         display_drawPixel(x0 - y, y0 - x, color);
023FA:  MOVLB  1
023FC:  MOVF   xB5,W
023FE:  SUBWF  xA5,W
02400:  MOVWF  xB7
02402:  MOVF   xB6,W
02404:  SUBWFB xA6,W
02406:  MOVWF  xB8
02408:  MOVF   xB3,W
0240A:  SUBWF  xA7,W
0240C:  MOVWF  xB9
0240E:  MOVF   xB4,W
02410:  SUBWFB xA8,W
02412:  MOVWF  xBA
02414:  MOVFF  1B7,1DC
02418:  MOVFF  1B9,1DD
0241C:  MOVFF  1AC,1DF
02420:  MOVFF  1AB,1DE
02424:  MOVLB  0
02426:  CALL   0B34
0242A:  BRA    2258
0242C:  MOVLB  1
....................     }
0242E:  MOVLB  0
02430:  GOTO   24A0 (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief    Quarter-circle drawer, used to do circles and roundrects
....................     @param    x0   Center-point x coordinate
....................     @param    y0   Center-point y coordinate
....................     @param    r   Radius of circle
....................     @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of the circle we're doing
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) {
*
024C0:  MOVLW  01
024C2:  BSF    FD8.0
024C4:  MOVLB  1
024C6:  SUBFWB xBC,W
024C8:  MOVWF  00
024CA:  MOVLW  00
024CC:  SUBFWB xBD,W
024CE:  MOVWF  03
024D0:  MOVFF  00,1C1
024D4:  MOVWF  xC2
024D6:  CLRF   xC4
024D8:  MOVLW  01
024DA:  MOVWF  xC3
024DC:  SETF   xCC
024DE:  MOVLW  FE
024E0:  MOVWF  xCB
024E2:  MOVFF  1BD,1CE
024E6:  MOVFF  1BC,1CD
024EA:  MOVLB  0
024EC:  CALL   0A9E
024F0:  MOVFF  02,1C6
024F4:  MOVLB  1
024F6:  MOVFF  01,1C5
024FA:  CLRF   xC8
024FC:  CLRF   xC7
024FE:  MOVFF  1BD,1CA
02502:  MOVFF  1BC,1C9
....................     int16_t f     = 1 - r;
....................     int16_t ddF_x = 1;
....................     int16_t ddF_y = -2 * r;
....................     int16_t x     = 0;
....................     int16_t y     = r;
.................... 
....................     while (x<y) {
02506:  BTFSS  xC8.7
02508:  BRA    2510
0250A:  BTFSS  xCA.7
0250C:  BRA    2526
0250E:  BRA    2514
02510:  BTFSC  xCA.7
02512:  BRA    26EA
02514:  MOVF   xC8,W
02516:  SUBWF  xCA,W
02518:  BTFSS  FD8.0
0251A:  BRA    26EA
0251C:  BNZ   2526
0251E:  MOVF   xC9,W
02520:  SUBWF  xC7,W
02522:  BTFSC  FD8.0
02524:  BRA    26EA
....................         if (f >= 0) {
02526:  BTFSC  xC2.7
02528:  BRA    2542
....................             y--;
0252A:  MOVF   xC9,W
0252C:  BTFSC  FD8.2
0252E:  DECF   xCA,F
02530:  DECF   xC9,F
....................             ddF_y += 2;
02532:  MOVLW  02
02534:  ADDWF  xC5,F
02536:  MOVLW  00
02538:  ADDWFC xC6,F
....................             f     += ddF_y;
0253A:  MOVF   xC5,W
0253C:  ADDWF  xC1,F
0253E:  MOVF   xC6,W
02540:  ADDWFC xC2,F
....................         }
....................         x++;
02542:  INCF   xC7,F
02544:  BTFSC  FD8.2
02546:  INCF   xC8,F
....................         ddF_x += 2;
02548:  MOVLW  02
0254A:  ADDWF  xC3,F
0254C:  MOVLW  00
0254E:  ADDWFC xC4,F
....................         f     += ddF_x;
02550:  MOVF   xC3,W
02552:  ADDWF  xC1,F
02554:  MOVF   xC4,W
02556:  ADDWFC xC2,F
....................         if (cornername & 0x4) {
02558:  BTFSS  xBE.2
0255A:  BRA    25BC
....................             display_drawPixel(x0 + x, y0 + y, color);
0255C:  MOVF   xC7,W
0255E:  ADDWF  xB8,W
02560:  MOVWF  xCB
02562:  MOVF   xC8,W
02564:  ADDWFC xB9,W
02566:  MOVWF  xCC
02568:  MOVF   xC9,W
0256A:  ADDWF  xBA,W
0256C:  MOVWF  xCD
0256E:  MOVF   xCA,W
02570:  ADDWFC xBB,W
02572:  MOVWF  xCE
02574:  MOVFF  1CB,1DC
02578:  MOVFF  1CD,1DD
0257C:  MOVFF  1C0,1DF
02580:  MOVFF  1BF,1DE
02584:  MOVLB  0
02586:  CALL   0B34
....................             display_drawPixel(x0 + y, y0 + x, color);
0258A:  MOVLB  1
0258C:  MOVF   xC9,W
0258E:  ADDWF  xB8,W
02590:  MOVWF  xCB
02592:  MOVF   xCA,W
02594:  ADDWFC xB9,W
02596:  MOVWF  xCC
02598:  MOVF   xC7,W
0259A:  ADDWF  xBA,W
0259C:  MOVWF  xCD
0259E:  MOVF   xC8,W
025A0:  ADDWFC xBB,W
025A2:  MOVWF  xCE
025A4:  MOVFF  1CB,1DC
025A8:  MOVFF  1CD,1DD
025AC:  MOVFF  1C0,1DF
025B0:  MOVFF  1BF,1DE
025B4:  MOVLB  0
025B6:  CALL   0B34
025BA:  MOVLB  1
....................         }
....................         if (cornername & 0x2) {
025BC:  BTFSS  xBE.1
025BE:  BRA    2620
....................             display_drawPixel(x0 + x, y0 - y, color);
025C0:  MOVF   xC7,W
025C2:  ADDWF  xB8,W
025C4:  MOVWF  xCB
025C6:  MOVF   xC8,W
025C8:  ADDWFC xB9,W
025CA:  MOVWF  xCC
025CC:  MOVF   xC9,W
025CE:  SUBWF  xBA,W
025D0:  MOVWF  xCD
025D2:  MOVF   xCA,W
025D4:  SUBWFB xBB,W
025D6:  MOVWF  xCE
025D8:  MOVFF  1CB,1DC
025DC:  MOVFF  1CD,1DD
025E0:  MOVFF  1C0,1DF
025E4:  MOVFF  1BF,1DE
025E8:  MOVLB  0
025EA:  CALL   0B34
....................             display_drawPixel(x0 + y, y0 - x, color);
025EE:  MOVLB  1
025F0:  MOVF   xC9,W
025F2:  ADDWF  xB8,W
025F4:  MOVWF  xCB
025F6:  MOVF   xCA,W
025F8:  ADDWFC xB9,W
025FA:  MOVWF  xCC
025FC:  MOVF   xC7,W
025FE:  SUBWF  xBA,W
02600:  MOVWF  xCD
02602:  MOVF   xC8,W
02604:  SUBWFB xBB,W
02606:  MOVWF  xCE
02608:  MOVFF  1CB,1DC
0260C:  MOVFF  1CD,1DD
02610:  MOVFF  1C0,1DF
02614:  MOVFF  1BF,1DE
02618:  MOVLB  0
0261A:  CALL   0B34
0261E:  MOVLB  1
....................         }
....................         if (cornername & 0x8) {
02620:  BTFSS  xBE.3
02622:  BRA    2684
....................             display_drawPixel(x0 - y, y0 + x, color);
02624:  MOVF   xC9,W
02626:  SUBWF  xB8,W
02628:  MOVWF  xCB
0262A:  MOVF   xCA,W
0262C:  SUBWFB xB9,W
0262E:  MOVWF  xCC
02630:  MOVF   xC7,W
02632:  ADDWF  xBA,W
02634:  MOVWF  xCD
02636:  MOVF   xC8,W
02638:  ADDWFC xBB,W
0263A:  MOVWF  xCE
0263C:  MOVFF  1CB,1DC
02640:  MOVFF  1CD,1DD
02644:  MOVFF  1C0,1DF
02648:  MOVFF  1BF,1DE
0264C:  MOVLB  0
0264E:  CALL   0B34
....................             display_drawPixel(x0 - x, y0 + y, color);
02652:  MOVLB  1
02654:  MOVF   xC7,W
02656:  SUBWF  xB8,W
02658:  MOVWF  xCB
0265A:  MOVF   xC8,W
0265C:  SUBWFB xB9,W
0265E:  MOVWF  xCC
02660:  MOVF   xC9,W
02662:  ADDWF  xBA,W
02664:  MOVWF  xCD
02666:  MOVF   xCA,W
02668:  ADDWFC xBB,W
0266A:  MOVWF  xCE
0266C:  MOVFF  1CB,1DC
02670:  MOVFF  1CD,1DD
02674:  MOVFF  1C0,1DF
02678:  MOVFF  1BF,1DE
0267C:  MOVLB  0
0267E:  CALL   0B34
02682:  MOVLB  1
....................         }
....................         if (cornername & 0x1) {
02684:  BTFSS  xBE.0
02686:  BRA    26E8
....................             display_drawPixel(x0 - y, y0 - x, color);
02688:  MOVF   xC9,W
0268A:  SUBWF  xB8,W
0268C:  MOVWF  xCB
0268E:  MOVF   xCA,W
02690:  SUBWFB xB9,W
02692:  MOVWF  xCC
02694:  MOVF   xC7,W
02696:  SUBWF  xBA,W
02698:  MOVWF  xCD
0269A:  MOVF   xC8,W
0269C:  SUBWFB xBB,W
0269E:  MOVWF  xCE
026A0:  MOVFF  1CB,1DC
026A4:  MOVFF  1CD,1DD
026A8:  MOVFF  1C0,1DF
026AC:  MOVFF  1BF,1DE
026B0:  MOVLB  0
026B2:  CALL   0B34
....................             display_drawPixel(x0 - x, y0 - y, color);
026B6:  MOVLB  1
026B8:  MOVF   xC7,W
026BA:  SUBWF  xB8,W
026BC:  MOVWF  xCB
026BE:  MOVF   xC8,W
026C0:  SUBWFB xB9,W
026C2:  MOVWF  xCC
026C4:  MOVF   xC9,W
026C6:  SUBWF  xBA,W
026C8:  MOVWF  xCD
026CA:  MOVF   xCA,W
026CC:  SUBWFB xBB,W
026CE:  MOVWF  xCE
026D0:  MOVFF  1CB,1DC
026D4:  MOVFF  1CD,1DD
026D8:  MOVFF  1C0,1DF
026DC:  MOVFF  1BF,1DE
026E0:  MOVLB  0
026E2:  CALL   0B34
026E6:  MOVLB  1
....................         }
026E8:  BRA    2506
....................     }
026EA:  MOVLB  0
026EC:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief    Draw a circle with filled color
....................     @param    x0   Center-point x coordinate
....................     @param    y0   Center-point y coordinate
....................     @param    r   Radius of circle
....................     @param    color 16-bit 5-6-5 Color to fill with
.................... */
.................... /**************************************************************************/
.................... void display_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
....................     display_drawVLine(x0, y0-r, 2*r+1, color);
*
020C8:  MOVLB  1
020CA:  MOVF   xA7,W
020CC:  SUBWF  xA5,W
020CE:  MOVWF  xAB
020D0:  MOVF   xA8,W
020D2:  SUBWFB xA6,W
020D4:  MOVWF  xAC
020D6:  BCF    FD8.0
020D8:  RLCF   xA7,W
020DA:  MOVWF  xAD
020DC:  RLCF   xA8,W
020DE:  MOVWF  xAE
020E0:  MOVLW  01
020E2:  ADDWF  xAD,F
020E4:  MOVLW  00
020E6:  ADDWFC xAE,F
020E8:  MOVFF  1A3,1D1
020EC:  MOVFF  1AB,1D2
020F0:  MOVFF  1AD,1D3
020F4:  MOVFF  1AA,1D5
020F8:  MOVFF  1A9,1D4
020FC:  MOVLB  0
020FE:  CALL   0C24
....................     display_fillCircleHelper(x0, y0, r, 3, 0, color);
02102:  MOVFF  1A4,1B3
02106:  MOVFF  1A3,1B2
0210A:  MOVFF  1A6,1B5
0210E:  MOVFF  1A5,1B4
02112:  MOVFF  1A8,1B7
02116:  MOVFF  1A7,1B6
0211A:  MOVLW  03
0211C:  MOVLB  1
0211E:  MOVWF  xB8
02120:  CLRF   xBA
02122:  CLRF   xB9
02124:  MOVFF  1AA,1BC
02128:  MOVFF  1A9,1BB
0212C:  MOVLB  0
0212E:  RCALL  1E5E
02130:  GOTO   2168 (RETURN)
.................... }
.................... 
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Quarter-circle drawer with fill, used for circles and roundrects
....................     @param  x0       Center-point x coordinate
....................     @param  y0       Center-point y coordinate
....................     @param  r        Radius of circle
....................     @param  corners  Mask bits indicating which quarters we're doing
....................     @param  delta    Offset from center-point, used for round-rects
....................     @param  color    16-bit 5-6-5 Color to fill with
.................... */
.................... /**************************************************************************/
.................... void display_fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t corners, uint16_t delta, uint16_t color) {
*
01E5E:  MOVLW  01
01E60:  BSF    FD8.0
01E62:  MOVLB  1
01E64:  SUBFWB xB6,W
01E66:  MOVWF  00
01E68:  MOVLW  00
01E6A:  SUBFWB xB7,W
01E6C:  MOVWF  03
01E6E:  MOVFF  00,1BD
01E72:  MOVWF  xBE
01E74:  CLRF   xC0
01E76:  MOVLW  01
01E78:  MOVWF  xBF
01E7A:  SETF   xCC
01E7C:  MOVLW  FE
01E7E:  MOVWF  xCB
01E80:  MOVFF  1B7,1CE
01E84:  MOVFF  1B6,1CD
01E88:  MOVLB  0
01E8A:  CALL   0A9E
01E8E:  MOVFF  02,1C2
01E92:  MOVLB  1
01E94:  MOVFF  01,1C1
01E98:  CLRF   xC4
01E9A:  CLRF   xC3
01E9C:  MOVFF  1B7,1C6
01EA0:  MOVFF  1B6,1C5
01EA4:  MOVFF  1C4,1C8
01EA8:  MOVFF  1C3,1C7
01EAC:  MOVFF  1C6,1CA
01EB0:  MOVFF  1C5,1C9
....................     int16_t f     = 1 - r;
....................     int16_t ddF_x = 1;
....................     int16_t ddF_y = -2 * r;
....................     int16_t x     = 0;
....................     int16_t y     = r;
....................     int16_t px    = x;
....................     int16_t py    = y;
.................... 
....................     delta++; // Avoid some +1's in the loop
01EB4:  INCF   xB9,F
01EB6:  BTFSC  FD8.2
01EB8:  INCF   xBA,F
.................... 
....................     while(x < y) {
01EBA:  BTFSS  xC4.7
01EBC:  BRA    1EC4
01EBE:  BTFSS  xC6.7
01EC0:  BRA    1EDA
01EC2:  BRA    1EC8
01EC4:  BTFSC  xC6.7
01EC6:  BRA    20C4
01EC8:  MOVF   xC4,W
01ECA:  SUBWF  xC6,W
01ECC:  BTFSS  FD8.0
01ECE:  BRA    20C4
01ED0:  BNZ   1EDA
01ED2:  MOVF   xC5,W
01ED4:  SUBWF  xC3,W
01ED6:  BTFSC  FD8.0
01ED8:  BRA    20C4
....................         if (f >= 0) {
01EDA:  BTFSC  xBE.7
01EDC:  BRA    1EF6
....................             y--;
01EDE:  MOVF   xC5,W
01EE0:  BTFSC  FD8.2
01EE2:  DECF   xC6,F
01EE4:  DECF   xC5,F
....................             ddF_y += 2;
01EE6:  MOVLW  02
01EE8:  ADDWF  xC1,F
01EEA:  MOVLW  00
01EEC:  ADDWFC xC2,F
....................             f     += ddF_y;
01EEE:  MOVF   xC1,W
01EF0:  ADDWF  xBD,F
01EF2:  MOVF   xC2,W
01EF4:  ADDWFC xBE,F
....................         }
....................         x++;
01EF6:  INCF   xC3,F
01EF8:  BTFSC  FD8.2
01EFA:  INCF   xC4,F
....................         ddF_x += 2;
01EFC:  MOVLW  02
01EFE:  ADDWF  xBF,F
01F00:  MOVLW  00
01F02:  ADDWFC xC0,F
....................         f     += ddF_x;
01F04:  MOVF   xBF,W
01F06:  ADDWF  xBD,F
01F08:  MOVF   xC0,W
01F0A:  ADDWFC xBE,F
....................         // These checks avoid double-drawing certain lines, important
....................         // for the SSD1306 library which has an INVERT drawing mode.
....................         if(x < (y + 1)) {
01F0C:  MOVLW  01
01F0E:  ADDWF  xC5,W
01F10:  MOVWF  01
01F12:  MOVLW  00
01F14:  ADDWFC xC6,W
01F16:  MOVWF  03
01F18:  MOVF   01,W
01F1A:  BTFSS  xC4.7
01F1C:  BRA    1F24
01F1E:  BTFSS  03.7
01F20:  BRA    1F36
01F22:  BRA    1F28
01F24:  BTFSC  03.7
01F26:  BRA    1FEE
01F28:  MOVF   xC4,W
01F2A:  SUBWF  03,W
01F2C:  BNC   1FEE
01F2E:  BNZ   1F36
01F30:  MOVF   01,W
01F32:  SUBWF  xC3,W
01F34:  BC    1FEE
....................             if(corners & 1) display_drawVLine(x0+x, y0-y, 2*y+delta, color);
01F36:  BTFSS  xB8.0
01F38:  BRA    1F92
01F3A:  MOVF   xC3,W
01F3C:  ADDWF  xB2,W
01F3E:  MOVWF  xCB
01F40:  MOVF   xC4,W
01F42:  ADDWFC xB3,W
01F44:  MOVWF  xCC
01F46:  MOVF   xC5,W
01F48:  SUBWF  xB4,W
01F4A:  MOVWF  xCD
01F4C:  MOVF   xC6,W
01F4E:  SUBWFB xB5,W
01F50:  MOVWF  xCE
01F52:  CLRF   xDB
01F54:  MOVLW  02
01F56:  MOVWF  xDA
01F58:  MOVFF  1C6,1DD
01F5C:  MOVFF  1C5,1DC
01F60:  MOVLB  0
01F62:  RCALL  1E0A
01F64:  MOVFF  02,1D0
01F68:  MOVFF  01,1CF
01F6C:  MOVLB  1
01F6E:  MOVF   xB9,W
01F70:  ADDWF  xCF,F
01F72:  MOVF   xBA,W
01F74:  ADDWFC xD0,F
01F76:  MOVFF  1CB,1D1
01F7A:  MOVFF  1CD,1D2
01F7E:  MOVFF  1CF,1D3
01F82:  MOVFF  1BC,1D5
01F86:  MOVFF  1BB,1D4
01F8A:  MOVLB  0
01F8C:  CALL   0C24
01F90:  MOVLB  1
....................             if(corners & 2) display_drawVLine(x0-x, y0-y, 2*y+delta, color);
01F92:  BTFSS  xB8.1
01F94:  BRA    1FEE
01F96:  MOVF   xC3,W
01F98:  SUBWF  xB2,W
01F9A:  MOVWF  xCB
01F9C:  MOVF   xC4,W
01F9E:  SUBWFB xB3,W
01FA0:  MOVWF  xCC
01FA2:  MOVF   xC5,W
01FA4:  SUBWF  xB4,W
01FA6:  MOVWF  xCD
01FA8:  MOVF   xC6,W
01FAA:  SUBWFB xB5,W
01FAC:  MOVWF  xCE
01FAE:  CLRF   xDB
01FB0:  MOVLW  02
01FB2:  MOVWF  xDA
01FB4:  MOVFF  1C6,1DD
01FB8:  MOVFF  1C5,1DC
01FBC:  MOVLB  0
01FBE:  RCALL  1E0A
01FC0:  MOVFF  02,1D0
01FC4:  MOVFF  01,1CF
01FC8:  MOVLB  1
01FCA:  MOVF   xB9,W
01FCC:  ADDWF  xCF,F
01FCE:  MOVF   xBA,W
01FD0:  ADDWFC xD0,F
01FD2:  MOVFF  1CB,1D1
01FD6:  MOVFF  1CD,1D2
01FDA:  MOVFF  1CF,1D3
01FDE:  MOVFF  1BC,1D5
01FE2:  MOVFF  1BB,1D4
01FE6:  MOVLB  0
01FE8:  CALL   0C24
01FEC:  MOVLB  1
....................         }
....................         if(y != py) {
01FEE:  MOVF   xC9,W
01FF0:  SUBWF  xC5,W
01FF2:  BNZ   1FFA
01FF4:  MOVF   xCA,W
01FF6:  SUBWF  xC6,W
01FF8:  BZ    20BA
....................             if(corners & 1) display_drawVLine(x0+py, y0-px, 2*px+delta, color);
01FFA:  BTFSS  xB8.0
01FFC:  BRA    2056
01FFE:  MOVF   xC9,W
02000:  ADDWF  xB2,W
02002:  MOVWF  xCB
02004:  MOVF   xCA,W
02006:  ADDWFC xB3,W
02008:  MOVWF  xCC
0200A:  MOVF   xC7,W
0200C:  SUBWF  xB4,W
0200E:  MOVWF  xCD
02010:  MOVF   xC8,W
02012:  SUBWFB xB5,W
02014:  MOVWF  xCE
02016:  CLRF   xDB
02018:  MOVLW  02
0201A:  MOVWF  xDA
0201C:  MOVFF  1C8,1DD
02020:  MOVFF  1C7,1DC
02024:  MOVLB  0
02026:  RCALL  1E0A
02028:  MOVFF  02,1D0
0202C:  MOVFF  01,1CF
02030:  MOVLB  1
02032:  MOVF   xB9,W
02034:  ADDWF  xCF,F
02036:  MOVF   xBA,W
02038:  ADDWFC xD0,F
0203A:  MOVFF  1CB,1D1
0203E:  MOVFF  1CD,1D2
02042:  MOVFF  1CF,1D3
02046:  MOVFF  1BC,1D5
0204A:  MOVFF  1BB,1D4
0204E:  MOVLB  0
02050:  CALL   0C24
02054:  MOVLB  1
....................             if(corners & 2) display_drawVLine(x0-py, y0-px, 2*px+delta, color);
02056:  BTFSS  xB8.1
02058:  BRA    20B2
0205A:  MOVF   xC9,W
0205C:  SUBWF  xB2,W
0205E:  MOVWF  xCB
02060:  MOVF   xCA,W
02062:  SUBWFB xB3,W
02064:  MOVWF  xCC
02066:  MOVF   xC7,W
02068:  SUBWF  xB4,W
0206A:  MOVWF  xCD
0206C:  MOVF   xC8,W
0206E:  SUBWFB xB5,W
02070:  MOVWF  xCE
02072:  CLRF   xDB
02074:  MOVLW  02
02076:  MOVWF  xDA
02078:  MOVFF  1C8,1DD
0207C:  MOVFF  1C7,1DC
02080:  MOVLB  0
02082:  RCALL  1E0A
02084:  MOVFF  02,1D0
02088:  MOVFF  01,1CF
0208C:  MOVLB  1
0208E:  MOVF   xB9,W
02090:  ADDWF  xCF,F
02092:  MOVF   xBA,W
02094:  ADDWFC xD0,F
02096:  MOVFF  1CB,1D1
0209A:  MOVFF  1CD,1D2
0209E:  MOVFF  1CF,1D3
020A2:  MOVFF  1BC,1D5
020A6:  MOVFF  1BB,1D4
020AA:  MOVLB  0
020AC:  CALL   0C24
020B0:  MOVLB  1
....................             py = y;
020B2:  MOVFF  1C6,1CA
020B6:  MOVFF  1C5,1C9
....................         }
....................         px = x;
020BA:  MOVFF  1C4,1C8
020BE:  MOVFF  1C3,1C7
020C2:  BRA    1EBA
....................     }
020C4:  MOVLB  0
020C6:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief   Draw a rectangle with no fill color
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    w   Width in pixels
....................     @param    h   Height in pixels
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
....................     display_drawHLine(x, y, w, color);
*
01C98:  MOVFF  1A5,1DA
01C9C:  MOVFF  1A7,1DB
01CA0:  MOVFF  1A9,1DC
01CA4:  MOVFF  1AE,1DE
01CA8:  MOVFF  1AD,1DD
01CAC:  RCALL  16BA
....................     display_drawHLine(x, y+h-1, w, color);
01CAE:  MOVLB  1
01CB0:  MOVF   xAB,W
01CB2:  ADDWF  xA7,W
01CB4:  MOVWF  xAF
01CB6:  MOVF   xAC,W
01CB8:  ADDWFC xA8,W
01CBA:  MOVWF  xB0
01CBC:  MOVLW  01
01CBE:  SUBWF  xAF,F
01CC0:  MOVLW  00
01CC2:  SUBWFB xB0,F
01CC4:  MOVFF  1A5,1DA
01CC8:  MOVFF  1AF,1DB
01CCC:  MOVFF  1A9,1DC
01CD0:  MOVFF  1AE,1DE
01CD4:  MOVFF  1AD,1DD
01CD8:  MOVLB  0
01CDA:  RCALL  16BA
....................     display_drawVLine(x, y, h, color);
01CDC:  MOVFF  1A5,1D1
01CE0:  MOVFF  1A7,1D2
01CE4:  MOVFF  1AB,1D3
01CE8:  MOVFF  1AE,1D5
01CEC:  MOVFF  1AD,1D4
01CF0:  CALL   0C24
....................     display_drawVLine(x+w-1, y, h, color);
01CF4:  MOVLB  1
01CF6:  MOVF   xA9,W
01CF8:  ADDWF  xA5,W
01CFA:  MOVWF  xAF
01CFC:  MOVF   xAA,W
01CFE:  ADDWFC xA6,W
01D00:  MOVWF  xB0
01D02:  MOVLW  01
01D04:  SUBWF  xAF,F
01D06:  MOVLW  00
01D08:  SUBWFB xB0,F
01D0A:  MOVFF  1AF,1D1
01D0E:  MOVFF  1A7,1D2
01D12:  MOVFF  1AB,1D3
01D16:  MOVFF  1AE,1D5
01D1A:  MOVFF  1AD,1D4
01D1E:  MOVLB  0
01D20:  CALL   0C24
01D24:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief   Draw a rounded rectangle with no fill color
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    w   Width in pixels
....................     @param    h   Height in pixels
....................     @param    r   Radius of corner rounding
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color) {
*
026EE:  MOVLB  1
026F0:  MOVF   xAB,W
026F2:  SUBWF  xAD,W
026F4:  BNC   2706
026F6:  BNZ   26FE
026F8:  MOVF   xAC,W
026FA:  SUBWF  xAA,W
026FC:  BC    2706
026FE:  MOVFF  1AB,03
02702:  MOVF   xAA,W
02704:  BRA    270C
02706:  MOVFF  1AD,03
0270A:  MOVF   xAC,W
0270C:  MOVWF  xB4
0270E:  MOVFF  03,1B5
02712:  MOVFF  03,1DD
02716:  MOVWF  xDC
02718:  CLRF   xDF
0271A:  MOVLW  02
0271C:  MOVWF  xDE
0271E:  MOVLB  0
02720:  CALL   173E
02724:  MOVFF  02,1B3
02728:  MOVFF  01,1B2
....................     int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
....................     if(r > max_radius) r = max_radius;
0272C:  MOVLB  1
0272E:  BTFSC  xB3.7
02730:  BRA    2740
02732:  MOVF   xB3,W
02734:  SUBWF  xAF,W
02736:  BNC   2748
02738:  BNZ   2740
0273A:  MOVF   xAE,W
0273C:  SUBWF  xB2,W
0273E:  BC    2748
02740:  MOVFF  1B3,1AF
02744:  MOVFF  1B2,1AE
....................     // smarter version
....................     display_drawHLine(x+r  , y    , w-2*r, color); // Top
02748:  MOVF   xAE,W
0274A:  ADDWF  xA6,W
0274C:  MOVWF  xB4
0274E:  MOVF   xAF,W
02750:  ADDWFC xA7,W
02752:  MOVWF  xB5
02754:  BCF    FD8.0
02756:  RLCF   xAE,W
02758:  MOVWF  02
0275A:  RLCF   xAF,W
0275C:  MOVWF  03
0275E:  MOVF   02,W
02760:  SUBWF  xAA,W
02762:  MOVWF  xB6
02764:  MOVF   03,W
02766:  SUBWFB xAB,W
02768:  MOVWF  xB7
0276A:  MOVFF  1B4,1DA
0276E:  MOVFF  1A8,1DB
02772:  MOVFF  1B6,1DC
02776:  MOVFF  1B1,1DE
0277A:  MOVFF  1B0,1DD
0277E:  MOVLB  0
02780:  CALL   16BA
....................     display_drawHLine(x+r  , y+h-1, w-2*r, color); // Bottom
02784:  MOVLB  1
02786:  MOVF   xAE,W
02788:  ADDWF  xA6,W
0278A:  MOVWF  xB4
0278C:  MOVF   xAF,W
0278E:  ADDWFC xA7,W
02790:  MOVWF  xB5
02792:  MOVF   xAC,W
02794:  ADDWF  xA8,W
02796:  MOVWF  xB6
02798:  MOVF   xAD,W
0279A:  ADDWFC xA9,W
0279C:  MOVWF  xB7
0279E:  MOVLW  01
027A0:  SUBWF  xB6,F
027A2:  MOVLW  00
027A4:  SUBWFB xB7,F
027A6:  BCF    FD8.0
027A8:  RLCF   xAE,W
027AA:  MOVWF  02
027AC:  RLCF   xAF,W
027AE:  MOVWF  03
027B0:  MOVF   02,W
027B2:  SUBWF  xAA,W
027B4:  MOVWF  xB8
027B6:  MOVF   03,W
027B8:  SUBWFB xAB,W
027BA:  MOVWF  xB9
027BC:  MOVFF  1B4,1DA
027C0:  MOVFF  1B6,1DB
027C4:  MOVFF  1B8,1DC
027C8:  MOVFF  1B1,1DE
027CC:  MOVFF  1B0,1DD
027D0:  MOVLB  0
027D2:  CALL   16BA
....................     display_drawVLine(x    , y+r  , h-2*r, color); // Left
027D6:  MOVLB  1
027D8:  MOVF   xAE,W
027DA:  ADDWF  xA8,W
027DC:  MOVWF  xB4
027DE:  MOVF   xAF,W
027E0:  ADDWFC xA9,W
027E2:  MOVWF  xB5
027E4:  BCF    FD8.0
027E6:  RLCF   xAE,W
027E8:  MOVWF  02
027EA:  RLCF   xAF,W
027EC:  MOVWF  03
027EE:  MOVF   02,W
027F0:  SUBWF  xAC,W
027F2:  MOVWF  xB6
027F4:  MOVF   03,W
027F6:  SUBWFB xAD,W
027F8:  MOVWF  xB7
027FA:  MOVFF  1A6,1D1
027FE:  MOVFF  1B4,1D2
02802:  MOVFF  1B6,1D3
02806:  MOVFF  1B1,1D5
0280A:  MOVFF  1B0,1D4
0280E:  MOVLB  0
02810:  CALL   0C24
....................     display_drawVLine(x+w-1, y+r  , h-2*r, color); // Right
02814:  MOVLB  1
02816:  MOVF   xAA,W
02818:  ADDWF  xA6,W
0281A:  MOVWF  xB4
0281C:  MOVF   xAB,W
0281E:  ADDWFC xA7,W
02820:  MOVWF  xB5
02822:  MOVLW  01
02824:  SUBWF  xB4,F
02826:  MOVLW  00
02828:  SUBWFB xB5,F
0282A:  MOVF   xAE,W
0282C:  ADDWF  xA8,W
0282E:  MOVWF  xB6
02830:  MOVF   xAF,W
02832:  ADDWFC xA9,W
02834:  MOVWF  xB7
02836:  BCF    FD8.0
02838:  RLCF   xAE,W
0283A:  MOVWF  02
0283C:  RLCF   xAF,W
0283E:  MOVWF  03
02840:  MOVF   02,W
02842:  SUBWF  xAC,W
02844:  MOVWF  xB8
02846:  MOVF   03,W
02848:  SUBWFB xAD,W
0284A:  MOVWF  xB9
0284C:  MOVFF  1B4,1D1
02850:  MOVFF  1B6,1D2
02854:  MOVFF  1B8,1D3
02858:  MOVFF  1B1,1D5
0285C:  MOVFF  1B0,1D4
02860:  MOVLB  0
02862:  CALL   0C24
....................     // draw four corners
....................     display_drawCircleHelper(x+r    , y+r    , r, 1, color);
02866:  MOVLB  1
02868:  MOVF   xAE,W
0286A:  ADDWF  xA6,W
0286C:  MOVWF  xB4
0286E:  MOVF   xAF,W
02870:  ADDWFC xA7,W
02872:  MOVWF  xB5
02874:  MOVF   xAE,W
02876:  ADDWF  xA8,W
02878:  MOVWF  xB6
0287A:  MOVF   xAF,W
0287C:  ADDWFC xA9,W
0287E:  MOVWF  xB7
02880:  MOVFF  1B5,1B9
02884:  MOVFF  1B4,1B8
02888:  MOVWF  xBB
0288A:  MOVFF  1B6,1BA
0288E:  MOVFF  1AF,1BD
02892:  MOVFF  1AE,1BC
02896:  MOVLW  01
02898:  MOVWF  xBE
0289A:  MOVFF  1B1,1C0
0289E:  MOVFF  1B0,1BF
028A2:  MOVLB  0
028A4:  RCALL  24C0
....................     display_drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
028A6:  MOVLB  1
028A8:  MOVF   xAA,W
028AA:  ADDWF  xA6,W
028AC:  MOVWF  xB4
028AE:  MOVF   xAB,W
028B0:  ADDWFC xA7,W
028B2:  MOVWF  xB5
028B4:  MOVF   xAE,W
028B6:  SUBWF  xB4,F
028B8:  MOVF   xAF,W
028BA:  SUBWFB xB5,F
028BC:  MOVLW  01
028BE:  SUBWF  xB4,F
028C0:  MOVLW  00
028C2:  SUBWFB xB5,F
028C4:  MOVF   xAE,W
028C6:  ADDWF  xA8,W
028C8:  MOVWF  xB6
028CA:  MOVF   xAF,W
028CC:  ADDWFC xA9,W
028CE:  MOVWF  xB7
028D0:  MOVFF  1B5,1B9
028D4:  MOVFF  1B4,1B8
028D8:  MOVWF  xBB
028DA:  MOVFF  1B6,1BA
028DE:  MOVFF  1AF,1BD
028E2:  MOVFF  1AE,1BC
028E6:  MOVLW  02
028E8:  MOVWF  xBE
028EA:  MOVFF  1B1,1C0
028EE:  MOVFF  1B0,1BF
028F2:  MOVLB  0
028F4:  RCALL  24C0
....................     display_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
028F6:  MOVLB  1
028F8:  MOVF   xAA,W
028FA:  ADDWF  xA6,W
028FC:  MOVWF  xB4
028FE:  MOVF   xAB,W
02900:  ADDWFC xA7,W
02902:  MOVWF  xB5
02904:  MOVF   xAE,W
02906:  SUBWF  xB4,F
02908:  MOVF   xAF,W
0290A:  SUBWFB xB5,F
0290C:  MOVLW  01
0290E:  SUBWF  xB4,F
02910:  MOVLW  00
02912:  SUBWFB xB5,F
02914:  MOVF   xAC,W
02916:  ADDWF  xA8,W
02918:  MOVWF  xB6
0291A:  MOVF   xAD,W
0291C:  ADDWFC xA9,W
0291E:  MOVWF  xB7
02920:  MOVF   xAE,W
02922:  SUBWF  xB6,F
02924:  MOVF   xAF,W
02926:  SUBWFB xB7,F
02928:  MOVLW  01
0292A:  SUBWF  xB6,F
0292C:  MOVLW  00
0292E:  SUBWFB xB7,F
02930:  MOVFF  1B5,1B9
02934:  MOVFF  1B4,1B8
02938:  MOVFF  1B7,1BB
0293C:  MOVFF  1B6,1BA
02940:  MOVFF  1AF,1BD
02944:  MOVFF  1AE,1BC
02948:  MOVLW  04
0294A:  MOVWF  xBE
0294C:  MOVFF  1B1,1C0
02950:  MOVFF  1B0,1BF
02954:  MOVLB  0
02956:  RCALL  24C0
....................     display_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
02958:  MOVLB  1
0295A:  MOVF   xAE,W
0295C:  ADDWF  xA6,W
0295E:  MOVWF  xB4
02960:  MOVF   xAF,W
02962:  ADDWFC xA7,W
02964:  MOVWF  xB5
02966:  MOVF   xAC,W
02968:  ADDWF  xA8,W
0296A:  MOVWF  xB6
0296C:  MOVF   xAD,W
0296E:  ADDWFC xA9,W
02970:  MOVWF  xB7
02972:  MOVF   xAE,W
02974:  SUBWF  xB6,F
02976:  MOVF   xAF,W
02978:  SUBWFB xB7,F
0297A:  MOVLW  01
0297C:  SUBWF  xB6,F
0297E:  MOVLW  00
02980:  SUBWFB xB7,F
02982:  MOVFF  1B5,1B9
02986:  MOVFF  1B4,1B8
0298A:  MOVFF  1B7,1BB
0298E:  MOVFF  1B6,1BA
02992:  MOVFF  1AF,1BD
02996:  MOVFF  1AE,1BC
0299A:  MOVLW  08
0299C:  MOVWF  xBE
0299E:  MOVFF  1B1,1C0
029A2:  MOVFF  1B0,1BF
029A6:  MOVLB  0
029A8:  RCALL  24C0
029AA:  GOTO   2A00 (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief   Draw a rounded rectangle with fill color
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    w   Width in pixels
....................     @param    h   Height in pixels
....................     @param    r   Radius of corner rounding
....................     @param    color 16-bit 5-6-5 Color to draw/fill with
.................... */
.................... /**************************************************************************/
.................... void display_fillRoundRect(uint16_t x, uint16_t y, uint16_t w,
....................   uint16_t h, uint16_t r, uint16_t color) {
*
02B2A:  MOVLB  1
02B2C:  MOVF   xA3,W
02B2E:  SUBWF  xA5,W
02B30:  BNC   2B42
02B32:  BNZ   2B3A
02B34:  MOVF   xA4,W
02B36:  SUBWF  xA2,W
02B38:  BC    2B42
02B3A:  MOVFF  1A3,03
02B3E:  MOVF   xA2,W
02B40:  BRA    2B48
02B42:  MOVFF  1A5,03
02B46:  MOVF   xA4,W
02B48:  MOVWF  xAC
02B4A:  MOVFF  03,1AD
02B4E:  MOVFF  03,1DD
02B52:  MOVWF  xDC
02B54:  CLRF   xDF
02B56:  MOVLW  02
02B58:  MOVWF  xDE
02B5A:  MOVLB  0
02B5C:  CALL   173E
02B60:  MOVFF  02,1AB
02B64:  MOVFF  01,1AA
....................     int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
....................     if(r > max_radius) r = max_radius;
02B68:  MOVLB  1
02B6A:  BTFSC  xAB.7
02B6C:  BRA    2B7C
02B6E:  MOVF   xAB,W
02B70:  SUBWF  xA7,W
02B72:  BNC   2B84
02B74:  BNZ   2B7C
02B76:  MOVF   xA6,W
02B78:  SUBWF  xAA,W
02B7A:  BC    2B84
02B7C:  MOVFF  1AB,1A7
02B80:  MOVFF  1AA,1A6
....................     // smarter version
....................     display_FillRect(x+r, y, w-2*r, h, color);
02B84:  MOVF   xA6,W
02B86:  ADDWF  x9E,W
02B88:  MOVWF  xAC
02B8A:  MOVF   xA7,W
02B8C:  ADDWFC x9F,W
02B8E:  MOVWF  xAD
02B90:  BCF    FD8.0
02B92:  RLCF   xA6,W
02B94:  MOVWF  02
02B96:  RLCF   xA7,W
02B98:  MOVWF  03
02B9A:  MOVF   02,W
02B9C:  SUBWF  xA2,W
02B9E:  MOVWF  xAE
02BA0:  MOVF   03,W
02BA2:  SUBWFB xA3,W
02BA4:  MOVWF  xAF
02BA6:  MOVFF  1AC,1BA
02BAA:  MOVFF  1A0,1BB
02BAE:  MOVFF  1AE,1BC
02BB2:  MOVFF  1A4,1BD
02BB6:  MOVFF  1A9,1BF
02BBA:  MOVFF  1A8,1BE
02BBE:  MOVLB  0
02BC0:  CALL   0B7E
....................     // draw four corners
....................     display_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
02BC4:  MOVLB  1
02BC6:  MOVF   xA2,W
02BC8:  ADDWF  x9E,W
02BCA:  MOVWF  xAC
02BCC:  MOVF   xA3,W
02BCE:  ADDWFC x9F,W
02BD0:  MOVWF  xAD
02BD2:  MOVF   xA6,W
02BD4:  SUBWF  xAC,F
02BD6:  MOVF   xA7,W
02BD8:  SUBWFB xAD,F
02BDA:  MOVLW  01
02BDC:  SUBWF  xAC,F
02BDE:  MOVLW  00
02BE0:  SUBWFB xAD,F
02BE2:  MOVF   xA6,W
02BE4:  ADDWF  xA0,W
02BE6:  MOVWF  xAE
02BE8:  MOVF   xA7,W
02BEA:  ADDWFC xA1,W
02BEC:  MOVWF  xAF
02BEE:  BCF    FD8.0
02BF0:  RLCF   xA6,W
02BF2:  MOVWF  02
02BF4:  RLCF   xA7,W
02BF6:  MOVWF  03
02BF8:  MOVF   02,W
02BFA:  SUBWF  xA4,W
02BFC:  MOVWF  xB0
02BFE:  MOVF   03,W
02C00:  SUBWFB xA5,W
02C02:  MOVWF  xB1
02C04:  MOVLW  01
02C06:  SUBWF  xB0,F
02C08:  MOVLW  00
02C0A:  SUBWFB xB1,F
02C0C:  MOVFF  1AD,1B3
02C10:  MOVFF  1AC,1B2
02C14:  MOVFF  1AF,1B5
02C18:  MOVFF  1AE,1B4
02C1C:  MOVFF  1A7,1B7
02C20:  MOVFF  1A6,1B6
02C24:  MOVLW  01
02C26:  MOVWF  xB8
02C28:  MOVFF  1B1,1BA
02C2C:  MOVFF  1B0,1B9
02C30:  MOVFF  1A9,1BC
02C34:  MOVFF  1A8,1BB
02C38:  MOVLB  0
02C3A:  CALL   1E5E
....................     //display_fillCircleHelper(94, 18, 8, 1, 43, color);
....................     display_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
02C3E:  MOVLB  1
02C40:  MOVF   xA6,W
02C42:  ADDWF  x9E,W
02C44:  MOVWF  xAC
02C46:  MOVF   xA7,W
02C48:  ADDWFC x9F,W
02C4A:  MOVWF  xAD
02C4C:  MOVF   xA6,W
02C4E:  ADDWF  xA0,W
02C50:  MOVWF  xAE
02C52:  MOVF   xA7,W
02C54:  ADDWFC xA1,W
02C56:  MOVWF  xAF
02C58:  BCF    FD8.0
02C5A:  RLCF   xA6,W
02C5C:  MOVWF  02
02C5E:  RLCF   xA7,W
02C60:  MOVWF  03
02C62:  MOVF   02,W
02C64:  SUBWF  xA4,W
02C66:  MOVWF  xB0
02C68:  MOVF   03,W
02C6A:  SUBWFB xA5,W
02C6C:  MOVWF  xB1
02C6E:  MOVLW  01
02C70:  SUBWF  xB0,F
02C72:  MOVLW  00
02C74:  SUBWFB xB1,F
02C76:  MOVFF  1AD,1B3
02C7A:  MOVFF  1AC,1B2
02C7E:  MOVFF  1AF,1B5
02C82:  MOVFF  1AE,1B4
02C86:  MOVFF  1A7,1B7
02C8A:  MOVFF  1A6,1B6
02C8E:  MOVLW  02
02C90:  MOVWF  xB8
02C92:  MOVFF  1B1,1BA
02C96:  MOVFF  1B0,1B9
02C9A:  MOVFF  1A9,1BC
02C9E:  MOVFF  1A8,1BB
02CA2:  MOVLB  0
02CA4:  CALL   1E5E
02CA8:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief   Draw a triangle with no fill color
....................     @param    x0  Vertex #0 x coordinate
....................     @param    y0  Vertex #0 y coordinate
....................     @param    x1  Vertex #1 x coordinate
....................     @param    y1  Vertex #1 y coordinate
....................     @param    x2  Vertex #2 x coordinate
....................     @param    y2  Vertex #2 y coordinate
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
....................   uint16_t x2, uint16_t y2, uint16_t color) {
....................     display_drawLine(x0, y0, x1, y1, color);
*
02A34:  MOVFF  1A6,1B4
02A38:  MOVFF  1A5,1B3
02A3C:  MOVFF  1A8,1B6
02A40:  MOVFF  1A7,1B5
02A44:  MOVFF  1AA,1B8
02A48:  MOVFF  1A9,1B7
02A4C:  MOVFF  1AC,1BA
02A50:  MOVFF  1AB,1B9
02A54:  MOVFF  1B2,1BC
02A58:  MOVFF  1B1,1BB
02A5C:  CALL   1984
....................     display_drawLine(x1, y1, x2, y2, color);
02A60:  MOVFF  1AA,1B4
02A64:  MOVFF  1A9,1B3
02A68:  MOVFF  1AC,1B6
02A6C:  MOVFF  1AB,1B5
02A70:  MOVFF  1AE,1B8
02A74:  MOVFF  1AD,1B7
02A78:  MOVFF  1B0,1BA
02A7C:  MOVFF  1AF,1B9
02A80:  MOVFF  1B2,1BC
02A84:  MOVFF  1B1,1BB
02A88:  CALL   1984
....................     display_drawLine(x2, y2, x0, y0, color);
02A8C:  MOVFF  1AE,1B4
02A90:  MOVFF  1AD,1B3
02A94:  MOVFF  1B0,1B6
02A98:  MOVFF  1AF,1B5
02A9C:  MOVFF  1A6,1B8
02AA0:  MOVFF  1A5,1B7
02AA4:  MOVFF  1A8,1BA
02AA8:  MOVFF  1A7,1B9
02AAC:  MOVFF  1B2,1BC
02AB0:  MOVFF  1B1,1BB
02AB4:  CALL   1984
02AB8:  GOTO   2B0E (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief     Draw a triangle with color-fill
....................     @param    x0  Vertex #0 x coordinate
....................     @param    y0  Vertex #0 y coordinate
....................     @param    x1  Vertex #1 x coordinate
....................     @param    y1  Vertex #1 y coordinate
....................     @param    x2  Vertex #2 x coordinate
....................     @param    y2  Vertex #2 y coordinate
....................     @param    color 16-bit 5-6-5 Color to fill/draw with
.................... */
.................... /**************************************************************************/
.................... void display_fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
....................   uint16_t x2, uint16_t y2, uint16_t color) {
....................     int16_t a, b, y, last;
.................... 
....................     // Sort coordinates by Y order (y2 >= y1 >= y0)
....................     if (y0 > y1) {
*
02D94:  MOVLB  1
02D96:  MOVF   xA5,W
02D98:  SUBWF  xA1,W
02D9A:  BNC   2DD4
02D9C:  BNZ   2DA4
02D9E:  MOVF   xA0,W
02DA0:  SUBWF  xA4,W
02DA2:  BC    2DD4
....................         _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
02DA4:  MOVFF  1A1,1B5
02DA8:  MOVFF  1A0,1B4
02DAC:  MOVFF  1A5,1A1
02DB0:  MOVFF  1A4,1A0
02DB4:  MOVFF  1B5,1A5
02DB8:  MOVFF  1B4,1A4
02DBC:  MOVFF  19F,1B7
02DC0:  MOVFF  19E,1B6
02DC4:  MOVFF  1A3,19F
02DC8:  MOVFF  1A2,19E
02DCC:  MOVFF  1B7,1A3
02DD0:  MOVFF  1B6,1A2
....................     }
....................     if (y1 > y2) {
02DD4:  MOVF   xA9,W
02DD6:  SUBWF  xA5,W
02DD8:  BNC   2E12
02DDA:  BNZ   2DE2
02DDC:  MOVF   xA4,W
02DDE:  SUBWF  xA8,W
02DE0:  BC    2E12
....................         _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
02DE2:  MOVFF  1A9,1B9
02DE6:  MOVFF  1A8,1B8
02DEA:  MOVFF  1A5,1A9
02DEE:  MOVFF  1A4,1A8
02DF2:  MOVFF  1B9,1A5
02DF6:  MOVFF  1B8,1A4
02DFA:  MOVFF  1A7,1BB
02DFE:  MOVFF  1A6,1BA
02E02:  MOVFF  1A3,1A7
02E06:  MOVFF  1A2,1A6
02E0A:  MOVFF  1BB,1A3
02E0E:  MOVFF  1BA,1A2
....................     }
....................     if (y0 > y1) {
02E12:  MOVF   xA5,W
02E14:  SUBWF  xA1,W
02E16:  BNC   2E50
02E18:  BNZ   2E20
02E1A:  MOVF   xA0,W
02E1C:  SUBWF  xA4,W
02E1E:  BC    2E50
....................         _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
02E20:  MOVFF  1A1,1BD
02E24:  MOVFF  1A0,1BC
02E28:  MOVFF  1A5,1A1
02E2C:  MOVFF  1A4,1A0
02E30:  MOVFF  1BD,1A5
02E34:  MOVFF  1BC,1A4
02E38:  MOVFF  19F,1BF
02E3C:  MOVFF  19E,1BE
02E40:  MOVFF  1A3,19F
02E44:  MOVFF  1A2,19E
02E48:  MOVFF  1BF,1A3
02E4C:  MOVFF  1BE,1A2
....................     }
.................... 
....................     if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
02E50:  MOVF   xA8,W
02E52:  SUBWF  xA0,W
02E54:  BNZ   2F0A
02E56:  MOVF   xA9,W
02E58:  SUBWF  xA1,W
02E5A:  BNZ   2F0A
....................         a = b = x0;
02E5C:  MOVFF  19F,1AF
02E60:  MOVFF  19E,1AE
02E64:  MOVFF  1AF,1AD
02E68:  MOVFF  1AE,1AC
....................         if(x1 < a)      a = x1;
02E6C:  BTFSC  xAD.7
02E6E:  BRA    2E88
02E70:  MOVF   xA3,W
02E72:  SUBWF  xAD,W
02E74:  BNC   2E88
02E76:  BNZ   2E7E
02E78:  MOVF   xAC,W
02E7A:  SUBWF  xA2,W
02E7C:  BC    2E88
02E7E:  MOVFF  1A3,1AD
02E82:  MOVFF  1A2,1AC
02E86:  BRA    2EA2
....................         else if(x1 > b) b = x1;
02E88:  BTFSC  xAF.7
02E8A:  BRA    2E9A
02E8C:  MOVF   xAF,W
02E8E:  SUBWF  xA3,W
02E90:  BNC   2EA2
02E92:  BNZ   2E9A
02E94:  MOVF   xA2,W
02E96:  SUBWF  xAE,W
02E98:  BC    2EA2
02E9A:  MOVFF  1A3,1AF
02E9E:  MOVFF  1A2,1AE
....................         if(x2 < a)      a = x2;
02EA2:  BTFSC  xAD.7
02EA4:  BRA    2EBE
02EA6:  MOVF   xA7,W
02EA8:  SUBWF  xAD,W
02EAA:  BNC   2EBE
02EAC:  BNZ   2EB4
02EAE:  MOVF   xAC,W
02EB0:  SUBWF  xA6,W
02EB2:  BC    2EBE
02EB4:  MOVFF  1A7,1AD
02EB8:  MOVFF  1A6,1AC
02EBC:  BRA    2ED8
....................         else if(x2 > b) b = x2;
02EBE:  BTFSC  xAF.7
02EC0:  BRA    2ED0
02EC2:  MOVF   xAF,W
02EC4:  SUBWF  xA7,W
02EC6:  BNC   2ED8
02EC8:  BNZ   2ED0
02ECA:  MOVF   xA6,W
02ECC:  SUBWF  xAE,W
02ECE:  BC    2ED8
02ED0:  MOVFF  1A7,1AF
02ED4:  MOVFF  1A6,1AE
....................         display_drawHLine(a, y0, b-a+1, color);
02ED8:  MOVF   xAC,W
02EDA:  SUBWF  xAE,W
02EDC:  MOVWF  xD8
02EDE:  MOVF   xAD,W
02EE0:  SUBWFB xAF,W
02EE2:  MOVWF  xD9
02EE4:  MOVLW  01
02EE6:  ADDWF  xD8,F
02EE8:  MOVLW  00
02EEA:  ADDWFC xD9,F
02EEC:  MOVFF  1AC,1DA
02EF0:  MOVFF  1A0,1DB
02EF4:  MOVFF  1D8,1DC
02EF8:  MOVFF  1AB,1DE
02EFC:  MOVFF  1AA,1DD
02F00:  MOVLB  0
02F02:  CALL   16BA
....................         return;
02F06:  BRA    3378
02F08:  MOVLB  1
....................     }
.................... 
....................     int16_t
....................     dx01 = x1 - x0,
....................     dy01 = y1 - y0,
....................     dx02 = x2 - x0,
....................     dy02 = y2 - y0,
....................     dx12 = x2 - x1,
....................     dy12 = y2 - y1;
....................     int32_t
....................     sa   = 0,
....................     sb   = 0;
02F0A:  MOVF   x9E,W
02F0C:  SUBWF  xA2,W
02F0E:  MOVWF  00
02F10:  MOVF   x9F,W
02F12:  SUBWFB xA3,W
02F14:  MOVWF  03
02F16:  MOVFF  00,1C0
02F1A:  MOVWF  xC1
02F1C:  MOVF   xA0,W
02F1E:  SUBWF  xA4,W
02F20:  MOVWF  00
02F22:  MOVF   xA1,W
02F24:  SUBWFB xA5,W
02F26:  MOVWF  03
02F28:  MOVFF  00,1C2
02F2C:  MOVWF  xC3
02F2E:  MOVF   x9E,W
02F30:  SUBWF  xA6,W
02F32:  MOVWF  00
02F34:  MOVF   x9F,W
02F36:  SUBWFB xA7,W
02F38:  MOVWF  03
02F3A:  MOVFF  00,1C4
02F3E:  MOVWF  xC5
02F40:  MOVF   xA0,W
02F42:  SUBWF  xA8,W
02F44:  MOVWF  00
02F46:  MOVF   xA1,W
02F48:  SUBWFB xA9,W
02F4A:  MOVWF  03
02F4C:  MOVFF  00,1C6
02F50:  MOVWF  xC7
02F52:  MOVF   xA2,W
02F54:  SUBWF  xA6,W
02F56:  MOVWF  00
02F58:  MOVF   xA3,W
02F5A:  SUBWFB xA7,W
02F5C:  MOVFF  00,1C8
02F60:  MOVWF  xC9
02F62:  MOVF   xA4,W
02F64:  SUBWF  xA8,W
02F66:  MOVWF  00
02F68:  MOVF   xA5,W
02F6A:  SUBWFB xA9,W
02F6C:  MOVFF  00,1CA
02F70:  MOVWF  xCB
02F72:  CLRF   xCF
02F74:  CLRF   xCE
02F76:  CLRF   xCD
02F78:  CLRF   xCC
02F7A:  CLRF   xD3
02F7C:  CLRF   xD2
02F7E:  CLRF   xD1
02F80:  CLRF   xD0
.................... 
....................     // For upper part of triangle, find scanline crossings for segments
....................     // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
....................     // is included here (and second loop will be skipped, avoiding a /0
....................     // error there), otherwise scanline y1 is skipped here and handled
....................     // in the second loop...which also avoids a /0 error here if y0=y1
....................     // (flat-topped triangle).
....................     if(y1 == y2) last = y1;   // Include y1 scanline
02F82:  MOVF   xA8,W
02F84:  SUBWF  xA4,W
02F86:  BNZ   2F98
02F88:  MOVF   xA9,W
02F8A:  SUBWF  xA5,W
02F8C:  BNZ   2F98
02F8E:  MOVFF  1A5,1B3
02F92:  MOVFF  1A4,1B2
02F96:  BRA    2FA8
....................     else         last = y1-1; // Skip it
02F98:  MOVLW  01
02F9A:  SUBWF  xA4,W
02F9C:  MOVWF  00
02F9E:  MOVLW  00
02FA0:  SUBWFB xA5,W
02FA2:  MOVFF  00,1B2
02FA6:  MOVWF  xB3
.................... 
....................     for(y=y0; y<=last; y++) {
02FA8:  MOVFF  1A1,1B1
02FAC:  MOVFF  1A0,1B0
02FB0:  BTFSS  xB1.7
02FB2:  BRA    2FBA
02FB4:  BTFSS  xB3.7
02FB6:  BRA    2FD0
02FB8:  BRA    2FBE
02FBA:  BTFSC  xB3.7
02FBC:  BRA    3148
02FBE:  MOVF   xB1,W
02FC0:  SUBWF  xB3,W
02FC2:  BTFSS  FD8.0
02FC4:  BRA    3148
02FC6:  BNZ   2FD0
02FC8:  MOVF   xB0,W
02FCA:  SUBWF  xB2,W
02FCC:  BTFSS  FD8.0
02FCE:  BRA    3148
....................         a   = x0 + sa / dy01;
02FD0:  MOVFF  1C2,00
02FD4:  MOVFF  1C3,01
02FD8:  CLRF   02
02FDA:  CLRF   03
02FDC:  BTFSS  01.7
02FDE:  BRA    2FE4
02FE0:  DECF   02,F
02FE2:  DECF   03,F
02FE4:  MOVFF  03,1DB
02FE8:  MOVFF  02,1DA
02FEC:  MOVFF  01,1D9
02FF0:  MOVFF  00,1D8
02FF4:  BCF    FD8.1
02FF6:  MOVFF  1CF,1DF
02FFA:  MOVFF  1CE,1DE
02FFE:  MOVFF  1CD,1DD
03002:  MOVFF  1CC,1DC
03006:  MOVFF  03,1E3
0300A:  MOVFF  02,1E2
0300E:  MOVFF  01,1E1
03012:  MOVFF  00,1E0
03016:  MOVLB  0
03018:  RCALL  2CAA
0301A:  MOVLB  1
0301C:  MOVF   x9E,W
0301E:  ADDWF  00,F
03020:  MOVF   x9F,W
03022:  ADDWFC 01,F
03024:  MOVLW  00
03026:  ADDWFC 02,F
03028:  ADDWFC 03,F
0302A:  MOVFF  01,1AD
0302E:  MOVFF  00,1AC
....................         b   = x0 + sb / dy02;
03032:  MOVFF  1C6,00
03036:  MOVFF  1C7,01
0303A:  CLRF   02
0303C:  CLRF   03
0303E:  BTFSS  01.7
03040:  BRA    3046
03042:  DECF   02,F
03044:  DECF   03,F
03046:  MOVFF  03,1DB
0304A:  MOVFF  02,1DA
0304E:  MOVFF  01,1D9
03052:  MOVFF  00,1D8
03056:  BCF    FD8.1
03058:  MOVFF  1D3,1DF
0305C:  MOVFF  1D2,1DE
03060:  MOVFF  1D1,1DD
03064:  MOVFF  1D0,1DC
03068:  MOVFF  03,1E3
0306C:  MOVFF  02,1E2
03070:  MOVFF  01,1E1
03074:  MOVFF  00,1E0
03078:  MOVLB  0
0307A:  RCALL  2CAA
0307C:  MOVLB  1
0307E:  MOVF   x9E,W
03080:  ADDWF  00,F
03082:  MOVF   x9F,W
03084:  ADDWFC 01,F
03086:  MOVLW  00
03088:  ADDWFC 02,F
0308A:  ADDWFC 03,F
0308C:  MOVFF  01,1AF
03090:  MOVFF  00,1AE
....................         sa += dx01;
03094:  MOVFF  1C0,00
03098:  MOVFF  1C1,01
0309C:  CLRF   02
0309E:  CLRF   03
030A0:  BTFSS  01.7
030A2:  BRA    30A8
030A4:  DECF   02,F
030A6:  DECF   03,F
030A8:  MOVF   00,W
030AA:  ADDWF  xCC,F
030AC:  MOVF   01,W
030AE:  ADDWFC xCD,F
030B0:  MOVF   02,W
030B2:  ADDWFC xCE,F
030B4:  MOVF   03,W
030B6:  ADDWFC xCF,F
....................         sb += dx02;
030B8:  MOVFF  1C4,00
030BC:  MOVFF  1C5,01
030C0:  CLRF   02
030C2:  CLRF   03
030C4:  BTFSS  01.7
030C6:  BRA    30CC
030C8:  DECF   02,F
030CA:  DECF   03,F
030CC:  MOVF   00,W
030CE:  ADDWF  xD0,F
030D0:  MOVF   01,W
030D2:  ADDWFC xD1,F
030D4:  MOVF   02,W
030D6:  ADDWFC xD2,F
030D8:  MOVF   03,W
030DA:  ADDWFC xD3,F
....................         /* longhand:
....................         a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
....................         b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
....................         */
....................         if(a > b) _swap_int16_t(a,b);
030DC:  BTFSS  xAF.7
030DE:  BRA    30E6
030E0:  BTFSS  xAD.7
030E2:  BRA    30F8
030E4:  BRA    30EA
030E6:  BTFSC  xAD.7
030E8:  BRA    3110
030EA:  MOVF   xAF,W
030EC:  SUBWF  xAD,W
030EE:  BNC   3110
030F0:  BNZ   30F8
030F2:  MOVF   xAC,W
030F4:  SUBWF  xAE,W
030F6:  BC    3110
030F8:  MOVFF  1AD,1D5
030FC:  MOVFF  1AC,1D4
03100:  MOVFF  1AF,1AD
03104:  MOVFF  1AE,1AC
03108:  MOVFF  1D5,1AF
0310C:  MOVFF  1D4,1AE
....................         display_drawHLine(a, y, b-a+1, color);
03110:  MOVF   xAC,W
03112:  SUBWF  xAE,W
03114:  MOVWF  xD8
03116:  MOVF   xAD,W
03118:  SUBWFB xAF,W
0311A:  MOVWF  xD9
0311C:  MOVLW  01
0311E:  ADDWF  xD8,F
03120:  MOVLW  00
03122:  ADDWFC xD9,F
03124:  MOVFF  1AC,1DA
03128:  MOVFF  1B0,1DB
0312C:  MOVFF  1D8,1DC
03130:  MOVFF  1AB,1DE
03134:  MOVFF  1AA,1DD
03138:  MOVLB  0
0313A:  CALL   16BA
0313E:  MOVLB  1
03140:  INCF   xB0,F
03142:  BTFSC  FD8.2
03144:  INCF   xB1,F
03146:  BRA    2FB0
....................     }
.................... 
....................     // For lower part of triangle, find scanline crossings for segments
....................     // 0-2 and 1-2.  This loop is skipped if y1=y2.
....................     sa = dx12 * (y - y1);
03148:  MOVF   xA4,W
0314A:  SUBWF  xB0,W
0314C:  MOVWF  00
0314E:  MOVF   xA5,W
03150:  SUBWFB xB1,W
03152:  MOVWF  03
03154:  MOVFF  00,1D8
03158:  MOVWF  xD9
0315A:  MOVFF  1C9,1DB
0315E:  MOVFF  1C8,1DA
03162:  MOVWF  xDD
03164:  MOVFF  00,1DC
03168:  MOVLB  0
0316A:  CALL   1E0A
0316E:  MOVFF  02,03
03172:  MOVFF  01,00
03176:  MOVFF  02,01
0317A:  CLRF   02
0317C:  CLRF   03
0317E:  BTFSS  01.7
03180:  BRA    3186
03182:  DECF   02,F
03184:  DECF   03,F
03186:  MOVFF  03,1CF
0318A:  MOVFF  02,1CE
0318E:  MOVFF  01,1CD
03192:  MOVFF  00,1CC
....................     sb = dx02 * (y - y0);
03196:  MOVLB  1
03198:  MOVF   xA0,W
0319A:  SUBWF  xB0,W
0319C:  MOVWF  00
0319E:  MOVF   xA1,W
031A0:  SUBWFB xB1,W
031A2:  MOVWF  03
031A4:  MOVFF  00,1D8
031A8:  MOVWF  xD9
031AA:  MOVFF  1C5,1DB
031AE:  MOVFF  1C4,1DA
031B2:  MOVWF  xDD
031B4:  MOVFF  00,1DC
031B8:  MOVLB  0
031BA:  CALL   1E0A
031BE:  MOVFF  02,03
031C2:  MOVFF  01,00
031C6:  MOVFF  02,01
031CA:  CLRF   02
031CC:  CLRF   03
031CE:  BTFSS  01.7
031D0:  BRA    31D6
031D2:  DECF   02,F
031D4:  DECF   03,F
031D6:  MOVFF  03,1D3
031DA:  MOVFF  02,1D2
031DE:  MOVFF  01,1D1
031E2:  MOVFF  00,1D0
....................     for(; y<=y2; y++) {
031E6:  MOVLB  1
031E8:  BTFSC  xB1.7
031EA:  BRA    31FE
031EC:  MOVF   xB1,W
031EE:  SUBWF  xA9,W
031F0:  BTFSS  FD8.0
031F2:  BRA    3376
031F4:  BNZ   31FE
031F6:  MOVF   xB0,W
031F8:  SUBWF  xA8,W
031FA:  BTFSS  FD8.0
031FC:  BRA    3376
....................         a   = x1 + sa / dy12;
031FE:  MOVFF  1CA,00
03202:  MOVFF  1CB,01
03206:  CLRF   02
03208:  CLRF   03
0320A:  BTFSS  01.7
0320C:  BRA    3212
0320E:  DECF   02,F
03210:  DECF   03,F
03212:  MOVFF  03,1DB
03216:  MOVFF  02,1DA
0321A:  MOVFF  01,1D9
0321E:  MOVFF  00,1D8
03222:  BCF    FD8.1
03224:  MOVFF  1CF,1DF
03228:  MOVFF  1CE,1DE
0322C:  MOVFF  1CD,1DD
03230:  MOVFF  1CC,1DC
03234:  MOVFF  03,1E3
03238:  MOVFF  02,1E2
0323C:  MOVFF  01,1E1
03240:  MOVFF  00,1E0
03244:  MOVLB  0
03246:  RCALL  2CAA
03248:  MOVLB  1
0324A:  MOVF   xA2,W
0324C:  ADDWF  00,F
0324E:  MOVF   xA3,W
03250:  ADDWFC 01,F
03252:  MOVLW  00
03254:  ADDWFC 02,F
03256:  ADDWFC 03,F
03258:  MOVFF  01,1AD
0325C:  MOVFF  00,1AC
....................         b   = x0 + sb / dy02;
03260:  MOVFF  1C6,00
03264:  MOVFF  1C7,01
03268:  CLRF   02
0326A:  CLRF   03
0326C:  BTFSS  01.7
0326E:  BRA    3274
03270:  DECF   02,F
03272:  DECF   03,F
03274:  MOVFF  03,1DB
03278:  MOVFF  02,1DA
0327C:  MOVFF  01,1D9
03280:  MOVFF  00,1D8
03284:  BCF    FD8.1
03286:  MOVFF  1D3,1DF
0328A:  MOVFF  1D2,1DE
0328E:  MOVFF  1D1,1DD
03292:  MOVFF  1D0,1DC
03296:  MOVFF  03,1E3
0329A:  MOVFF  02,1E2
0329E:  MOVFF  01,1E1
032A2:  MOVFF  00,1E0
032A6:  MOVLB  0
032A8:  RCALL  2CAA
032AA:  MOVLB  1
032AC:  MOVF   x9E,W
032AE:  ADDWF  00,F
032B0:  MOVF   x9F,W
032B2:  ADDWFC 01,F
032B4:  MOVLW  00
032B6:  ADDWFC 02,F
032B8:  ADDWFC 03,F
032BA:  MOVFF  01,1AF
032BE:  MOVFF  00,1AE
....................         sa += dx12;
032C2:  MOVFF  1C8,00
032C6:  MOVFF  1C9,01
032CA:  CLRF   02
032CC:  CLRF   03
032CE:  BTFSS  01.7
032D0:  BRA    32D6
032D2:  DECF   02,F
032D4:  DECF   03,F
032D6:  MOVF   00,W
032D8:  ADDWF  xCC,F
032DA:  MOVF   01,W
032DC:  ADDWFC xCD,F
032DE:  MOVF   02,W
032E0:  ADDWFC xCE,F
032E2:  MOVF   03,W
032E4:  ADDWFC xCF,F
....................         sb += dx02;
032E6:  MOVFF  1C4,00
032EA:  MOVFF  1C5,01
032EE:  CLRF   02
032F0:  CLRF   03
032F2:  BTFSS  01.7
032F4:  BRA    32FA
032F6:  DECF   02,F
032F8:  DECF   03,F
032FA:  MOVF   00,W
032FC:  ADDWF  xD0,F
032FE:  MOVF   01,W
03300:  ADDWFC xD1,F
03302:  MOVF   02,W
03304:  ADDWFC xD2,F
03306:  MOVF   03,W
03308:  ADDWFC xD3,F
....................         /* longhand:
....................         a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
....................         b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
....................         */
....................         if(a > b) _swap_int16_t(a,b);
0330A:  BTFSS  xAF.7
0330C:  BRA    3314
0330E:  BTFSS  xAD.7
03310:  BRA    3326
03312:  BRA    3318
03314:  BTFSC  xAD.7
03316:  BRA    333E
03318:  MOVF   xAF,W
0331A:  SUBWF  xAD,W
0331C:  BNC   333E
0331E:  BNZ   3326
03320:  MOVF   xAC,W
03322:  SUBWF  xAE,W
03324:  BC    333E
03326:  MOVFF  1AD,1D7
0332A:  MOVFF  1AC,1D6
0332E:  MOVFF  1AF,1AD
03332:  MOVFF  1AE,1AC
03336:  MOVFF  1D7,1AF
0333A:  MOVFF  1D6,1AE
....................         display_drawHLine(a, y, b-a+1, color);
0333E:  MOVF   xAC,W
03340:  SUBWF  xAE,W
03342:  MOVWF  xD8
03344:  MOVF   xAD,W
03346:  SUBWFB xAF,W
03348:  MOVWF  xD9
0334A:  MOVLW  01
0334C:  ADDWF  xD8,F
0334E:  MOVLW  00
03350:  ADDWFC xD9,F
03352:  MOVFF  1AC,1DA
03356:  MOVFF  1B0,1DB
0335A:  MOVFF  1D8,1DC
0335E:  MOVFF  1AB,1DE
03362:  MOVFF  1AA,1DD
03366:  MOVLB  0
03368:  CALL   16BA
0336C:  MOVLB  1
0336E:  INCF   xB0,F
03370:  BTFSC  FD8.2
03372:  INCF   xB1,F
03374:  BRA    31E8
03376:  MOVLB  0
....................     }
03378:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Print one byte/character of data
....................     @param  c  The 8-bit ascii character to write
.................... */
.................... /**************************************************************************/
.................... void display_print(uint8_t c) {
.................... 
....................   if (c == ' ' && cursor_x == 0 && wrap)
*
00C94:  MOVLB  1
00C96:  MOVF   xB2,W
00C98:  SUBLW  20
00C9A:  BNZ   0CAA
00C9C:  MOVF   24,F
00C9E:  BNZ   0CAA
00CA0:  MOVF   25,F
00CA2:  BNZ   0CAA
00CA4:  BTFSS  2D.0
00CA6:  BRA    0CAA
....................     return;
00CA8:  BRA    0F2A
....................   if(c == '\r') {
00CAA:  MOVF   xB2,W
00CAC:  SUBLW  0D
00CAE:  BNZ   0CB6
....................     cursor_x = 0;
00CB0:  CLRF   25
00CB2:  CLRF   24
....................     return;
00CB4:  BRA    0F2A
....................   }
....................   if(c == '\n') {
00CB6:  MOVF   xB2,W
00CB8:  SUBLW  0A
00CBA:  BNZ   0CCA
....................     cursor_y += textsize * 8;
00CBC:  MOVF   2C,W
00CBE:  MULLW  08
00CC0:  MOVF   FF3,W
00CC2:  ADDWF  26,F
00CC4:  MOVLW  00
00CC6:  ADDWFC 27,F
....................     return;
00CC8:  BRA    0F2A
....................   }
.................... 
....................   for(uint8_t i = 0; i < 5; i++ ) {
00CCA:  CLRF   xB3
00CCC:  MOVF   xB3,W
00CCE:  SUBLW  04
00CD0:  BTFSS  FD8.0
00CD2:  BRA    0E1A
....................     uint8_t line = font[c][i];
00CD4:  CLRF   xCC
00CD6:  MOVFF  1B2,1CB
00CDA:  CLRF   xCE
00CDC:  MOVLW  05
00CDE:  MOVWF  xCD
00CE0:  MOVLB  0
00CE2:  RCALL  0A9E
00CE4:  MOVFF  02,1B7
00CE8:  MOVFF  01,1B6
00CEC:  MOVLB  1
00CEE:  MOVF   xB3,W
00CF0:  ADDWF  01,W
00CF2:  MOVWF  01
00CF4:  MOVLW  00
00CF6:  ADDWFC 02,W
00CF8:  MOVWF  03
00CFA:  MOVF   01,W
00CFC:  MOVFF  03,FF7
00D00:  MOVLB  0
00D02:  CALL   00AE
00D06:  MOVFF  FE8,1B4
....................     for(uint8_t j = 0; j < 8; j++, line >>= 1) {
00D0A:  MOVLB  1
00D0C:  CLRF   xB5
00D0E:  MOVF   xB5,W
00D10:  SUBLW  07
00D12:  BTFSS  FD8.0
00D14:  BRA    0E16
....................       if(line & 1) {
00D16:  BTFSS  xB4.0
00D18:  BRA    0D8E
....................         if(textsize == 1)
00D1A:  DECFSZ 2C,W
00D1C:  BRA    0D4E
....................           display_drawPixel(cursor_x + i, cursor_y + j, textcolor);
00D1E:  MOVF   xB3,W
00D20:  ADDWF  24,W
00D22:  MOVWF  xB6
00D24:  MOVLW  00
00D26:  ADDWFC 25,W
00D28:  MOVWF  xB7
00D2A:  MOVF   xB5,W
00D2C:  ADDWF  26,W
00D2E:  MOVWF  xB8
00D30:  MOVLW  00
00D32:  ADDWFC 27,W
00D34:  MOVWF  xB9
00D36:  MOVFF  1B6,1DC
00D3A:  MOVFF  1B8,1DD
00D3E:  MOVFF  29,1DF
00D42:  MOVFF  28,1DE
00D46:  MOVLB  0
00D48:  RCALL  0B34
00D4A:  BRA    0D8A
00D4C:  MOVLB  1
....................         else
....................           display_fillRect(cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textcolor);
00D4E:  MOVF   xB3,W
00D50:  MULWF  2C
00D52:  MOVF   FF3,W
00D54:  ADDWF  24,W
00D56:  MOVWF  xB6
00D58:  MOVLW  00
00D5A:  ADDWFC 25,W
00D5C:  MOVWF  xB7
00D5E:  MOVF   xB5,W
00D60:  MULWF  2C
00D62:  MOVF   FF3,W
00D64:  ADDWF  26,W
00D66:  MOVWF  xB8
00D68:  MOVLW  00
00D6A:  ADDWFC 27,W
00D6C:  MOVWF  xB9
00D6E:  MOVFF  1B6,1BA
00D72:  MOVFF  1B8,1BB
00D76:  MOVFF  2C,1BC
00D7A:  MOVFF  2C,1BD
00D7E:  MOVFF  29,1BF
00D82:  MOVFF  28,1BE
00D86:  MOVLB  0
00D88:  RCALL  0B7E
....................       } 
00D8A:  BRA    0E0A
00D8C:  MOVLB  1
....................       else 
....................         if(textbgcolor != textcolor) {
00D8E:  MOVF   28,W
00D90:  SUBWF  2A,W
00D92:  BNZ   0D9A
00D94:  MOVF   29,W
00D96:  SUBWF  2B,W
00D98:  BZ    0E0C
....................           if(textsize == 1)
00D9A:  DECFSZ 2C,W
00D9C:  BRA    0DCE
....................             display_drawPixel(cursor_x + i, cursor_y + j, textbgcolor);
00D9E:  MOVF   xB3,W
00DA0:  ADDWF  24,W
00DA2:  MOVWF  xB6
00DA4:  MOVLW  00
00DA6:  ADDWFC 25,W
00DA8:  MOVWF  xB7
00DAA:  MOVF   xB5,W
00DAC:  ADDWF  26,W
00DAE:  MOVWF  xB8
00DB0:  MOVLW  00
00DB2:  ADDWFC 27,W
00DB4:  MOVWF  xB9
00DB6:  MOVFF  1B6,1DC
00DBA:  MOVFF  1B8,1DD
00DBE:  MOVFF  2B,1DF
00DC2:  MOVFF  2A,1DE
00DC6:  MOVLB  0
00DC8:  RCALL  0B34
00DCA:  BRA    0E0A
00DCC:  MOVLB  1
....................           else
....................             display_fillRect(cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textbgcolor);
00DCE:  MOVF   xB3,W
00DD0:  MULWF  2C
00DD2:  MOVF   FF3,W
00DD4:  ADDWF  24,W
00DD6:  MOVWF  xB6
00DD8:  MOVLW  00
00DDA:  ADDWFC 25,W
00DDC:  MOVWF  xB7
00DDE:  MOVF   xB5,W
00DE0:  MULWF  2C
00DE2:  MOVF   FF3,W
00DE4:  ADDWF  26,W
00DE6:  MOVWF  xB8
00DE8:  MOVLW  00
00DEA:  ADDWFC 27,W
00DEC:  MOVWF  xB9
00DEE:  MOVFF  1B6,1BA
00DF2:  MOVFF  1B8,1BB
00DF6:  MOVFF  2C,1BC
00DFA:  MOVFF  2C,1BD
00DFE:  MOVFF  2B,1BF
00E02:  MOVFF  2A,1BE
00E06:  MOVLB  0
00E08:  RCALL  0B7E
00E0A:  MOVLB  1
....................         }
00E0C:  MOVF   xB5,W
00E0E:  INCF   xB5,F
00E10:  BCF    FD8.0
00E12:  RRCF   xB4,F
00E14:  BRA    0D0E
....................     }
00E16:  INCF   xB3,F
00E18:  BRA    0CCC
....................   }
.................... 
....................   if(textbgcolor != textcolor) {  // If opaque, draw vertical line for last column
00E1A:  MOVF   28,W
00E1C:  SUBWF  2A,W
00E1E:  BNZ   0E26
00E20:  MOVF   29,W
00E22:  SUBWF  2B,W
00E24:  BZ    0E84
....................     if(textsize == 1)  display_drawVLine(cursor_x + 5, cursor_y, 8, textbgcolor);
00E26:  DECFSZ 2C,W
00E28:  BRA    0E52
00E2A:  MOVLW  05
00E2C:  ADDWF  24,W
00E2E:  MOVWF  xB6
00E30:  MOVLW  00
00E32:  ADDWFC 25,W
00E34:  MOVWF  xB7
00E36:  MOVFF  1B6,1D1
00E3A:  MOVFF  26,1D2
00E3E:  MOVLW  08
00E40:  MOVWF  xD3
00E42:  MOVFF  2B,1D5
00E46:  MOVFF  2A,1D4
00E4A:  MOVLB  0
00E4C:  RCALL  0C24
00E4E:  BRA    0E82
00E50:  MOVLB  1
....................     else               display_fillRect(cursor_x + 5 * textsize, cursor_y, textsize, 8 * textsize, textbgcolor);
00E52:  MOVF   2C,W
00E54:  MULLW  05
00E56:  MOVF   FF3,W
00E58:  ADDWF  24,W
00E5A:  MOVWF  xB6
00E5C:  MOVLW  00
00E5E:  ADDWFC 25,W
00E60:  MOVWF  xB7
00E62:  MOVF   2C,W
00E64:  MULLW  08
00E66:  MOVFF  FF3,1BD
00E6A:  MOVFF  1B6,1BA
00E6E:  MOVFF  26,1BB
00E72:  MOVFF  2C,1BC
00E76:  MOVFF  2B,1BF
00E7A:  MOVFF  2A,1BE
00E7E:  MOVLB  0
00E80:  RCALL  0B7E
00E82:  MOVLB  1
....................   }
.................... 
....................   cursor_x += textsize * 6;
00E84:  MOVF   2C,W
00E86:  MULLW  06
00E88:  MOVF   FF3,W
00E8A:  ADDWF  24,F
00E8C:  MOVLW  00
00E8E:  ADDWFC 25,F
.................... 
....................   if( cursor_x > ((uint16_t)display_width + textsize * 6) )
00E90:  CLRF   xB7
00E92:  MOVFF  1D,1B6
00E96:  MOVF   2C,W
00E98:  MULLW  06
00E9A:  MOVF   FF3,W
00E9C:  ADDWF  1D,W
00E9E:  MOVWF  01
00EA0:  MOVLW  00
00EA2:  ADDWFC xB7,W
00EA4:  MOVWF  03
00EA6:  MOVF   01,W
00EA8:  BTFSC  25.7
00EAA:  BRA    0EC4
00EAC:  MOVF   03,W
00EAE:  SUBWF  25,W
00EB0:  BNC   0EC4
00EB2:  BNZ   0EBA
00EB4:  MOVF   24,W
00EB6:  SUBWF  01,W
00EB8:  BC    0EC4
....................     cursor_x = display_width;
00EBA:  CLRF   03
00EBC:  MOVFF  1D,24
00EC0:  MOVFF  03,25
.................... 
....................   if (wrap && (cursor_x + (textsize * 5)) > display_width)
00EC4:  BTFSS  2D.0
00EC6:  BRA    0F2A
00EC8:  MOVF   2C,W
00ECA:  MULLW  05
00ECC:  MOVF   FF3,W
00ECE:  ADDWF  24,W
00ED0:  MOVWF  xB6
00ED2:  MOVLW  00
00ED4:  ADDWFC 25,W
00ED6:  MOVWF  xB7
00ED8:  BTFSC  FE8.7
00EDA:  BRA    0F2A
00EDC:  MOVF   xB7,F
00EDE:  BNZ   0EE6
00EE0:  MOVF   xB6,W
00EE2:  SUBWF  1D,W
00EE4:  BC    0F2A
....................   {
....................     cursor_x = 0;
00EE6:  CLRF   25
00EE8:  CLRF   24
....................     cursor_y += textsize * 8;
00EEA:  MOVF   2C,W
00EEC:  MULLW  08
00EEE:  MOVF   FF3,W
00EF0:  ADDWF  26,F
00EF2:  MOVLW  00
00EF4:  ADDWFC 27,F
....................     if( cursor_y > ((uint16_t)display_height + textsize * 8) )
00EF6:  CLRF   xB7
00EF8:  MOVFF  1E,1B6
00EFC:  MOVF   2C,W
00EFE:  MULLW  08
00F00:  MOVF   FF3,W
00F02:  ADDWF  1E,W
00F04:  MOVWF  01
00F06:  MOVLW  00
00F08:  ADDWFC xB7,W
00F0A:  MOVWF  03
00F0C:  MOVF   01,W
00F0E:  BTFSC  27.7
00F10:  BRA    0F2A
00F12:  MOVF   03,W
00F14:  SUBWF  27,W
00F16:  BNC   0F2A
00F18:  BNZ   0F20
00F1A:  MOVF   26,W
00F1C:  SUBWF  01,W
00F1E:  BC    0F2A
....................       cursor_y = display_height;
00F20:  CLRF   03
00F22:  MOVFF  1E,26
00F26:  MOVFF  03,27
....................   }
00F2A:  MOVLB  0
00F2C:  RETURN 0
.................... }
.................... 
.................... // print custom char (dimension: 7x5 or 8x5 pixel)
.................... void display_customChar(rom uint8_t *c) {
.................... 
....................   for(uint8_t i = 0; i < 5; i++ ) {
....................     uint8_t line = c[i];
....................     for(uint8_t j = 0; j < 8; j++, line >>= 1) {
....................       if(line & 1) {
....................         if(textsize == 1)
....................           display_drawPixel(cursor_x + i, cursor_y + j, textcolor);
....................         else
....................           display_fillRect(cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textcolor);
....................       } 
....................       else 
....................         if(textbgcolor != textcolor) {
....................           if(textsize == 1)
....................             display_drawPixel(cursor_x + i, cursor_y + j, textbgcolor);
....................           else
....................             display_fillRect(cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textbgcolor);
....................         }
....................     }
....................   }
.................... 
....................   if(textbgcolor != textcolor) {  // If opaque, draw vertical line for last column
....................     if(textsize == 1)  display_drawVLine(cursor_x + 5, cursor_y, 8, textbgcolor);
....................     else               display_fillRect(cursor_x + 5 * textsize, cursor_y, textsize, 8 * textsize, textbgcolor);
....................   }
.................... 
....................   cursor_x += textsize * 6;
.................... 
....................   if( cursor_x > ((uint16_t)display_width + textsize * 6) )
....................     cursor_x = display_width;
.................... 
....................   if (wrap && (cursor_x + (textsize * 5)) > display_width)
....................   {
....................     cursor_x = 0;
....................     cursor_y += textsize * 8;
....................     if( cursor_y > ((uint16_t)display_height + textsize * 8) )
....................       cursor_y = display_height;
....................   }
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief   Draw a single character
....................     @param    x   Bottom left corner x coordinate
....................     @param    y   Bottom left corner y coordinate
....................     @param    c   The 8-bit font-indexed character (likely ascii)
....................     @param    color 16-bit 5-6-5 Color to draw chraracter with
....................     @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
....................     @param    size  Font magnification level, 1 is 'original' size
.................... */
.................... /**************************************************************************/
.................... void display_drawChar(uint16_t x, uint16_t y, uint8_t c, uint16_t color, uint16_t bg,
....................      uint8_t size) {
....................   uint16_t prev_x     = cursor_x,
....................            prev_y     = cursor_y,
....................            prev_color = textcolor,
....................            prev_bg    = textbgcolor;
....................   uint8_t  prev_size  = textsize;
.................... 
....................   kursor_ayarla(x, y);
....................   display_setTextSize(size);
....................   display_setTextColor(color, bg);
....................   display_print(c);
.................... 
....................   cursor_x    = prev_x;
....................   cursor_y    = prev_y;
....................   textcolor   = prev_color;
....................   textbgcolor = prev_bg;
....................   textsize    = prev_size;
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Set text cursor location
....................     @param  x    X coordinate in pixels
....................     @param  y    Y coordinate in pixels
.................... */
.................... /**************************************************************************/
.................... void display_setCursor(uint16_t x, uint16_t y) {
....................     cursor_x = x;
*
00A6E:  MOVFF  1A5,25
00A72:  MOVFF  1A4,24
....................     cursor_y = y;
00A76:  MOVFF  1A7,27
00A7A:  MOVFF  1A6,26
00A7E:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief  Get text cursor X location
....................     @returns    X coordinate in pixels
.................... */
.................... /**************************************************************************/
.................... uint16_t display_getCursorX(void) {
....................     return cursor_x;
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief      Get text cursor Y location
....................     @returns    Y coordinate in pixels
.................... */
.................... /**************************************************************************/
.................... uint16_t display_getCursorY(void) {
....................     return cursor_y;
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
....................     @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
.................... */
.................... /**************************************************************************/
.................... void display_setTextSize(uint8_t s) {
....................     textsize = (s > 0) ? s : 1;
*
00F98:  MOVLB  1
00F9A:  MOVF   xA2,F
00F9C:  BZ    0FA2
00F9E:  MOVF   xA2,W
00FA0:  BRA    0FA4
00FA2:  MOVLW  01
00FA4:  MOVWF  2C
00FA6:  MOVLB  0
00FA8:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief   Set text font color with custom background color
....................     @param   c   16-bit 5-6-5 Color to draw text with
....................     @param   b   16-bit 5-6-5 Color to draw background/fill with
.................... */
.................... /**************************************************************************/
.................... void display_setTextColor(uint16_t c, uint16_t b) {
....................     textcolor   = c;
*
00F84:  MOVFF  1A3,29
00F88:  MOVFF  1A2,28
....................     textbgcolor = b;
00F8C:  MOVFF  1A5,2B
00F90:  MOVFF  1A4,2A
00F94:  GOTO   14D6 (RETURN)
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief   Set text font color with transparant background
....................     @param   c   16-bit 5-6-5 Color to draw text with
.................... */
.................... /**************************************************************************/
.................... void display_setTextColor(uint16_t c) {
....................   textcolor = textbgcolor = c;
*
00A80:  MOVFF  1A5,2B
00A84:  MOVFF  1A4,2A
00A88:  MOVFF  2B,29
00A8C:  MOVFF  2A,28
00A90:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief      Whether text that is too long should 'wrap' around to the next line.
....................     @param  w Set true for wrapping, false for clipping
.................... */
.................... /**************************************************************************/
.................... void display_setTextWrap(bool w) {
....................     wrap = w;
00A92:  BCF    2D.0
00A94:  MOVLB  1
00A96:  BTFSC  xA4.0
00A98:  BSF    2D.0
00A9A:  MOVLB  0
00A9C:  RETURN 0
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief      Get rotation setting for display
....................     @returns    0 thru 3 corresponding to 4 cardinal rotations
.................... */
.................... /**************************************************************************/
.................... uint8_t display_getRotation(void) {
....................     return rotation;
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief      Get width of the display, accounting for the current rotation
....................     @returns    Width in pixels
.................... */
.................... /**************************************************************************/
.................... uint16_t display_getWidth(void) {
....................     return display_width;
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief      Get height of the display, accounting for the current rotation
....................     @returns    Height in pixels
.................... */
.................... /**************************************************************************/
.................... uint16_t display_getHeight(void) {
....................     return display_height;
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................     @brief   Given 8-bit red, green and blue values, return a 'packed'
....................              16-bit color value in '565' RGB format (5 bits red, 6 bits
....................              green, 5 bits blue). This is just a mathematical operation,
....................              no hardware is touched.
....................     @param   red    8-bit red brightnesss (0 = off, 255 = max).
....................     @param   green  8-bit green brightnesss (0 = off, 255 = max).
....................     @param   blue   8-bit blue brightnesss (0 = off, 255 = max).
....................     @return  'Packed' 16-bit color value (565 format).
.................... */
.................... /**************************************************************************/
.................... uint16_t display_color565(uint8_t red, uint8_t green, uint8_t blue) {
....................     return ((uint16_t)(red & 0xF8) << 8) | ((uint16_t)(green & 0xFC) << 3) | (blue >> 3);
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief     Draw a ROM-resident 1-bit image at the specified (x,y) position,
....................               using the specified foreground color (unset bits are transparent).
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    bitmap  byte array with monochrome bitmap
....................     @param    w   Width of bitmap in pixels
....................     @param    h   Hieght of bitmap in pixels
....................     @param    color 16-bit 5-6-5 Color to draw with
.................... */
.................... /**************************************************************************/
.................... void display_drawBitmapV1(uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h,
....................      uint16_t color) {
....................   for( uint16_t i = 0; i < h/8; i++)
....................   {    
....................     for( uint16_t j = 0; j < w * 8; j++)
....................     {      
....................       if( bitmap[j/8 + i*w] & (1 << (j % 8)) )
....................         display_drawPixel(x + j/8, y + i*8 + (j % 8), color);
....................     }
....................   }
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief     Draw a ROM-resident 1-bit image at the specified (x,y) position,
....................               using the specified foreground (for set bits) and background (unset bits) colors.
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    bitmap  byte array with monochrome bitmap
....................     @param    w   Width of bitmap in pixels
....................     @param    h   Hieght of bitmap in pixels
....................     @param    color 16-bit 5-6-5 Color to draw pixels with
....................     @param    bg 16-bit 5-6-5 Color to draw background with
.................... */
.................... /**************************************************************************/
.................... void display_drawBitmapV1_bg(uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h,
....................      uint16_t color, uint16_t bg) {
....................   for( uint16_t i = 0; i < h/8; i++)
....................   {    
....................     for( uint16_t j = 0; j < w * 8; j++)
....................     {      
....................       if( bitmap[j/8 + i*w] & (1 << (j % 8)) )
....................         display_drawPixel(x + j/8, y + i*8 + (j % 8), color);
....................       else
....................         display_drawPixel(x + j/8, y + i*8 + (j % 8), bg);
....................     }
....................   }
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief     Draw a ROM-resident 1-bit image at the specified (x,y) position,
....................               using the specified foreground color (unset bits are transparent).
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    bitmap  byte array with monochrome bitmap
....................     @param    w   Width of bitmap in pixels
....................     @param    h   Hieght of bitmap in pixels
....................     @param    color 16-bit 5-6-5 Color to draw pixels with
.................... */
.................... /**************************************************************************/
.................... void display_drawBitmapV2(uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h,
....................   uint16_t color) {
.................... 
....................     int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
....................     uint8_t _byte = 0;
.................... 
....................     for(int16_t j=0; j<h; j++, y++) {
....................         for(int16_t i=0; i<w; i++ ) {
....................             if(i & 7) _byte <<= 1;
....................             else      _byte   = bitmap[j * byteWidth + i / 8];
....................             if(_byte & 0x80)
....................               display_drawPixel(x+i, y, color);
....................         }
....................     }
.................... }
.................... 
.................... /**************************************************************************/
.................... /*!
....................    @brief     Draw a ROM-resident 1-bit image at the specified (x,y) position,
....................               using the specified foreground (for set bits) and background (unset bits) colors.
....................     @param    x   Top left corner x coordinate
....................     @param    y   Top left corner y coordinate
....................     @param    bitmap  byte array with monochrome bitmap
....................     @param    w   Width of bitmap in pixels
....................     @param    h   Hieght of bitmap in pixels
....................     @param    color 16-bit 5-6-5 Color to draw pixels with
....................     @param    bg 16-bit 5-6-5 Color to draw background with
.................... */
.................... /**************************************************************************/
.................... void display_drawBitmapV2_bg(uint16_t x, uint16_t y, rom uint8_t *bitmap, uint16_t w, uint16_t h,
....................   uint16_t color, uint16_t bg) {
.................... 
....................     int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
....................     uint8_t _byte = 0;
.................... 
....................     for(int16_t j=0; j<h; j++, y++) {
....................         for(int16_t i=0; i<w; i++ ) {
....................             if(i & 7) _byte <<= 1;
....................             else      _byte   = bitmap[j * byteWidth + i / 8];
....................             if(_byte & 0x80)
....................               display_drawPixel(x+i, y, color);
....................             else
....................               display_drawPixel(x+i, y, bg);
....................         }
....................     }
.................... }
.................... 
.................... // end of code.
.................... 
.................... void testlines(uint16_t color) {
....................   uint8_t x, y;
....................   for (x=0; x < display_width; x+=6) {
*
01A7A:  MOVLB  1
01A7C:  CLRF   xA0
01A7E:  MOVF   1D,W
01A80:  SUBWF  xA0,W
01A82:  BC    1AB0
....................     display_drawLine(0, 0, x, display_height-1, color);
01A84:  MOVLW  01
01A86:  SUBWF  1E,W
01A88:  MOVWF  xA2
01A8A:  CLRF   xB4
01A8C:  CLRF   xB3
01A8E:  CLRF   xB6
01A90:  CLRF   xB5
01A92:  CLRF   xB8
01A94:  MOVFF  1A0,1B7
01A98:  CLRF   xBA
01A9A:  MOVWF  xB9
01A9C:  MOVFF  19F,1BC
01AA0:  MOVFF  19E,1BB
01AA4:  MOVLB  0
01AA6:  RCALL  1984
....................     delay_ms(0);
01AA8:  MOVLW  06
01AAA:  MOVLB  1
01AAC:  ADDWF  xA0,F
01AAE:  BRA    1A7E
....................   }
....................   for (y=0; y < display_height; y+=6) {
01AB0:  CLRF   xA1
01AB2:  MOVF   1E,W
01AB4:  SUBWF  xA1,W
01AB6:  BC    1AE4
....................     display_drawLine(0, 0, display_width-1, y, color);
01AB8:  MOVLW  01
01ABA:  SUBWF  1D,W
01ABC:  MOVWF  xA2
01ABE:  CLRF   xB4
01AC0:  CLRF   xB3
01AC2:  CLRF   xB6
01AC4:  CLRF   xB5
01AC6:  CLRF   xB8
01AC8:  MOVWF  xB7
01ACA:  CLRF   xBA
01ACC:  MOVFF  1A1,1B9
01AD0:  MOVFF  19F,1BC
01AD4:  MOVFF  19E,1BB
01AD8:  MOVLB  0
01ADA:  RCALL  1984
....................     delay_ms(0);
01ADC:  MOVLW  06
01ADE:  MOVLB  1
01AE0:  ADDWF  xA1,F
01AE2:  BRA    1AB2
....................   }
.................... 
....................  
....................   for (x=0; x < display_width; x+=6) {
01AE4:  CLRF   xA0
01AE6:  MOVF   1D,W
01AE8:  SUBWF  xA0,W
01AEA:  BC    1B20
....................     display_drawLine(display_width-1, 0, x, display_height-1, color);
01AEC:  MOVLW  01
01AEE:  SUBWF  1D,W
01AF0:  MOVWF  xA2
01AF2:  MOVLW  01
01AF4:  SUBWF  1E,W
01AF6:  MOVWF  xA3
01AF8:  CLRF   xB4
01AFA:  MOVFF  1A2,1B3
01AFE:  CLRF   xB6
01B00:  CLRF   xB5
01B02:  CLRF   xB8
01B04:  MOVFF  1A0,1B7
01B08:  CLRF   xBA
01B0A:  MOVWF  xB9
01B0C:  MOVFF  19F,1BC
01B10:  MOVFF  19E,1BB
01B14:  MOVLB  0
01B16:  RCALL  1984
....................     delay_ms(0);
01B18:  MOVLW  06
01B1A:  MOVLB  1
01B1C:  ADDWF  xA0,F
01B1E:  BRA    1AE6
....................   }
....................   for (y=0; y < display_height; y+=6) {
01B20:  CLRF   xA1
01B22:  MOVF   1E,W
01B24:  SUBWF  xA1,W
01B26:  BC    1B54
....................     display_drawLine(display_width-1, 0, 0, y, color);
01B28:  MOVLW  01
01B2A:  SUBWF  1D,W
01B2C:  MOVWF  xA2
01B2E:  CLRF   xB4
01B30:  MOVWF  xB3
01B32:  CLRF   xB6
01B34:  CLRF   xB5
01B36:  CLRF   xB8
01B38:  CLRF   xB7
01B3A:  CLRF   xBA
01B3C:  MOVFF  1A1,1B9
01B40:  MOVFF  19F,1BC
01B44:  MOVFF  19E,1BB
01B48:  MOVLB  0
01B4A:  RCALL  1984
....................     delay_ms(0);
01B4C:  MOVLW  06
01B4E:  MOVLB  1
01B50:  ADDWF  xA1,F
01B52:  BRA    1B22
....................   }
.................... 
....................   
....................   for (x=0; x < display_width; x+=6) {
01B54:  CLRF   xA0
01B56:  MOVF   1D,W
01B58:  SUBWF  xA0,W
01B5A:  BC    1B88
....................     display_drawLine(0, display_height-1, x, 0, color);
01B5C:  MOVLW  01
01B5E:  SUBWF  1E,W
01B60:  MOVWF  xA2
01B62:  CLRF   xB4
01B64:  CLRF   xB3
01B66:  CLRF   xB6
01B68:  MOVWF  xB5
01B6A:  CLRF   xB8
01B6C:  MOVFF  1A0,1B7
01B70:  CLRF   xBA
01B72:  CLRF   xB9
01B74:  MOVFF  19F,1BC
01B78:  MOVFF  19E,1BB
01B7C:  MOVLB  0
01B7E:  RCALL  1984
....................     delay_ms(0);
01B80:  MOVLW  06
01B82:  MOVLB  1
01B84:  ADDWF  xA0,F
01B86:  BRA    1B56
....................   }
....................   for (y=0; y < display_height; y+=6) {
01B88:  CLRF   xA1
01B8A:  MOVF   1E,W
01B8C:  SUBWF  xA1,W
01B8E:  BC    1BC4
....................     display_drawLine(0, display_height-1, display_width-1, y, color);
01B90:  MOVLW  01
01B92:  SUBWF  1E,W
01B94:  MOVWF  xA2
01B96:  MOVLW  01
01B98:  SUBWF  1D,W
01B9A:  MOVWF  xA3
01B9C:  CLRF   xB4
01B9E:  CLRF   xB3
01BA0:  CLRF   xB6
01BA2:  MOVFF  1A2,1B5
01BA6:  CLRF   xB8
01BA8:  MOVWF  xB7
01BAA:  CLRF   xBA
01BAC:  MOVFF  1A1,1B9
01BB0:  MOVFF  19F,1BC
01BB4:  MOVFF  19E,1BB
01BB8:  MOVLB  0
01BBA:  RCALL  1984
....................     delay_ms(0);
01BBC:  MOVLW  06
01BBE:  MOVLB  1
01BC0:  ADDWF  xA1,F
01BC2:  BRA    1B8A
....................   }
.................... 
....................  
....................   for (x=0; x < display_width; x+=6) {
01BC4:  CLRF   xA0
01BC6:  MOVF   1D,W
01BC8:  SUBWF  xA0,W
01BCA:  BC    1C00
....................     display_drawLine(display_width-1, display_height-1, x, 0, color);
01BCC:  MOVLW  01
01BCE:  SUBWF  1D,W
01BD0:  MOVWF  xA2
01BD2:  MOVLW  01
01BD4:  SUBWF  1E,W
01BD6:  MOVWF  xA3
01BD8:  CLRF   xB4
01BDA:  MOVFF  1A2,1B3
01BDE:  CLRF   xB6
01BE0:  MOVWF  xB5
01BE2:  CLRF   xB8
01BE4:  MOVFF  1A0,1B7
01BE8:  CLRF   xBA
01BEA:  CLRF   xB9
01BEC:  MOVFF  19F,1BC
01BF0:  MOVFF  19E,1BB
01BF4:  MOVLB  0
01BF6:  RCALL  1984
....................     delay_ms(0);
01BF8:  MOVLW  06
01BFA:  MOVLB  1
01BFC:  ADDWF  xA0,F
01BFE:  BRA    1BC6
....................   }
....................   for (y=0; y < display_height; y+=6) {
01C00:  CLRF   xA1
01C02:  MOVF   1E,W
01C04:  SUBWF  xA1,W
01C06:  BC    1C3C
....................     display_drawLine(display_width-1, display_height-1, 0, y, color);
01C08:  MOVLW  01
01C0A:  SUBWF  1D,W
01C0C:  MOVWF  xA2
01C0E:  MOVLW  01
01C10:  SUBWF  1E,W
01C12:  MOVWF  xA3
01C14:  CLRF   xB4
01C16:  MOVFF  1A2,1B3
01C1A:  CLRF   xB6
01C1C:  MOVWF  xB5
01C1E:  CLRF   xB8
01C20:  CLRF   xB7
01C22:  CLRF   xBA
01C24:  MOVFF  1A1,1B9
01C28:  MOVFF  19F,1BC
01C2C:  MOVFF  19E,1BB
01C30:  MOVLB  0
01C32:  RCALL  1984
....................     delay_ms(0);
01C34:  MOVLW  06
01C36:  MOVLB  1
01C38:  ADDWF  xA1,F
01C3A:  BRA    1C02
....................   }
01C3C:  MOVLB  0
01C3E:  GOTO   3688 (RETURN)
.................... }
.................... 
.................... void testdrawtext(char *text, uint16_t color) {
....................   display_setCursor(0, 0);
*
00F54:  MOVLB  1
00F56:  CLRF   xA5
00F58:  CLRF   xA4
00F5A:  CLRF   xA7
00F5C:  CLRF   xA6
00F5E:  MOVLB  0
00F60:  RCALL  0A6E
....................   display_setTextColor(color);
00F62:  MOVFF  1A3,1A5
00F66:  MOVFF  1A2,1A4
00F6A:  RCALL  0A80
....................   display_setTextWrap(true);
00F6C:  MOVLW  01
00F6E:  MOVLB  1
00F70:  MOVWF  xA4
00F72:  MOVLB  0
00F74:  RCALL  0A92
....................   printf(display_print, text);
00F76:  MOVFF  1A1,FEA
00F7A:  MOVFF  1A0,FE9
00F7E:  BRA    0F2E
00F80:  GOTO   3614 (RETURN)
.................... }
.................... 
.................... void testfastlines(uint16_t color1, uint16_t color2) {
....................   uint8_t x, y; 
....................   for (y=0; y < display_height; y+=5) {
*
01C42:  MOVLB  1
01C44:  CLRF   xA3
01C46:  MOVF   1E,W
01C48:  SUBWF  xA3,W
01C4A:  BC    1C6A
....................     display_drawHLine(0, y, display_width, color1);
01C4C:  CLRF   xDA
01C4E:  MOVFF  1A3,1DB
01C52:  MOVFF  1D,1DC
01C56:  MOVFF  19F,1DE
01C5A:  MOVFF  19E,1DD
01C5E:  MOVLB  0
01C60:  RCALL  16BA
01C62:  MOVLW  05
01C64:  MOVLB  1
01C66:  ADDWF  xA3,F
01C68:  BRA    1C46
....................   }
....................   for (x=0; x < display_width; x+=5) {
01C6A:  CLRF   xA2
01C6C:  MOVF   1D,W
01C6E:  SUBWF  xA2,W
01C70:  BC    1C92
....................     display_drawVLine(x, 0, display_height, color2);
01C72:  MOVFF  1A2,1D1
01C76:  CLRF   xD2
01C78:  MOVFF  1E,1D3
01C7C:  MOVFF  1A1,1D5
01C80:  MOVFF  1A0,1D4
01C84:  MOVLB  0
01C86:  CALL   0C24
01C8A:  MOVLW  05
01C8C:  MOVLB  1
01C8E:  ADDWF  xA2,F
01C90:  BRA    1C6C
....................   }
01C92:  MOVLB  0
01C94:  GOTO   36B0 (RETURN)
.................... }
.................... 
.................... void testdrawrects(uint16_t color) {
....................   uint8_t x;
.................... 
....................   for (x=0; x < display_width; x+=6) {
*
01D26:  MOVLB  1
01D28:  CLRF   xA0
01D2A:  MOVF   1D,W
01D2C:  SUBWF  xA0,W
01D2E:  BC    1D74
....................     display_drawRect(display_width/2 -x/2, display_height/2 -x/2 , x, x, color);
01D30:  BCF    FD8.0
01D32:  RRCF   1D,W
01D34:  MOVWF  xA1
01D36:  BCF    FD8.0
01D38:  RRCF   xA0,W
01D3A:  SUBWF  xA1,F
01D3C:  BCF    FD8.0
01D3E:  RRCF   1E,W
01D40:  MOVWF  xA2
01D42:  BCF    FD8.0
01D44:  RRCF   xA0,W
01D46:  SUBWF  xA2,F
01D48:  CLRF   xA6
01D4A:  MOVFF  1A1,1A5
01D4E:  CLRF   xA8
01D50:  MOVFF  1A2,1A7
01D54:  CLRF   xAA
01D56:  MOVFF  1A0,1A9
01D5A:  CLRF   xAC
01D5C:  MOVFF  1A0,1AB
01D60:  MOVFF  19F,1AE
01D64:  MOVFF  19E,1AD
01D68:  MOVLB  0
01D6A:  RCALL  1C98
01D6C:  MOVLW  06
01D6E:  MOVLB  1
01D70:  ADDWF  xA0,F
01D72:  BRA    1D2A
....................   }
01D74:  MOVLB  0
01D76:  GOTO   36D4 (RETURN)
.................... }
.................... 
.................... void testfillrects(uint16_t color1, uint16_t color2) {
....................   uint8_t x;
....................    for (x=display_width-1; x > 6; x-=6) {
01D7A:  MOVLW  01
01D7C:  SUBWF  1D,W
01D7E:  MOVLB  1
01D80:  MOVWF  xA2
01D82:  MOVF   xA2,W
01D84:  SUBLW  06
01D86:  BC    1E04
....................     display_fillRect(display_width/2 -x/2, display_height/2 -x/2 , x, x, color1);
01D88:  BCF    FD8.0
01D8A:  RRCF   1D,W
01D8C:  MOVWF  xA3
01D8E:  BCF    FD8.0
01D90:  RRCF   xA2,W
01D92:  SUBWF  xA3,F
01D94:  BCF    FD8.0
01D96:  RRCF   1E,W
01D98:  MOVWF  xA4
01D9A:  BCF    FD8.0
01D9C:  RRCF   xA2,W
01D9E:  SUBWF  xA4,F
01DA0:  MOVFF  1A3,1BA
01DA4:  MOVFF  1A4,1BB
01DA8:  MOVFF  1A2,1BC
01DAC:  MOVFF  1A2,1BD
01DB0:  MOVFF  19F,1BF
01DB4:  MOVFF  19E,1BE
01DB8:  MOVLB  0
01DBA:  CALL   0B7E
....................     display_drawRect(display_width/2 -x/2, display_height/2 -x/2 , x, x, color2);
01DBE:  BCF    FD8.0
01DC0:  RRCF   1D,W
01DC2:  MOVLB  1
01DC4:  MOVWF  xA3
01DC6:  BCF    FD8.0
01DC8:  RRCF   xA2,W
01DCA:  SUBWF  xA3,F
01DCC:  BCF    FD8.0
01DCE:  RRCF   1E,W
01DD0:  MOVWF  xA4
01DD2:  BCF    FD8.0
01DD4:  RRCF   xA2,W
01DD6:  SUBWF  xA4,F
01DD8:  CLRF   xA6
01DDA:  MOVFF  1A3,1A5
01DDE:  CLRF   xA8
01DE0:  MOVFF  1A4,1A7
01DE4:  CLRF   xAA
01DE6:  MOVFF  1A2,1A9
01DEA:  CLRF   xAC
01DEC:  MOVFF  1A2,1AB
01DF0:  MOVFF  1A1,1AE
01DF4:  MOVFF  1A0,1AD
01DF8:  MOVLB  0
01DFA:  RCALL  1C98
01DFC:  MOVLW  06
01DFE:  MOVLB  1
01E00:  SUBWF  xA2,F
01E02:  BRA    1D82
....................   }
01E04:  MOVLB  0
01E06:  GOTO   36FE (RETURN)
.................... }
.................... 
.................... void testfillcircles(uint8_t radius, uint16_t color) {
....................   uint8_t x, y;
....................   for (x=radius; x < display_width; x+=radius*2) {
*
02134:  MOVFF  19E,1A1
02138:  MOVF   1D,W
0213A:  MOVLB  1
0213C:  SUBWF  xA1,W
0213E:  BC    217E
....................     for (y=radius; y < display_height; y+=radius*2) {
02140:  MOVFF  19E,1A2
02144:  MOVF   1E,W
02146:  SUBWF  xA2,W
02148:  BC    2172
....................       display_fillCircle(x, y, radius, color);
0214A:  CLRF   xA4
0214C:  MOVFF  1A1,1A3
02150:  CLRF   xA6
02152:  MOVFF  1A2,1A5
02156:  CLRF   xA8
02158:  MOVFF  19E,1A7
0215C:  MOVFF  1A0,1AA
02160:  MOVFF  19F,1A9
02164:  MOVLB  0
02166:  BRA    20C8
02168:  BCF    FD8.0
0216A:  MOVLB  1
0216C:  RLCF   x9E,W
0216E:  ADDWF  xA2,F
02170:  BRA    2144
....................     }
02172:  BCF    FD8.0
02174:  RLCF   x9E,W
02176:  ADDWF  xA1,F
02178:  MOVLB  0
0217A:  BRA    2138
0217C:  MOVLB  1
....................   }
0217E:  MOVLB  0
02180:  GOTO   3724 (RETURN)
.................... }
.................... 
.................... void testdrawcircles(uint8_t radius, uint16_t color) {
....................   uint16_t x, y;
....................   for (x=0; x < (uint16_t)display_width+radius; x+=radius*2) {
*
02434:  MOVLB  1
02436:  CLRF   xA2
02438:  CLRF   xA1
0243A:  CLRF   xA6
0243C:  MOVFF  1D,1A5
02440:  MOVF   x9E,W
02442:  ADDWF  1D,W
02444:  MOVWF  01
02446:  MOVLW  00
02448:  ADDWFC xA6,W
0244A:  MOVWF  03
0244C:  MOVF   xA2,W
0244E:  SUBWF  03,W
02450:  BNC   24BA
02452:  BNZ   245A
02454:  MOVF   01,W
02456:  SUBWF  xA1,W
02458:  BC    24BA
....................     for (y=0; y < (uint16_t)display_height+radius; y+=radius*2) {
0245A:  CLRF   xA4
0245C:  CLRF   xA3
0245E:  CLRF   xA6
02460:  MOVFF  1E,1A5
02464:  MOVF   x9E,W
02466:  ADDWF  1E,W
02468:  MOVWF  01
0246A:  MOVLW  00
0246C:  ADDWFC xA6,W
0246E:  MOVWF  03
02470:  MOVF   xA4,W
02472:  SUBWF  03,W
02474:  BNC   24AE
02476:  BNZ   247E
02478:  MOVF   01,W
0247A:  SUBWF  xA3,W
0247C:  BC    24AE
....................       display_drawCircle(x, y, radius, color);
0247E:  MOVFF  1A2,1A6
02482:  MOVFF  1A1,1A5
02486:  MOVFF  1A4,1A8
0248A:  MOVFF  1A3,1A7
0248E:  CLRF   xAA
02490:  MOVFF  19E,1A9
02494:  MOVFF  1A0,1AC
02498:  MOVFF  19F,1AB
0249C:  MOVLB  0
0249E:  BRA    2184
024A0:  BCF    FD8.0
024A2:  MOVLB  1
024A4:  RLCF   x9E,W
024A6:  ADDWF  xA3,F
024A8:  MOVLW  00
024AA:  ADDWFC xA4,F
024AC:  BRA    245E
....................     }
024AE:  BCF    FD8.0
024B0:  RLCF   x9E,W
024B2:  ADDWF  xA1,F
024B4:  MOVLW  00
024B6:  ADDWFC xA2,F
024B8:  BRA    243A
....................   }
024BA:  MOVLB  0
024BC:  GOTO   3734 (RETURN)
.................... }
.................... 
.................... void testtriangles() {
*
02ABC:  MOVLW  F8
02ABE:  MOVLB  1
02AC0:  MOVWF  x9F
02AC2:  CLRF   x9E
02AC4:  BCF    FD8.0
02AC6:  RRCF   1D,W
02AC8:  MOVWF  xA1
02ACA:  MOVLW  01
02ACC:  SUBWF  1E,W
02ACE:  MOVWF  xA2
02AD0:  CLRF   xA3
02AD2:  MOVFF  1D,1A4
....................    uint16_t color = 0xF800;
....................   uint8_t t,
....................           w = display_width / 2,
....................           x = display_height - 1,
....................           y = 0,
....................           z = display_width;
....................   for(t = 0 ; t <= 27; t++) {
02AD6:  CLRF   xA0
02AD8:  MOVF   xA0,W
02ADA:  SUBLW  1B
02ADC:  BNC   2B24
....................     display_drawTriangle(w, y, y, x, z, x, color);
02ADE:  CLRF   xA6
02AE0:  MOVFF  1A1,1A5
02AE4:  CLRF   xA8
02AE6:  MOVFF  1A3,1A7
02AEA:  CLRF   xAA
02AEC:  MOVFF  1A3,1A9
02AF0:  CLRF   xAC
02AF2:  MOVFF  1A2,1AB
02AF6:  CLRF   xAE
02AF8:  MOVFF  1A4,1AD
02AFC:  CLRF   xB0
02AFE:  MOVFF  1A2,1AF
02B02:  MOVFF  19F,1B2
02B06:  MOVFF  19E,1B1
02B0A:  MOVLB  0
02B0C:  BRA    2A34
....................     x-=4;
02B0E:  MOVLW  04
02B10:  MOVLB  1
02B12:  SUBWF  xA2,F
....................     y+=4;
02B14:  ADDWF  xA3,F
....................     z-=4;
02B16:  SUBWF  xA4,F
....................     color+=60;
02B18:  MOVLW  3C
02B1A:  ADDWF  x9E,F
02B1C:  MOVLW  00
02B1E:  ADDWFC x9F,F
02B20:  INCF   xA0,F
02B22:  BRA    2AD8
....................   }
02B24:  MOVLB  0
02B26:  GOTO   376C (RETURN)
.................... }
.................... 
.................... void testroundrects() {
*
029AE:  MOVLB  1
029B0:  CLRF   x9F
029B2:  MOVLW  64
029B4:  MOVWF  x9E
....................  
....................   uint16_t color = 100;
....................   uint8_t i, t;
....................   for(t = 0 ; t <= 4; t+=1) {
029B6:  CLRF   xA1
029B8:  MOVF   xA1,W
029BA:  SUBLW  04
029BC:  BNC   2A2E
....................     uint8_t x = 0,
....................             y = 0,
....................             w = display_width - 2,
....................             h = display_height - 2;
029BE:  CLRF   xA2
029C0:  CLRF   xA3
029C2:  MOVLW  02
029C4:  SUBWF  1D,W
029C6:  MOVWF  xA4
029C8:  MOVLW  02
029CA:  SUBWF  1E,W
029CC:  MOVWF  xA5
....................     for(i = 0 ; i <= 26; i+=1) {
029CE:  CLRF   xA0
029D0:  MOVF   xA0,W
029D2:  SUBLW  1A
029D4:  BNC   2A20
....................       display_drawRoundRect(x, y, w, h, 5, color);
029D6:  CLRF   xA7
029D8:  MOVFF  1A2,1A6
029DC:  CLRF   xA9
029DE:  MOVFF  1A3,1A8
029E2:  CLRF   xAB
029E4:  MOVFF  1A4,1AA
029E8:  CLRF   xAD
029EA:  MOVFF  1A5,1AC
029EE:  CLRF   xAF
029F0:  MOVLW  05
029F2:  MOVWF  xAE
029F4:  MOVFF  19F,1B1
029F8:  MOVFF  19E,1B0
029FC:  MOVLB  0
029FE:  BRA    26EE
....................       x+=2;
02A00:  MOVLW  02
02A02:  MOVLB  1
02A04:  ADDWF  xA2,F
....................       y+=3;
02A06:  MOVLW  03
02A08:  ADDWF  xA3,F
....................       w-=4;
02A0A:  MOVLW  04
02A0C:  SUBWF  xA4,F
....................       h-=6;
02A0E:  MOVLW  06
02A10:  SUBWF  xA5,F
....................       color+=1100;
02A12:  MOVLW  4C
02A14:  ADDWF  x9E,F
02A16:  MOVLW  04
02A18:  ADDWFC x9F,F
02A1A:  MOVLW  01
02A1C:  ADDWF  xA0,F
02A1E:  BRA    29D0
....................     }
....................     color+=100;
02A20:  MOVLW  64
02A22:  ADDWF  x9E,F
02A24:  MOVLW  00
02A26:  ADDWFC x9F,F
02A28:  MOVLW  01
02A2A:  ADDWF  xA1,F
02A2C:  BRA    29B8
....................   }
02A2E:  MOVLB  0
02A30:  GOTO   3750 (RETURN)
.................... }
.................... 
.................... void tftPrintTest() {
*
0149A:  MOVLW  DA
0149C:  MOVLB  1
0149E:  MOVWF  xA1
014A0:  MOVLW  0F
014A2:  MOVWF  xA0
014A4:  MOVLW  49
014A6:  MOVWF  x9F
014A8:  MOVLW  80
014AA:  MOVWF  x9E
....................   float p = 3.1415926;
....................   display_setTextWrap(false);
014AC:  CLRF   xA4
014AE:  MOVLB  0
014B0:  CALL   0A92
....................   display_setCursor(0, 30);
014B4:  MOVLB  1
014B6:  CLRF   xA5
014B8:  CLRF   xA4
014BA:  CLRF   xA7
014BC:  MOVLW  1E
014BE:  MOVWF  xA6
014C0:  MOVLB  0
014C2:  CALL   0A6E
....................   display_setTextColor(ST7789_RED, ST7789_BLACK);
014C6:  MOVLW  F8
014C8:  MOVLB  1
014CA:  MOVWF  xA3
014CC:  CLRF   xA2
014CE:  CLRF   xA5
014D0:  CLRF   xA4
014D2:  MOVLB  0
014D4:  BRA    0F84
....................   display_setTextSize(1);
014D6:  MOVLW  01
014D8:  MOVLB  1
014DA:  MOVWF  xA2
014DC:  MOVLB  0
014DE:  RCALL  0F98
....................   display_print("Hello World!\r\n");
014E0:  MOVLW  4E
014E2:  MOVWF  FF6
014E4:  MOVLW  07
014E6:  MOVWF  FF7
014E8:  RCALL  0FAA
....................   display_setTextColor(ST7789_YELLOW);
014EA:  MOVLB  1
014EC:  SETF   xA5
014EE:  MOVLW  E0
014F0:  MOVWF  xA4
014F2:  MOVLB  0
014F4:  CALL   0A80
....................   display_setTextSize(2);
014F8:  MOVLW  02
014FA:  MOVLB  1
014FC:  MOVWF  xA2
014FE:  MOVLB  0
01500:  RCALL  0F98
....................   display_print("Hello World!\r\n");
01502:  MOVLW  5E
01504:  MOVWF  FF6
01506:  MOVLW  07
01508:  MOVWF  FF7
0150A:  RCALL  0FAA
....................   display_setTextColor(ST7789_GREEN);
0150C:  MOVLW  07
0150E:  MOVLB  1
01510:  MOVWF  xA5
01512:  MOVLW  E0
01514:  MOVWF  xA4
01516:  MOVLB  0
01518:  CALL   0A80
....................   display_setTextSize(3);
0151C:  MOVLW  03
0151E:  MOVLB  1
01520:  MOVWF  xA2
01522:  MOVLB  0
01524:  RCALL  0F98
....................   display_print("Hello World!\r\n");
01526:  MOVLW  6E
01528:  MOVWF  FF6
0152A:  MOVLW  07
0152C:  MOVWF  FF7
0152E:  RCALL  0FAA
....................   display_setTextColor(ST7789_BLUE);
01530:  MOVLB  1
01532:  CLRF   xA5
01534:  MOVLW  1F
01536:  MOVWF  xA4
01538:  MOVLB  0
0153A:  CALL   0A80
....................   display_setTextSize(4);
0153E:  MOVLW  04
01540:  MOVLB  1
01542:  MOVWF  xA2
01544:  MOVLB  0
01546:  RCALL  0F98
....................   printf(display_print, "%f", 1234.567);
01548:  MOVLW  89
0154A:  MOVWF  FE9
0154C:  MOVLW  25
0154E:  MOVLB  1
01550:  MOVWF  xA5
01552:  MOVLW  52
01554:  MOVWF  xA4
01556:  MOVLW  1A
01558:  MOVWF  xA3
0155A:  MOVLW  89
0155C:  MOVWF  xA2
0155E:  MOVLW  02
01560:  MOVWF  xA6
01562:  MOVLB  0
01564:  RCALL  119A
....................   delay_ms(1500);
01566:  MOVLW  06
01568:  MOVLB  1
0156A:  MOVWF  xA2
0156C:  MOVLW  FA
0156E:  MOVWF  xA5
01570:  MOVLB  0
01572:  CALL   07DA
01576:  MOVLB  1
01578:  DECFSZ xA2,F
0157A:  BRA    156C
....................   display_setCursor(0, 0);
0157C:  CLRF   xA5
0157E:  CLRF   xA4
01580:  CLRF   xA7
01582:  CLRF   xA6
01584:  MOVLB  0
01586:  CALL   0A6E
....................  
....................   display_setTextColor(ST7789_WHITE);
0158A:  MOVLB  1
0158C:  SETF   xA5
0158E:  SETF   xA4
01590:  MOVLB  0
01592:  CALL   0A80
....................   display_setTextSize(0);
01596:  MOVLB  1
01598:  CLRF   xA2
0159A:  MOVLB  0
0159C:  RCALL  0F98
....................   display_print("MURAT IRKAN\r\n");
0159E:  MOVLW  7E
015A0:  MOVWF  FF6
015A2:  MOVLW  07
015A4:  MOVWF  FF7
015A6:  RCALL  0FAA
....................   display_setTextSize(1);
015A8:  MOVLW  01
015AA:  MOVLB  1
015AC:  MOVWF  xA2
015AE:  MOVLB  0
015B0:  RCALL  0F98
....................   display_setTextColor(ST7789_GREEN);
015B2:  MOVLW  07
015B4:  MOVLB  1
015B6:  MOVWF  xA5
015B8:  MOVLW  E0
015BA:  MOVWF  xA4
015BC:  MOVLB  0
015BE:  CALL   0A80
....................   printf(display_print, "%8f", p);
015C2:  MOVLW  07
015C4:  MOVWF  FE9
015C6:  MOVFF  1A1,1A5
015CA:  MOVFF  1A0,1A4
015CE:  MOVFF  19F,1A3
015D2:  MOVFF  19E,1A2
015D6:  MOVLW  06
015D8:  MOVLB  1
015DA:  MOVWF  xA6
015DC:  MOVLB  0
015DE:  RCALL  119A
....................   display_print(" Want pi?\r\n");
015E0:  MOVLW  8C
015E2:  MOVWF  FF6
015E4:  MOVLW  07
015E6:  MOVWF  FF7
015E8:  RCALL  0FAA
....................   display_print(" \r\n");
015EA:  MOVLW  98
015EC:  MOVWF  FF6
015EE:  MOVLW  07
015F0:  MOVWF  FF7
015F2:  RCALL  0FAA
....................   printf(display_print, "%6LX", 8675309); // print 8,675,309 out in HEX!
015F4:  MOVLW  84
015F6:  MOVLB  1
015F8:  MOVWF  xA2
015FA:  MOVLW  37
015FC:  MOVWF  xA3
015FE:  MOVLB  0
01600:  RCALL  1340
01602:  MOVLW  5F
01604:  MOVLB  1
01606:  MOVWF  xA2
01608:  MOVLW  37
0160A:  MOVWF  xA3
0160C:  MOVLB  0
0160E:  RCALL  1340
01610:  MOVLW  ED
01612:  MOVLB  1
01614:  MOVWF  xA2
01616:  MOVLW  37
01618:  MOVWF  xA3
0161A:  MOVLB  0
0161C:  RCALL  1340
....................   display_print(" Print HEX!\r\n");
0161E:  MOVLW  9C
01620:  MOVWF  FF6
01622:  MOVLW  07
01624:  MOVWF  FF7
01626:  RCALL  0FAA
....................   display_print(" \r\n");
01628:  MOVLW  AA
0162A:  MOVWF  FF6
0162C:  MOVLW  07
0162E:  MOVWF  FF7
01630:  RCALL  0FAA
....................   display_setTextColor(ST7789_WHITE);
01632:  MOVLB  1
01634:  SETF   xA5
01636:  SETF   xA4
01638:  MOVLB  0
0163A:  CALL   0A80
....................   display_print("Sketch has been\r\n");
0163E:  MOVLW  AE
01640:  MOVWF  FF6
01642:  MOVLW  07
01644:  MOVWF  FF7
01646:  RCALL  0FAA
....................   display_print("running for: \r\n");
01648:  MOVLW  C0
0164A:  MOVWF  FF6
0164C:  MOVLW  07
0164E:  MOVWF  FF7
01650:  RCALL  0FAA
....................   display_setTextColor(ST7789_MAGENTA);
01652:  MOVLW  F8
01654:  MOVLB  1
01656:  MOVWF  xA5
01658:  MOVLW  1F
0165A:  MOVWF  xA4
0165C:  MOVLB  0
0165E:  CALL   0A80
....................   printf(display_print, "%Lu", get_ticks() / 1024);
01662:  BRA    1386
01664:  MOVLB  1
01666:  MOVFF  01,1A2
0166A:  MOVFF  02,1A3
0166E:  MOVFF  03,1A4
01672:  CLRF   xA5
01674:  RRCF   xA5,F
01676:  RRCF   xA4,F
01678:  RRCF   xA3,F
0167A:  RRCF   xA2,F
0167C:  RRCF   xA5,F
0167E:  RRCF   xA4,F
01680:  RRCF   xA3,F
01682:  RRCF   xA2,F
01684:  MOVLW  3F
01686:  ANDWF  xA5,F
01688:  MOVLW  41
0168A:  MOVWF  FE9
0168C:  MOVFF  1A5,1A9
01690:  MOVFF  1A4,1A8
01694:  MOVFF  1A3,1A7
01698:  MOVFF  1A2,1A6
0169C:  MOVLB  0
0169E:  BRA    13DA
....................   display_setTextColor(ST7789_WHITE);
016A0:  MOVLB  1
016A2:  SETF   xA5
016A4:  SETF   xA4
016A6:  MOVLB  0
016A8:  CALL   0A80
....................   display_print(" seconds.");
016AC:  MOVLW  D0
016AE:  MOVWF  FF6
016B0:  MOVLW  07
016B2:  MOVWF  FF7
016B4:  RCALL  0FAA
016B6:  GOTO   3630 (RETURN)
.................... }
.................... 
.................... void mediabuttons() {
....................   // play
....................    display_fillRoundRect(81, 50, 78, 60, 8, ST7789_WHITE);
*
0337A:  MOVLB  1
0337C:  CLRF   x9F
0337E:  MOVLW  51
03380:  MOVWF  x9E
03382:  CLRF   xA1
03384:  MOVLW  32
03386:  MOVWF  xA0
03388:  CLRF   xA3
0338A:  MOVLW  4E
0338C:  MOVWF  xA2
0338E:  CLRF   xA5
03390:  MOVLW  3C
03392:  MOVWF  xA4
03394:  CLRF   xA7
03396:  MOVLW  08
03398:  MOVWF  xA6
0339A:  SETF   xA9
0339C:  SETF   xA8
0339E:  MOVLB  0
033A0:  CALL   2B2A
....................   display_fillTriangle(98, 60, 98, 100, 146, 80, ST7789_RED);
033A4:  MOVLB  1
033A6:  CLRF   x9F
033A8:  MOVLW  62
033AA:  MOVWF  x9E
033AC:  CLRF   xA1
033AE:  MOVLW  3C
033B0:  MOVWF  xA0
033B2:  CLRF   xA3
033B4:  MOVLW  62
033B6:  MOVWF  xA2
033B8:  CLRF   xA5
033BA:  MOVLW  64
033BC:  MOVWF  xA4
033BE:  CLRF   xA7
033C0:  MOVLW  92
033C2:  MOVWF  xA6
033C4:  CLRF   xA9
033C6:  MOVLW  50
033C8:  MOVWF  xA8
033CA:  MOVLW  F8
033CC:  MOVWF  xAB
033CE:  CLRF   xAA
033D0:  MOVLB  0
033D2:  RCALL  2D94
....................   delay_ms(500);
033D4:  MOVLW  02
033D6:  MOVLB  1
033D8:  MOVWF  x9E
033DA:  MOVLW  FA
033DC:  MOVWF  xA5
033DE:  MOVLB  0
033E0:  CALL   07DA
033E4:  MOVLB  1
033E6:  DECFSZ x9E,F
033E8:  BRA    33DA
....................   // pause
....................   display_fillRoundRect(81, 130, 78, 60, 8, ST7789_WHITE);
033EA:  CLRF   x9F
033EC:  MOVLW  51
033EE:  MOVWF  x9E
033F0:  CLRF   xA1
033F2:  MOVLW  82
033F4:  MOVWF  xA0
033F6:  CLRF   xA3
033F8:  MOVLW  4E
033FA:  MOVWF  xA2
033FC:  CLRF   xA5
033FE:  MOVLW  3C
03400:  MOVWF  xA4
03402:  CLRF   xA7
03404:  MOVLW  08
03406:  MOVWF  xA6
03408:  SETF   xA9
0340A:  SETF   xA8
0340C:  MOVLB  0
0340E:  CALL   2B2A
....................   display_fillRoundRect(95, 138, 20, 45, 5, ST7789_GREEN);
03412:  MOVLB  1
03414:  CLRF   x9F
03416:  MOVLW  5F
03418:  MOVWF  x9E
0341A:  CLRF   xA1
0341C:  MOVLW  8A
0341E:  MOVWF  xA0
03420:  CLRF   xA3
03422:  MOVLW  14
03424:  MOVWF  xA2
03426:  CLRF   xA5
03428:  MOVLW  2D
0342A:  MOVWF  xA4
0342C:  CLRF   xA7
0342E:  MOVLW  05
03430:  MOVWF  xA6
03432:  MOVLW  07
03434:  MOVWF  xA9
03436:  MOVLW  E0
03438:  MOVWF  xA8
0343A:  MOVLB  0
0343C:  CALL   2B2A
....................   display_fillRoundRect(125, 138, 20, 45, 5, ST7789_GREEN);
03440:  MOVLB  1
03442:  CLRF   x9F
03444:  MOVLW  7D
03446:  MOVWF  x9E
03448:  CLRF   xA1
0344A:  MOVLW  8A
0344C:  MOVWF  xA0
0344E:  CLRF   xA3
03450:  MOVLW  14
03452:  MOVWF  xA2
03454:  CLRF   xA5
03456:  MOVLW  2D
03458:  MOVWF  xA4
0345A:  CLRF   xA7
0345C:  MOVLW  05
0345E:  MOVWF  xA6
03460:  MOVLW  07
03462:  MOVWF  xA9
03464:  MOVLW  E0
03466:  MOVWF  xA8
03468:  MOVLB  0
0346A:  CALL   2B2A
....................   delay_ms(500);
0346E:  MOVLW  02
03470:  MOVLB  1
03472:  MOVWF  x9E
03474:  MOVLW  FA
03476:  MOVWF  xA5
03478:  MOVLB  0
0347A:  CALL   07DA
0347E:  MOVLB  1
03480:  DECFSZ x9E,F
03482:  BRA    3474
....................   // play color
....................   display_fillTriangle(98, 60, 98, 100, 146, 80, ST7789_BLUE);
03484:  CLRF   x9F
03486:  MOVLW  62
03488:  MOVWF  x9E
0348A:  CLRF   xA1
0348C:  MOVLW  3C
0348E:  MOVWF  xA0
03490:  CLRF   xA3
03492:  MOVLW  62
03494:  MOVWF  xA2
03496:  CLRF   xA5
03498:  MOVLW  64
0349A:  MOVWF  xA4
0349C:  CLRF   xA7
0349E:  MOVLW  92
034A0:  MOVWF  xA6
034A2:  CLRF   xA9
034A4:  MOVLW  50
034A6:  MOVWF  xA8
034A8:  CLRF   xAB
034AA:  MOVLW  1F
034AC:  MOVWF  xAA
034AE:  MOVLB  0
034B0:  RCALL  2D94
....................   delay_ms(50);
034B2:  MOVLW  32
034B4:  MOVLB  1
034B6:  MOVWF  xA5
034B8:  MOVLB  0
034BA:  CALL   07DA
....................   // pause color
....................   display_fillRoundRect(95, 138, 20, 45, 5, ST7789_RED);
034BE:  MOVLB  1
034C0:  CLRF   x9F
034C2:  MOVLW  5F
034C4:  MOVWF  x9E
034C6:  CLRF   xA1
034C8:  MOVLW  8A
034CA:  MOVWF  xA0
034CC:  CLRF   xA3
034CE:  MOVLW  14
034D0:  MOVWF  xA2
034D2:  CLRF   xA5
034D4:  MOVLW  2D
034D6:  MOVWF  xA4
034D8:  CLRF   xA7
034DA:  MOVLW  05
034DC:  MOVWF  xA6
034DE:  MOVLW  F8
034E0:  MOVWF  xA9
034E2:  CLRF   xA8
034E4:  MOVLB  0
034E6:  CALL   2B2A
....................   display_fillRoundRect(125, 138, 20, 45, 5, ST7789_RED);
034EA:  MOVLB  1
034EC:  CLRF   x9F
034EE:  MOVLW  7D
034F0:  MOVWF  x9E
034F2:  CLRF   xA1
034F4:  MOVLW  8A
034F6:  MOVWF  xA0
034F8:  CLRF   xA3
034FA:  MOVLW  14
034FC:  MOVWF  xA2
034FE:  CLRF   xA5
03500:  MOVLW  2D
03502:  MOVWF  xA4
03504:  CLRF   xA7
03506:  MOVLW  05
03508:  MOVWF  xA6
0350A:  MOVLW  F8
0350C:  MOVWF  xA9
0350E:  CLRF   xA8
03510:  MOVLB  0
03512:  CALL   2B2A
....................   // play color
....................   display_fillTriangle(98, 60, 98, 100, 146, 80, ST7789_GREEN);
03516:  MOVLB  1
03518:  CLRF   x9F
0351A:  MOVLW  62
0351C:  MOVWF  x9E
0351E:  CLRF   xA1
03520:  MOVLW  3C
03522:  MOVWF  xA0
03524:  CLRF   xA3
03526:  MOVLW  62
03528:  MOVWF  xA2
0352A:  CLRF   xA5
0352C:  MOVLW  64
0352E:  MOVWF  xA4
03530:  CLRF   xA7
03532:  MOVLW  92
03534:  MOVWF  xA6
03536:  CLRF   xA9
03538:  MOVLW  50
0353A:  MOVWF  xA8
0353C:  MOVLW  07
0353E:  MOVWF  xAB
03540:  MOVLW  E0
03542:  MOVWF  xAA
03544:  MOVLB  0
03546:  RCALL  2D94
03548:  GOTO   3786 (RETURN)
.................... }
.................... 
.................... // main function
.................... void main(void)
*
0356C:  CLRF   FF8
0356E:  BCF    FD0.7
03570:  BSF    07.7
03572:  MOVLW  70
03574:  MOVWF  FD3
03576:  BSF    F9B.6
03578:  BCF    F9B.7
0357A:  BCF    FC6.5
0357C:  MOVLW  40
0357E:  MOVWF  FC7
03580:  MOVLW  30
03582:  MOVWF  FC6
03584:  BCF    F94.5
03586:  BSF    F94.4
03588:  BCF    F94.3
0358A:  CLRF   1C
0358C:  CLRF   1B
0358E:  CLRF   1A
03590:  CLRF   19
03592:  BCF    FCD.0
03594:  MOVLW  37
03596:  MOVWF  FCD
03598:  CLRF   FCC
0359A:  CLRF   FCF
0359C:  CLRF   FCE
0359E:  NOP   
035A0:  BCF    F9E.0
035A2:  BSF    F9D.0
035A4:  CLRF   25
035A6:  CLRF   24
035A8:  CLRF   27
035AA:  CLRF   26
035AC:  SETF   29
035AE:  SETF   28
035B0:  SETF   2B
035B2:  SETF   2A
035B4:  MOVLW  01
035B6:  MOVWF  2C
035B8:  BSF    2D.0
035BA:  CLRF   2F
035BC:  CLRF   2E
035BE:  MOVLB  F
035C0:  CLRF   x38
035C2:  CLRF   x39
035C4:  CLRF   x3A
035C6:  CLRF   x3B
035C8:  CLRF   x3C
035CA:  CLRF   F77
035CC:  CLRF   F78
035CE:  CLRF   F79
.................... {
....................   enable_interrupts(GLOBAL);   // enable global interrupts
035D0:  MOVLW  C0
035D2:  IORWF  FF2,F
.................... 
....................   // initialize the ST7789 display
....................   tft_init();
035D4:  MOVLB  0
035D6:  GOTO   0A1A
.................... 
....................   // fill screen with black
....................   
.................... 
....................   // large block of text
....................   testdrawtext((char *)"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere. ", ST7789_WHITE);
035DA:  CLRF   FEA
035DC:  MOVLW  30
035DE:  MOVWF  FE9
035E0:  MOVLW  02
035E2:  MOVWF  02
035E4:  MOVLW  6E
035E6:  MOVWF  01
035E8:  CLRF   FF7
035EA:  MOVLW  00
035EC:  CALL   05BC
035F0:  TBLRD*-
035F2:  TBLRD*+
035F4:  CLRF   FEF
035F6:  MOVFF  FF5,FEE
035FA:  DECFSZ 01,F
035FC:  BRA    35F2
035FE:  DECFSZ 02,F
03600:  BRA    35F2
03602:  MOVLB  1
03604:  CLRF   xA1
03606:  MOVLW  30
03608:  MOVWF  xA0
0360A:  SETF   xA3
0360C:  SETF   xA2
0360E:  MOVLB  0
03610:  GOTO   0F54
....................   delay_ms(1000);
03614:  MOVLW  04
03616:  MOVLB  1
03618:  MOVWF  x9E
0361A:  MOVLW  FA
0361C:  MOVWF  xA5
0361E:  MOVLB  0
03620:  CALL   07DA
03624:  MOVLB  1
03626:  DECFSZ x9E,F
03628:  BRA    361A
.................... 
....................   // tft print function!
....................   tftPrintTest();
0362A:  MOVLB  0
0362C:  GOTO   149A
....................   delay_ms(4000);
03630:  MOVLW  10
03632:  MOVLB  1
03634:  MOVWF  x9E
03636:  MOVLW  FA
03638:  MOVWF  xA5
0363A:  MOVLB  0
0363C:  CALL   07DA
03640:  MOVLB  1
03642:  DECFSZ x9E,F
03644:  BRA    3636
.................... 
....................   // a single pixel
....................   display_drawPixel(display_width/2, display_height/2, ST7789_GREEN);
03646:  BCF    FD8.0
03648:  RRCF   1D,W
0364A:  MOVWF  x9E
0364C:  BCF    FD8.0
0364E:  RRCF   1E,W
03650:  MOVWF  x9F
03652:  MOVFF  19E,1DC
03656:  MOVWF  xDD
03658:  MOVLW  07
0365A:  MOVWF  xDF
0365C:  MOVLW  E0
0365E:  MOVWF  xDE
03660:  MOVLB  0
03662:  CALL   0B34
....................   delay_ms(500);
03666:  MOVLW  02
03668:  MOVLB  1
0366A:  MOVWF  x9E
0366C:  MOVLW  FA
0366E:  MOVWF  xA5
03670:  MOVLB  0
03672:  CALL   07DA
03676:  MOVLB  1
03678:  DECFSZ x9E,F
0367A:  BRA    366C
.................... 
....................   // line draw test
....................   testlines(ST7789_YELLOW);
0367C:  SETF   x9F
0367E:  MOVLW  E0
03680:  MOVWF  x9E
03682:  MOVLB  0
03684:  GOTO   1A7A
....................   delay_ms(500);
03688:  MOVLW  02
0368A:  MOVLB  1
0368C:  MOVWF  x9E
0368E:  MOVLW  FA
03690:  MOVWF  xA5
03692:  MOVLB  0
03694:  CALL   07DA
03698:  MOVLB  1
0369A:  DECFSZ x9E,F
0369C:  BRA    368E
.................... 
....................   // optimized lines
....................   testfastlines(ST7789_RED, ST7789_BLUE);
0369E:  MOVLW  F8
036A0:  MOVWF  x9F
036A2:  CLRF   x9E
036A4:  CLRF   xA1
036A6:  MOVLW  1F
036A8:  MOVWF  xA0
036AA:  MOVLB  0
036AC:  GOTO   1C42
....................   delay_ms(500);
036B0:  MOVLW  02
036B2:  MOVLB  1
036B4:  MOVWF  x9E
036B6:  MOVLW  FA
036B8:  MOVWF  xA5
036BA:  MOVLB  0
036BC:  CALL   07DA
036C0:  MOVLB  1
036C2:  DECFSZ x9E,F
036C4:  BRA    36B6
.................... 
....................   testdrawrects(ST7789_GREEN);
036C6:  MOVLW  07
036C8:  MOVWF  x9F
036CA:  MOVLW  E0
036CC:  MOVWF  x9E
036CE:  MOVLB  0
036D0:  GOTO   1D26
....................   delay_ms(500);
036D4:  MOVLW  02
036D6:  MOVLB  1
036D8:  MOVWF  x9E
036DA:  MOVLW  FA
036DC:  MOVWF  xA5
036DE:  MOVLB  0
036E0:  CALL   07DA
036E4:  MOVLB  1
036E6:  DECFSZ x9E,F
036E8:  BRA    36DA
.................... 
....................   testfillrects(ST7789_YELLOW, ST7789_MAGENTA);
036EA:  SETF   x9F
036EC:  MOVLW  E0
036EE:  MOVWF  x9E
036F0:  MOVLW  F8
036F2:  MOVWF  xA1
036F4:  MOVLW  1F
036F6:  MOVWF  xA0
036F8:  MOVLB  0
036FA:  GOTO   1D7A
....................   delay_ms(500);
036FE:  MOVLW  02
03700:  MOVLB  1
03702:  MOVWF  x9E
03704:  MOVLW  FA
03706:  MOVWF  xA5
03708:  MOVLB  0
0370A:  CALL   07DA
0370E:  MOVLB  1
03710:  DECFSZ x9E,F
03712:  BRA    3704
.................... 
....................   testfillcircles(10, ST7789_BLUE);
03714:  MOVLW  0A
03716:  MOVWF  x9E
03718:  CLRF   xA0
0371A:  MOVLW  1F
0371C:  MOVWF  x9F
0371E:  MOVLB  0
03720:  GOTO   2134
....................   testdrawcircles(10, ST7789_WHITE);
03724:  MOVLW  0A
03726:  MOVLB  1
03728:  MOVWF  x9E
0372A:  SETF   xA0
0372C:  SETF   x9F
0372E:  MOVLB  0
03730:  GOTO   2434
....................   delay_ms(500);
03734:  MOVLW  02
03736:  MOVLB  1
03738:  MOVWF  x9E
0373A:  MOVLW  FA
0373C:  MOVWF  xA5
0373E:  MOVLB  0
03740:  CALL   07DA
03744:  MOVLB  1
03746:  DECFSZ x9E,F
03748:  BRA    373A
.................... 
....................   testroundrects();
0374A:  MOVLB  0
0374C:  GOTO   29AE
....................   delay_ms(500);
03750:  MOVLW  02
03752:  MOVLB  1
03754:  MOVWF  x9E
03756:  MOVLW  FA
03758:  MOVWF  xA5
0375A:  MOVLB  0
0375C:  CALL   07DA
03760:  MOVLB  1
03762:  DECFSZ x9E,F
03764:  BRA    3756
.................... 
....................   testtriangles();
03766:  MOVLB  0
03768:  GOTO   2ABC
....................   delay_ms(500);
0376C:  MOVLW  02
0376E:  MOVLB  1
03770:  MOVWF  x9E
03772:  MOVLW  FA
03774:  MOVWF  xA5
03776:  MOVLB  0
03778:  CALL   07DA
0377C:  MOVLB  1
0377E:  DECFSZ x9E,F
03780:  BRA    3772
.................... 
....................   mediabuttons();
03782:  MOVLB  0
03784:  BRA    337A
....................   delay_ms(500);
03786:  MOVLW  02
03788:  MOVLB  1
0378A:  MOVWF  x9E
0378C:  MOVLW  FA
0378E:  MOVWF  xA5
03790:  MOVLB  0
03792:  CALL   07DA
03796:  MOVLB  1
03798:  DECFSZ x9E,F
0379A:  BRA    378C
.................... 
....................   while(TRUE)
....................   {
....................     display_Invert(true);
0379C:  MOVLW  01
0379E:  MOVWF  x9E
037A0:  MOVLB  0
037A2:  RCALL  354C
....................     delay_ms(500);
037A4:  MOVLW  02
037A6:  MOVLB  1
037A8:  MOVWF  x9E
037AA:  MOVLW  FA
037AC:  MOVWF  xA5
037AE:  MOVLB  0
037B0:  CALL   07DA
037B4:  MOVLB  1
037B6:  DECFSZ x9E,F
037B8:  BRA    37AA
....................     display_Invert(false);
037BA:  CLRF   x9E
037BC:  MOVLB  0
037BE:  RCALL  354C
....................     delay_ms(500);
037C0:  MOVLW  02
037C2:  MOVLB  1
037C4:  MOVWF  x9E
037C6:  MOVLW  FA
037C8:  MOVWF  xA5
037CA:  MOVLB  0
037CC:  CALL   07DA
037D0:  MOVLB  1
037D2:  DECFSZ x9E,F
037D4:  BRA    37C6
037D6:  BRA    379C
....................   }
.................... 
.................... }
.................... 
037D8:  SLEEP 
.................... // end of code.

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY_ON FCMEN IESO
   Word  2: 3C18   PUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: 3F00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
00FFDC: 09 01 80 96 11 80 FF 3A 81 55 0A 36 01 08 2A 04    .......:.U.6..*.
00FFEC: 00 00 00 F0 2B 04 00 50 01 40 21 80 0A 13 80 0A    ....+..P.@!.....
00FFFC: 29 80 FF                                           )..
